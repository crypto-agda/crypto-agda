{-# OPTIONS --copatterns --without-K #-}
-- Compression can be used an an Oracle to defeat encryption.
-- Here we show how compressing before encrypting lead to a
-- NOT semantically secure construction (IND-CPA).
module Attack.Compression where

open import Type using (Type)
open import Function.NP
open import Data.Nat.NP
open import Data.Two renaming (_==_ to _==·µá_)
open import Data.Two.Equality
open import Data.Product
open import Data.Zero
open import Relation.Binary.PropositionalEquality.NP

import Game.IND-CPA.Core

record Sized (A : Type) : Type where
  field
    size  : A ‚Üí ‚Ñï

open Sized {{...}}

module EqSized {A B : Type} {{_ : Sized A}} {{_ : Sized B}} where
    -- Same size
    _==À¢_ : A ‚Üí B ‚Üí ùüö
    x ==À¢ y = size x == size y

    -- Same size
    _‚â°À¢_ : A ‚Üí B ‚Üí Type
    x ‚â°À¢ y = size x ‚â° size y

    ‚â°À¢‚Üí==À¢ : ‚àÄ {x y} ‚Üí x ‚â°À¢ y ‚Üí (x ==À¢ y) ‚â° 1‚ÇÇ
    ‚â°À¢‚Üí==À¢ {x} {y} x‚â°À¢y rewrite x‚â°À¢y = ‚úì‚Üí‚â° (==.refl {size y})

    ==À¢‚Üí‚â°À¢ : ‚àÄ {x y} ‚Üí (x ==À¢ y) ‚â° 1‚ÇÇ ‚Üí x ‚â°À¢ y
    ==À¢‚Üí‚â°À¢ p = ==.sound _ _ (‚â°‚Üí‚úì p)

module EncSized
         {PubKey Message CipherText R‚Çë : Type}
         (enc  : PubKey ‚Üí Message ‚Üí R‚Çë ‚Üí CipherText)
         {{_ : Sized Message}}
         {{_ : Sized CipherText}}
  where
    open EqSized

    -- Encryption size is independant of the randomness
    EncSizeRndInd =
      ‚àÄ {pk m r‚ÇÄ r‚ÇÅ} ‚Üí enc pk m r‚ÇÄ ‚â°À¢ enc pk m r‚ÇÅ

    -- Encrypted ciphertexts of the same size, will lead to messages of the same size
    EncLeakSize =
      ‚àÄ {pk m‚ÇÄ m‚ÇÅ r‚ÇÄ r‚ÇÅ} ‚Üí enc pk m‚ÇÄ r‚ÇÄ ‚â°À¢ enc pk m‚ÇÅ r‚ÇÅ ‚Üí m‚ÇÄ ‚â°À¢ m‚ÇÅ

module M
  {Message CompressedMessage : Type}
  {{_ : Sized CompressedMessage}}

  (compress : Message ‚Üí CompressedMessage)

  -- 2 messages which have different size after compression
  (m‚ÇÄ m‚ÇÅ : Message)
  (different-compression
     : size (compress m‚ÇÄ) ‚â¢ size (compress m‚ÇÅ))

  (PubKey     : Type)
  (SecKey     : Type)
  (CipherText : Type)
  {{_ : Sized CipherText}}
  (R‚Çë R‚Çñ R‚Çì : Type)
  (KeyGen : R‚Çñ ‚Üí PubKey √ó SecKey)
  (enc : PubKey ‚Üí CompressedMessage ‚Üí R‚Çë ‚Üí CipherText)
  (open EncSized enc)
  (encSizeRndInd : EncSizeRndInd)
  (encLeakSize : EncLeakSize)
  where

  -- Our adversary runs one encryption
  R‚Çê = R‚Çë

  cenc : PubKey ‚Üí Message ‚Üí R‚Çë ‚Üí CipherText
  cenc pk m r‚Çë = enc pk (compress m) r‚Çë

  module IND-CPA = Game.IND-CPA.Core PubKey SecKey Message CipherText
                                R‚Çë R‚Çñ R‚Çê R‚Çì KeyGen cenc
  open IND-CPA.Adversary
  open EqSized {CipherText}{CipherText} {{it}} {{it}}

  A : IND-CPA.Adversary
  m A _ _ = [0: m‚ÇÄ 1: m‚ÇÅ ]
  b‚Ä≤ A r‚Çë pk c = c ==À¢ cenc pk m‚ÇÅ r‚Çë

  A-always-guesses-right : ‚àÄ b r ‚Üí IND-CPA.EXP b A r ‚â° b
  A-always-guesses-right 0‚ÇÇ _ = ‚â¢1‚Üí‚â°0 (different-compression ‚àò‚Ä≤ encLeakSize ‚àò‚Ä≤ ==À¢‚Üí‚â°À¢)
  A-always-guesses-right 1‚ÇÇ _ = ‚â°À¢‚Üí==À¢ encSizeRndInd

  -- The adversary A is always winning.
  A-always-wins : ‚àÄ r ‚Üí IND-CPA.game A r ‚â° 1‚ÇÇ
  A-always-wins (b , r) rewrite A-always-guesses-right b r = ==-‚â°1‚ÇÇ.refl {b}
