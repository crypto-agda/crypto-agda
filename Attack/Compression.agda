{-# OPTIONS --copatterns #-}
-- Compression can be used an an Oracle to defeat encryption.
-- Here we show how compressing before encrypting lead to a
-- NOT semantically secure construction (IND-CPA).
module Attack.Compression where

open import Type using (‚òÖ)
open import Function
open import Data.Nat.NP
open import Data.Two renaming (_==_ to _==·µá_)
open import Data.Product
open import Data.Zero
open import Relation.Binary.PropositionalEquality.NP

import Game.IND-CPA

record Sized (A : ‚òÖ) : ‚òÖ where
  field
    size  : A ‚Üí ‚Ñï

open Sized {{...}}

module _ {A B} {{_ : Sized A}} {{_ : Sized B}} where
    -- Same size
    _==À¢_ : A ‚Üí B ‚Üí ùüö
    x ==À¢ y = size x == size y

    -- Same size
    _‚â°À¢_ : A ‚Üí B ‚Üí ‚òÖ
    x ‚â°À¢ y = size x ‚â° size y

    ‚â°À¢‚Üí==À¢ : ‚àÄ {x y} ‚Üí x ‚â°À¢ y ‚Üí (x ==À¢ y) ‚â° 1‚ÇÇ
    ‚â°À¢‚Üí==À¢ {x} {y} x‚â°À¢y rewrite x‚â°À¢y = ‚úì‚Üí‚â° (==.refl {size y})

    ==À¢‚Üí‚â°À¢ : ‚àÄ {x y} ‚Üí (x ==À¢ y) ‚â° 1‚ÇÇ ‚Üí x ‚â°À¢ y
    ==À¢‚Üí‚â°À¢ p = ==.sound _ _ (‚â°‚Üí‚úì p)

module _ {PubKey Message CipherText R‚Çë : ‚òÖ}
         (Enc  : PubKey ‚Üí Message ‚Üí R‚Çë ‚Üí CipherText)
         {{_ : Sized Message}}
         {{_ : Sized CipherText}}
  where
    -- Encryption size is independant of the randomness
    EncSizeRndInd =
      ‚àÄ {pk m r‚ÇÄ r‚ÇÅ} ‚Üí Enc pk m r‚ÇÄ ‚â°À¢ Enc pk m r‚ÇÅ

    -- Encrypted ciphertexts of the same size, will lead to messages of the same size
    EncLeakSize =
      ‚àÄ {pk m‚ÇÄ m‚ÇÅ r‚ÇÄ r‚ÇÅ} ‚Üí Enc pk m‚ÇÄ r‚ÇÄ ‚â°À¢ Enc pk m‚ÇÅ r‚ÇÅ ‚Üí m‚ÇÄ ‚â°À¢ m‚ÇÅ

module M
  {Message CompressedMessage : ‚òÖ}
  {{_ : Sized CompressedMessage}}

  (compress : Message ‚Üí CompressedMessage)

  -- 2 messages which have different size after compression
  (m‚ÇÄ m‚ÇÅ : Message)
  (different-compression
     : size (compress m‚ÇÄ) ‚â¢ size (compress m‚ÇÅ))

  (PubKey     : ‚òÖ)
  (SecKey     : ‚òÖ)
  (CipherText : ‚òÖ)
  {{_ : Sized CipherText}}
  (R‚Çë R‚Çñ R‚Çì : ‚òÖ)
  (KeyGen : R‚Çñ ‚Üí PubKey √ó SecKey)
  (Enc‚ÇÄ : PubKey ‚Üí CompressedMessage ‚Üí R‚Çë ‚Üí CipherText)
  (Enc‚ÇÄSizeRndInd : EncSizeRndInd Enc‚ÇÄ)
  (Enc‚ÇÄLeakSize : EncLeakSize Enc‚ÇÄ)
  where

  -- Our adversary runs one encryption
  R‚Çê = R‚Çë

  Enc‚ÇÅ : PubKey ‚Üí Message ‚Üí R‚Çë ‚Üí CipherText
  Enc‚ÇÅ pk m r‚Çë = Enc‚ÇÄ pk (compress m) r‚Çë

  module IND-CPA = Game.IND-CPA PubKey SecKey Message CipherText
                                R‚Çë R‚Çñ R‚Çê R‚Çì KeyGen Enc‚ÇÅ
  open IND-CPA.Adversary

  A : IND-CPA.Adversary
  m  A = Œª _ _ ‚Üí [0: m‚ÇÄ 1: m‚ÇÅ ]
  b‚Ä≤ A = Œª r‚Çë pk c ‚Üí c ==À¢ Enc‚ÇÅ pk m‚ÇÅ r‚Çë

  -- The adversary A is always winning.
  A-always-wins : ‚àÄ b r ‚Üí IND-CPA.EXP b A r ‚â° b
  A-always-wins 0‚ÇÇ _ = ‚â¢1‚Üí‚â°0 (different-compression ‚àò Enc‚ÇÄLeakSize ‚àò ==À¢‚Üí‚â°À¢)
  A-always-wins 1‚ÇÇ _ = ‚â°À¢‚Üí==À¢ Enc‚ÇÄSizeRndInd

  lem : ‚àÄ x y ‚Üí (x ==·µá y) ‚â° 0‚ÇÇ ‚Üí not (x ==·µá y) ‚â° 1‚ÇÇ
  lem 1‚ÇÇ 1‚ÇÇ = Œª ()
  lem 1‚ÇÇ 0‚ÇÇ = Œª _ ‚Üí refl
  lem 0‚ÇÇ 1‚ÇÇ = Œª _ ‚Üí refl
  lem 0‚ÇÇ 0‚ÇÇ = Œª ()

  {-
  A-always-wins' : ‚àÄ r ‚Üí IND-CPA.game A r ‚â° 1‚ÇÇ
  A-always-wins' (0‚ÇÇ , r) = {!lem (not (IND-CPA.EXP 0‚ÇÇ {!A!} r)) (IND-CPA.EXP 1‚ÇÇ A r) (A-always-wins 0‚ÇÇ r)!}
  A-always-wins' (1‚ÇÇ , r) = A-always-wins 1‚ÇÇ r
  -}
