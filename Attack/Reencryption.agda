{-# OPTIONS --without-K --copatterns #-}
{-
Any cipher which does supports reencryption (exponential ElGamal, Pailler...) are vulnerable to a CCA2 attack.
-}
open import Function
open import Type using (‚òÖ)
open import Data.Product
open import Data.Two
open import Data.Maybe
open import Relation.Binary.PropositionalEquality.NP
open import Control.Strategy
open import Game.Challenge
open import Crypto.Schemes

import Game.IND-CCA2

module Attack.Reencryption
  (pke : Pubkey-encryption)
  (pkr : Pubkey-reencryption pke)
  (open Pubkey-encryption pke)

  (_==_    : (x y : Message) ‚Üí ùüö)
  (m‚ÇÄ m‚ÇÅ   : Message)
  (m‚ÇÅ==m‚ÇÅ  : m‚ÇÅ == m‚ÇÅ ‚â° 1‚ÇÇ)
  (¬¨m‚ÇÄ==m‚ÇÅ : m‚ÇÄ == m‚ÇÅ ‚â° 0‚ÇÇ)
  where

open Pubkey-reencryption pkr

m : ùüö ‚Üí Message
m = [0: m‚ÇÄ
     1: m‚ÇÅ ]

m-diff : ‚àÄ b ‚Üí m b == m‚ÇÅ ‚â° b
m-diff 1‚ÇÇ = m‚ÇÅ==m‚ÇÅ
m-diff 0‚ÇÇ = ¬¨m‚ÇÄ==m‚ÇÅ

open module IND-CCA2 = Game.IND-CCA2 pke R‚Çë

adversary : IND-CCA2.Adversary
adversary r‚Çê pk = done CPApart
  where CPApart : CPAAdversary _
        get-chal CPApart   = m
        put-resp CPApart c = ask (reenc pk c r‚Çê) (done ‚àò maybe (flip _==_ m‚ÇÅ) 0‚ÇÇ)

adversary-always-win : ‚àÄ b r ‚Üí IND-CCA2.EXP b adversary r ‚â° b
adversary-always-win b (r‚Çê , r‚Çñ , r‚Çë) = ap (maybe (flip _==_ m‚ÇÅ) 0‚ÇÇ) (correct-reencryption _ _ _ _) ‚àô m-diff b
