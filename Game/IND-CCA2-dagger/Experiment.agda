{-# OPTIONS --without-K #-}
open import Type
open import Function
open import Data.One
open import Data.Two
open import Data.Maybe
open import Data.Product
open import Relation.Binary.PropositionalEquality

open import Control.Strategy renaming (run to run-round)

open import Crypto.Schemes
open import Game.Challenge
import Game.IND-CPA-utils
import Game.IND-CCA2-dagger.Adversary
import Game.IND-CCA2-dagger.Valid

module Game.IND-CCA2-dagger.Experiment
  (pke : Pubkey-encryption)
  (R‚Çê : Type)
  where

open Pubkey-encryption pke

open Game.IND-CCA2-dagger.Adversary PubKey Message CipherText R‚Çê public

R : ‚òÖ
R = R‚Çê √ó R‚Çñ √ó R‚Çë √ó R‚Çë

Experiment : ‚òÖ
Experiment = Adversary ‚Üí R ‚Üí ùüö

module EXP (b : ùüö) (A : Adversary) (r‚Çê : R‚Çê) (pk : PubKey) (sk : SecKey) (r‚Çë : R‚Çë ¬≤) where
  A1       = A r‚Çê pk
  cpaA     = run-round (dec sk) A1
  m        = get-chal cpaA
  c        = enc pk ‚àò m ‚àò flip _xor_ b À¢ r‚Çë
  A2       = put-resp cpaA c
  b'       = run-round (dec sk) A2

  c‚ÇÄ = c 0‚ÇÇ
  c‚ÇÅ = c 1‚ÇÇ
  r‚Çë‚ÇÄ = r‚Çë 0‚ÇÇ
  r‚Çë‚ÇÅ = r‚Çë 1‚ÇÇ

  c‚ÇÄ-spec : c‚ÇÄ ‚â° enc pk (m b) r‚Çë‚ÇÄ
  c‚ÇÄ-spec = refl

  c‚ÇÅ-spec : c‚ÇÅ ‚â° enc pk (m (not b)) r‚Çë‚ÇÅ
  c‚ÇÅ-spec = refl

EXP : ùüö ‚Üí Experiment
EXP b A (r‚Çê , r‚Çñ , r‚Çë‚ÇÄ , r‚Çë‚ÇÅ) with key-gen r‚Çñ
... | pk , sk = EXP.b' b A r‚Çê pk sk [0: r‚Çë‚ÇÄ 1: r‚Çë‚ÇÅ ]
