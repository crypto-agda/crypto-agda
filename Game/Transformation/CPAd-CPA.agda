
{-# OPTIONS --without-K --copatterns #-}

open import Type
open import Data.Bit
open import Data.Maybe
open import Data.Product
open import Data.One
open import Control.Strategy renaming (run to runStrategy; map to mapStrategy)

open import Function

open import Relation.Binary.PropositionalEquality

import Game.IND-CPA-dagger
import Game.IND-CPA

module Game.Transformation.CPAd-CPA
  (PubKey    : ‚òÖ)
  (SecKey    : ‚òÖ)
  (Message   : ‚òÖ)
  (CipherText : ‚òÖ)

  -- randomness supply for, encryption, key-generation, adversary, adversary state
  (R‚Çë R‚Çñ R‚Çê : ‚òÖ)
  (KeyGen : R‚Çñ ‚Üí PubKey √ó SecKey)
  (Enc    : PubKey ‚Üí Message ‚Üí R‚Çë ‚Üí CipherText)
  (Dec    : SecKey ‚Üí CipherText ‚Üí Message)
  
  where

module CPA‚Ä† = Game.IND-CPA-dagger PubKey SecKey Message CipherText R‚Çë R‚Çñ R‚Çê ùüô KeyGen Enc
module CPA  = Game.IND-CPA        PubKey SecKey Message CipherText R‚Çë R‚Çñ R‚Çê ùüô KeyGen Enc

R-transform : CPA‚Ä†.R ‚Üí CPA.R
R-transform (r‚Çê , r‚Çñ , r‚Çë , _ , _) = r‚Çê , r‚Çñ , r‚Çë , _

module _ (A : CPA.Adversary) where
  open CPA‚Ä†.Adversary
  module A = CPA.Adversary A

  A‚Ä† : CPA‚Ä†.Adversary
  m  A‚Ä† = A.m
  b‚Ä≤ A‚Ä† r‚Çê pk c‚ÇÄ c‚ÇÅ = A.b‚Ä≤ r‚Çê pk c‚ÇÄ

  lemma : ‚àÄ b t r
          ‚Üí CPA.EXP  b   A  (R-transform r)
          ‚â° CPA‚Ä†.EXP b t A‚Ä† r
  lemma _ _ _ = refl

  -- If we are able to do the transformation, then we get the same advantage
  correct : ‚àÄ b r
            ‚Üí CPA.EXP  b A          (R-transform r)
            ‚â° CPA‚Ä†.EXP b (not b) A‚Ä† r
  correct _ _ = refl

-- -}
