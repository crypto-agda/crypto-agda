{-# OPTIONS --without-K #-}

open import Type
open import Data.Maybe
open import Data.Product
open import Data.One
open import Data.Bit
open import Control.Strategy

open import Relation.Binary.PropositionalEquality

import Game.IND-CPA
import Game.IND-CCA

module Game.Transformation.CCA-CPA
  (PubKey    : ‚òÖ)
  (SecKey    : ‚òÖ)
  (Message   : ‚òÖ)
  (CipherText : ‚òÖ)

  -- randomness supply for, encryption, key-generation, adversary, adversary state
  (R‚Çë R‚Çñ R‚Çê : ‚òÖ)
  (KeyGen : R‚Çñ ‚Üí PubKey √ó SecKey)
  (Enc    : PubKey ‚Üí Message ‚Üí R‚Çë ‚Üí CipherText)
  (Dec    : SecKey ‚Üí CipherText ‚Üí Message)
  
where

module CCA = Game.IND-CCA PubKey SecKey Message CipherText R‚Çë R‚Çñ R‚Çê    KeyGen Enc Dec 
module CPA = Game.IND-CPA PubKey SecKey Message CipherText R‚Çë R‚Çñ R‚Çê ùüô  KeyGen Enc

A-transform : CPA.Adversary ‚Üí CCA.Adv
A-transform (m , d) = m' where
  m' : _ ‚Üí _ ‚Üí _
  m' r‚Çê pk = done ((mb 0b , mb 1b) , d r‚Çê pk) -- (mb 0b) (mb 1b) r‚Çê
    where
      mb = m r‚Çê pk
      
correct : ‚àÄ {r‚Çë r‚Çñ r‚Çê} b adv ‚Üí CPA.EXP b adv               (r‚Çê , r‚Çñ , r‚Çë , 0‚ÇÅ)
                             ‚â° CCA.‚ÖÅ b (A-transform adv) (r‚Çê , r‚Çñ , r‚Çë)
correct 1b adv = refl
correct 0b adv = refl
