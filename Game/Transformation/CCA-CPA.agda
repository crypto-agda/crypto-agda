{-# OPTIONS --without-K --copatterns #-}

open import Type
open import Data.Product
open import Data.One
open import Data.Two
open import Control.Strategy
open import Game.Challenge
open import Relation.Binary.PropositionalEquality

open import Crypto.Schemes
import Game.IND-CPA-utils
import Game.IND-CPA
import Game.IND-CCA

module Game.Transformation.CCA-CPA
  (pke : Pubkey-encryption)
  (R‚Çê : Type)
  where

open Pubkey-encryption pke
open Game.IND-CPA-utils Message CipherText
module CCA = Game.IND-CCA pke R‚Çê
module CPA = Game.IND-CPA pke R‚Çê ùüô

A-transform : CPA.Adversary ‚Üí CCA.Adversary
A-transform A r‚Çê pk = done CPApart where
    module A = CPA.Adversary A
    mb = A.m r‚Çê pk
    CPApart : CPAAdversary _
    get-chal CPApart = mb
    put-resp CPApart = A.b‚Ä≤ r‚Çê pk

correct : ‚àÄ {r‚Çë r‚Çñ r‚Çê} b adv ‚Üí CPA.EXP b adv               (r‚Çê , r‚Çñ , r‚Çë , _)
                             ‚â° CCA.EXP b (A-transform adv) (r‚Çê , r‚Çñ , r‚Çë)
correct 0‚ÇÇ adv = refl
correct 1‚ÇÇ adv = refl
