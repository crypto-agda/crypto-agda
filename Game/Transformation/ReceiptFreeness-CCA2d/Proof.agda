{-# OPTIONS --copatterns #-}
open import Type
open import Function
open import Data.One
open import Data.Two
open import Data.Maybe
open import Data.Product
open import Data.Nat
open import Data.Vec hiding (_>>=_ ; _‚àà_)
open import Data.List as L
open import Data.Fin as Fin using (Fin)
open import Relation.Binary.PropositionalEquality.NP as ‚â°
open import Control.Strategy renaming (map to mapS)
open import Control.Strategy.Utils
open import Game.Challenge
import Game.ReceiptFreeness
import Game.IND-CCA2-dagger
import Game.IND-CPA-utils
import Game.Transformation.ReceiptFreeness-CCA2d.SimulatorInst

import Data.List.Any
open Data.List.Any using (here; there)
open Data.List.Any.Membership-‚â° using (_‚àà_ ; _‚àâ_)

module Game.Transformation.ReceiptFreeness-CCA2d.Proof
  (PubKey    : ‚òÖ)
  (SecKey    : ‚òÖ)
 -- Message = ùüö
  (CipherText : ‚òÖ)

  (SerialNumber : ‚òÖ)

  -- randomness supply for, encryption, key-generation, adversary, adversary state
  (R‚Çë R‚Çñ R‚Çê : ‚òÖ)
  (#q : ‚Ñï) (max#q : Fin #q)
  (KeyGen : R‚Çñ ‚Üí PubKey √ó SecKey)
  (Enc    : let Message = ùüö in
            PubKey ‚Üí Message ‚Üí R‚Çë ‚Üí CipherText)
  (Dec    : let Message = ùüö in
            SecKey ‚Üí CipherText ‚Üí Message)
  (Check    : let open Game.ReceiptFreeness PubKey SecKey CipherText SerialNumber R‚Çë R‚Çñ R‚Çê #q max#q KeyGen Enc Dec
               in BB ‚Üí Receipt ‚Üí ùüö)
  (CheckMem : ‚àÄ bb r ‚Üí ‚úì (Check bb r) ‚Üí proj‚ÇÅ (proj‚ÇÇ r) ‚àâ L.map (proj‚ÇÅ ‚àò proj‚ÇÇ) bb)
  -- (CheckEnc : ‚àÄ pk m r‚Çë ‚Üí Check (Enc pk m r‚Çë) ‚â° 1‚ÇÇ)
  where

_¬≤' : ‚òÖ ‚Üí ‚òÖ
X ¬≤' = X √ó X

module RFSim = Game.Transformation.ReceiptFreeness-CCA2d.SimulatorInst PubKey SecKey CipherText SerialNumber R‚Çë R‚Çñ R‚Çê #q max#q KeyGen Enc Dec Check hiding (module CCA2‚Ä†)

open RFSim using (Message ; R‚Çê‚Ä† ; CCAProto ; RFProto; module Simulator ; MITMState ; module Receipts)

open Game.IND-CPA-utils Message CipherText
module RF = Game.ReceiptFreeness PubKey SecKey CipherText SerialNumber R‚Çë R‚Çñ R‚Çê  #q max#q KeyGen Enc Dec
module RFC = RF.Experiment Check
open RFC
open RF renaming (Phase to RFPhase; Q to RFQ; Resp to RFResp)
open StatefulRun

module CCA2‚Ä† = Game.IND-CCA2-dagger PubKey SecKey Message CipherText R‚Çë R‚Çñ R‚Çê‚Ä† KeyGen Enc Dec

DecRoundChallenger : (Next : ‚òÖ) ‚Üí ‚òÖ
DecRoundChallenger = Server CCAProto

module SimulatorProof
  (RFA : RF.Adversary) (pk : PubKey) (sk : SecKey)
  (DecEnc : ‚àÄ r‚Çë m ‚Üí Dec sk (Enc pk m r‚Çë) ‚â° m)
  (r‚Çê : R‚Çê) (rgb : Rgb ¬≤)
  (rgbs : PhaseNumber ‚Üí Vec Rgb #q) (sn : SerialNumber ¬≤)
  (extùüö : ‚àÄ {A : ‚òÖ} {f g : ùüö ‚Üí A} ‚Üí f ‚âó g ‚Üí f ‚â° g) where

 module PB (b : ùüö) where

  module Sim = Simulator RFA
  module Tr = Sim.SecondLayer rgbs pk
  open Tr using (ballot; hack-challenge; MITM-phase)
  open Sim.AdversaryParts rgbs pk r‚Çê using (A‚Ä†1; A‚Ä†2; A‚Ä†3)
  A‚Ä† = Sim.A‚Ä†

  r‚Çë = proj‚ÇÇ ‚àò proj‚ÇÇ ‚àò rgb

  module RFEXP = RFC.EXP b RFA pk sk r‚Çê rgbs r‚Çë
  module EXP‚Ä†  = CCA2‚Ä†.EXP b A‚Ä† (r‚Çê , rgbs) pk sk r‚Çë

  open RFC.OracleS sk pk rgbs

  module _ {X} (p# : PhaseNumber) where
    RX : X √ó S ‚Üí MITMState X ‚Üí ‚òÖ
    RX (x , bb , _) (x' , bb' , ta) = bb ‚â° bb' √ó x ‚â° x' √ó ta ‚â° tally sk bb'

    Bisim' : (n : Fin #q) (bb : BB) ‚Üí Client RFProto X ‚Üí Client CCAProto (MITMState X) ‚Üí ‚òÖ
    Bisim' n bb clt0 clt1 = RX (runS (OracleS p#) clt0 (bb , n)) (run (Dec sk) clt1)

    pf-phase : (n : Fin #q) (bb : BB) (clt : Client _ _)
                   ‚Üí Bisim' n bb clt (mitm-to-client-trans (Tr.MITM-phase p# n bb (tally sk bb)) clt)
    pf-phase n bb (ask REB cont) = pf-phase (Fin.pred n) bb (cont (Tr.ballot p# n))
    pf-phase n bb (ask RBB cont) = pf-phase (Fin.pred n) bb (cont bb)
    pf-phase n bb (ask RTally cont) = pf-phase (Fin.pred n) bb (cont (tally sk bb))
    pf-phase n bb (ask (RCO (m? , sn , enc-co)) cont) = pf-phase (Fin.pred n) bb (cont (Dec sk enc-co))
    pf-phase n bb (ask (Vote r) cont) with Check bb r -- (enc-co r)
    ... | 0‚ÇÇ = pf-phase (Fin.pred n) bb (cont reject)
    ... | 1‚ÇÇ = pf-phase (Fin.pred n) (r ‚à∑ bb) (cont accept)
    pf-phase n bb (done x) = refl , refl , refl

  pf-phase1 : Bisim' 0‚ÇÇ max#q [] RFEXP.Aphase1 A‚Ä†1
  pf-phase1 = pf-phase 0‚ÇÇ max#q [] RFEXP.Aphase1

  MITM1 : MITMState _
  MITM1 = run (Dec sk) A‚Ä†1
  MITM-S1 : _
  MITM-S1 = proj‚ÇÇ MITM1
  MITM-BB1 : BB
  MITM-BB1 = proj‚ÇÅ MITM-S1
  MITM-tally1 : Tally
  MITM-tally1 = proj‚ÇÇ MITM-S1

  tally1 = tally sk RFEXP.BBphase1

  BBphase1-pf : RFEXP.BBphase1 ‚â° MITM-BB1
  BBphase1-pf = proj‚ÇÅ pf-phase1

  -- unused
  CPA‚Ä†Challenge : CPA‚Ä†Adversary (RFPhase Candidate √ó Receipt ¬≤)
  CPA‚Ä†Challenge = Tr.hack-challenge RFEXP.AdversaryRFChallenge

  tally-pf : tally sk RFEXP.BBrfc ‚â° (1 , 1) +,+ tally1
  tally-pf rewrite
             DecEnc (proj‚ÇÇ (proj‚ÇÇ (rgb 0‚ÇÇ))) b
           | DecEnc (proj‚ÇÇ (proj‚ÇÇ (rgb 1‚ÇÇ))) (not b)
           with b
  ... | 0‚ÇÇ = refl
  ... | 1‚ÇÇ = refl

  tally1-pf : tally1 ‚â° MITM-tally1
  tally1-pf rewrite BBphase1-pf = !(proj‚ÇÇ (proj‚ÇÇ pf-phase1))

  tally1-pf' : tally sk RFEXP.BBrfc ‚â° (1 , 1) +,+ MITM-tally1
  tally1-pf' = tally-pf ‚àô ap (_+,+_ (1 , 1)) tally1-pf

  A‚Ä†4 : BB ‚Üí _
  A‚Ä†4 bb = Tr.decRoundAdv2 bb ((1 , 1) +,+ MITM-tally1)

  pf-phase2 : Bisim' 1‚ÇÇ max#q RFEXP.BBrfc RFEXP.Aphase2 (A‚Ä†4 RFEXP.BBrfc RFEXP.Aphase2)
  pf-phase2 rewrite ! tally1-pf' = pf-phase 1‚ÇÇ max#q RFEXP.BBrfc RFEXP.Aphase2
  -- TODO it might be convenient to rewrite the BB equalities here as well

  pf-A‚Ä† : run (Dec sk) (A‚Ä† (r‚Çê , rgbs) pk) ‚â° A‚Ä†2 (run (Dec sk) A‚Ä†1)
  pf-A‚Ä† = run-map (Dec sk) A‚Ä†2 A‚Ä†1

  open ‚â°-Reasoning
  open Receipts 0‚ÇÇ

  put-c = put-resp (Tr.hack-challenge (proj‚ÇÅ (run (Dec sk) A‚Ä†1))) EXP‚Ä†.c
  MITM-phase2 = proj‚ÇÅ put-c
  MITM-receipts = proj‚ÇÇ put-c
  MITM-BB-RFC = MITM-receipts ‚à∑¬≤ MITM-BB1

  sn' = get-chal (proj‚ÇÅ (runS (OracleS 0‚ÇÇ) RFEXP.Aphase1 ([] , max#q)))

  ct-pf : ‚àÄ i ‚Üí EXP‚Ä†.c i ‚â° (Enc pk ‚àò flip _xor_ b À¢ r‚Çë) i
  ct-pf i = ap (Œª x ‚Üí Enc pk (get-chal x (i xor b)) (proj‚ÇÇ (proj‚ÇÇ (rgb i)))) pf-A‚Ä†

  receipts-pf : RFEXP.receipts ‚âó receipts sn' EXP‚Ä†.c
  receipts-pf i = ap (Œª x ‚Üí marked 0‚ÇÇ , sn' i , x) (!(ct-pf i))

  BBrfc-pf = RFEXP.BBrfc
           ‚â°‚ü® cong‚ÇÇ _‚à∑_ (receipts-pf 0‚ÇÇ) (cong‚ÇÇ _‚à∑_ (receipts-pf 1‚ÇÇ) (proj‚ÇÅ pf-phase1)) ‚ü©
             receipts sn' EXP‚Ä†.c ‚à∑¬≤ MITM-BB1
           ‚â°‚ü® ap (Œª x ‚Üí receipts (get-chal x) EXP‚Ä†.c ‚à∑¬≤ MITM-BB1) (proj‚ÇÅ (proj‚ÇÇ pf-phase1)) ‚ü©
             MITM-BB-RFC
           ‚àé

  Aphase2-pf : RFEXP.Aphase2 ‚â° MITM-phase2
  Aphase2-pf = cong‚ÇÇ (Œª rfc ct ‚Üí put-resp rfc (receipts (get-chal rfc) ct)) (proj‚ÇÅ (proj‚ÇÇ pf-phase1)) (extùüö (!_ ‚àò ct-pf))

  pf-b‚Ä≤ : RFEXP.b‚Ä≤ ‚â° EXP‚Ä†.b‚Ä≤
  pf-b‚Ä≤ = RFEXP.b‚Ä≤
        ‚â°‚ü® refl ‚ü©
          proj‚ÇÅ (runS (OracleS 1‚ÇÇ) RFEXP.Aphase2 (RFEXP.BBrfc , max#q))
        ‚â°‚ü® proj‚ÇÅ (proj‚ÇÇ pf-phase2) ‚ü©
          proj‚ÇÅ (run (Dec sk) (A‚Ä†4 RFEXP.BBrfc RFEXP.Aphase2))
        ‚â°‚ü® ap (Œª bb ‚Üí proj‚ÇÅ (run (Dec sk) (A‚Ä†4 bb RFEXP.Aphase2))) BBrfc-pf ‚ü©
          proj‚ÇÅ (run (Dec sk) (A‚Ä†4 MITM-BB-RFC RFEXP.Aphase2))
        ‚â°‚ü® ap (Œª x ‚Üí proj‚ÇÅ (run (Dec sk) (A‚Ä†4 MITM-BB-RFC x))) Aphase2-pf ‚ü©
          proj‚ÇÅ (run (Dec sk) (A‚Ä†4 MITM-BB-RFC MITM-phase2))
        ‚â°‚ü® ! (run-map (Dec sk) proj‚ÇÅ (A‚Ä†4 MITM-BB-RFC MITM-phase2)) ‚ü©
          run (Dec sk) (mapS proj‚ÇÅ (A‚Ä†4 MITM-BB-RFC MITM-phase2))
        ‚â°‚ü® refl ‚ü©
          run (Dec sk) (put-resp (A‚Ä†2 (run (Dec sk) A‚Ä†1)) EXP‚Ä†.c)
        ‚â°‚ü® ap (Œª x ‚Üí run (Dec sk) (put-resp x EXP‚Ä†.c)) (! pf-A‚Ä†) ‚ü©
          run (Dec sk) (put-resp (run (Dec sk) (A‚Ä† (r‚Çê , rgbs) pk)) EXP‚Ä†.c)
        ‚â°‚ü® refl ‚ü©
          EXP‚Ä†.b‚Ä≤
        ‚àé

-- -}
-- -}
-- -}
-- -}
-- -}
-- -}
-- -}
-- -}
-- -}
