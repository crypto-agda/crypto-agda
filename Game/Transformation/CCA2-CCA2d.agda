
{-# OPTIONS --without-K #-}

open import Type
open import Data.Bit
open import Data.Maybe
open import Data.Nat.NP hiding (_==_)
open import Data.Nat.Properties
open import Data.Product
open import Control.Strategy renaming (run to runStrategy; map to mapStrategy)

open import Function

open import Relation.Binary.PropositionalEquality

open import Explore.Core
open import Explore.Properties
open import Explore.Explorable renaming (module Explorable‚ÇÄ to Exp
                                        ; module FromExplore‚ÇÄ to FE)
open import Explore.Product
open Operators

import Game.IND-CCA2-dagger
import Game.IND-CCA2
import Game.IND-CCA

module Game.Transformation.CCA2-CCA2d
  (PubKey    : ‚òÖ)
  (SecKey    : ‚òÖ)
  (Message   : ‚òÖ)
  (CipherText : ‚òÖ)

  -- randomness supply for, encryption, key-generation, adversary, adversary state
  (R‚Çë R‚Çñ R‚Çê : ‚òÖ)
  (KeyGen : R‚Çñ ‚Üí PubKey √ó SecKey)
  (Enc    : PubKey ‚Üí Message ‚Üí R‚Çë ‚Üí CipherText)
  (Dec    : SecKey ‚Üí CipherText ‚Üí Message)
  
where

module CCA2d = Game.IND-CCA2-dagger PubKey SecKey Message CipherText
    R‚Çë R‚Çñ R‚Çê KeyGen Enc Dec 
module CCA2 X = Game.IND-CCA2  PubKey SecKey Message CipherText
    R‚Çë R‚Çñ (X √ó R‚Çê) KeyGen Enc Dec

X = Bit √ó R‚Çë

f : PubKey ‚Üí X
  ‚Üí (Message √ó Message) √ó (CipherText ‚Üí CipherText ‚Üí CCA2d.DecRound Bit)
  ‚Üí (Message √ó Message) √ó (CipherText ‚Üí CCA2d.DecRound Bit)
f pk (t  , r‚Çë) m = (proj‚ÇÅ m , Œª c ‚Üí proj‚ÇÇ m c (Enc pk (proj (proj‚ÇÅ m) t) r‚Çë))

A-transform : (adv : CCA2d.Adv) ‚Üí CCA2.Adv X
A-transform adv (x , r‚Çê) pk = mapStrategy (f pk x) (adv r‚Çê pk)


{-

This is not enough for the proof, we are missing:

  * explain why we equate the randomness of the adversary with not b
  * explain why we share the randomness r‚Çë' with the adversary

Informal proof:

  * the randomness t is either t ‚â° b in which case we don't care and get
    advantage ‚â° Œµ'
    or it is t ‚â° not b, and we have advantage ‚â° Œµ as shown below.
    Total advantage ‚â° (Œµ' + Œµ) / 2

  * In the "real" proof we will have two different r‚Çë', one for the adversary
    and one for the game. The interesting thing is that

    Œ£ (A √ó A) (Œª (x , _) ‚Üí f x) ‚âà Œ£ (A √ó A) (Œª (_ , x) ‚Üí f x)

    or more general we can swap a used randomness with an unused one.
    In this case, LHS doesn't use the randomness of the adversary, so we can
    swap the randomness for the second encryption with the adversaries one.
  
-}

correct : ‚àÄ {r‚Çë r‚Çë' r‚Çñ r‚Çê} b adv
        ‚Üí CCA2d.‚ÖÅ  b adv               (r‚Çê , r‚Çñ , r‚Çë , r‚Çë')
        ‚â° CCA2.EXP X b (A-transform adv) (((not b , r‚Çë') , r‚Çê) , r‚Çñ , r‚Çë)
correct {r‚Çë}{r‚Çë' = ra}{r‚Çñ = r}{r‚Çê} 1b adv with KeyGen r
... | pk , sk = cong (Œª x ‚Üí runStrategy (Dec sk) (proj‚ÇÇ x (Enc pk (proj‚ÇÇ (proj‚ÇÅ x)) r‚Çë)))
                     (sym (run-map (Dec sk) (f pk (0b , ra)) (adv r‚Çê pk)))
correct {r‚Çë}{r‚Çë' = ra}{r‚Çñ = r}{r‚Çê} 0b adv with KeyGen r
... | pk , sk = cong (Œª x ‚Üí runStrategy (Dec sk) (proj‚ÇÇ x (Enc pk (proj‚ÇÅ (proj‚ÇÅ x)) r‚Çë)))
                     (sym (run-map (Dec sk) (f pk (1b , ra)) (adv r‚Çê pk)))


module Theorem
  (Œº‚Çë : Explore‚ÇÄ R‚Çë)
  (Œº‚Çñ : Explore‚ÇÄ R‚Çñ)
  (Œº‚Çê : Explore‚ÇÄ R‚Çê)
  (Œº‚Çë‚Å± : ExploreInd‚ÇÄ Œº‚Çë)
  (Œº‚Çñ‚Å± : ExploreInd‚ÇÄ Œº‚Çñ)
  (Œº‚Çê‚Å± : ExploreInd‚ÇÄ Œº‚Çê)
  where

  open import Explore.Two
  --open import Rat
  
  Œº‚Çì : Explore‚ÇÄ X
  Œº‚Çì = ùüö·µâ √ó·µâ Œº‚Çë
  
  module CCA2dA = CCA2d.Advantage Œº‚Çë Œº‚Çñ Œº‚Çê
  module CCA2A  =  CCA2.Advantage X Œº‚Çë Œº‚Çñ (Œº‚Çì √ó·µâ Œº‚Çê)

  R' : Set
  R' = R‚Çë √ó R‚Çë √ó R‚Çë √ó R‚Çñ √ó R‚Çê

  R2 : Set
  R2 = Bit √ó R'
  
  ŒºR' : Explore‚ÇÄ R'
  ŒºR' = Œº‚Çë √ó·µâ Œº‚Çë √ó·µâ Œº‚Çë √ó·µâ Œº‚Çñ √ó·µâ Œº‚Çê

  ŒºR'‚Å± : ExploreInd‚ÇÄ ŒºR'
  ŒºR'‚Å± = Œº‚Çë‚Å± √ó‚Å± Œº‚Çë‚Å± √ó‚Å± Œº‚Çë‚Å± √ó‚Å± Œº‚Çñ‚Å± √ó‚Å± Œº‚Çê‚Å±
  
  ŒºR2 : Explore‚ÇÄ R2
  ŒºR2 = ùüö·µâ √ó·µâ ŒºR'

  module ŒºR' = Exp ŒºR'‚Å±
  module ŒºR2 = FE ŒºR2
  
  # : ‚àÄ {Y : Set} ‚Üí Bit ‚Üí (Bit ‚Üí Y ‚Üí R2 ‚Üí Bit) ‚Üí Y ‚Üí ‚Ñï
  # b F adv = ŒºR2.count (F b adv)

  lift-CCA2 : Bit ‚Üí CCA2.Adv X ‚Üí R2 ‚Üí Bit
  lift-CCA2 b adv (rt , re , _ , rea , rk , ra) = 
     CCA2.EXP X b adv (((rt , rea) , ra) , (rk , re)) == b
  lift-CCA2d : Bit ‚Üí CCA2d.Adv ‚Üí R2 ‚Üí Bit
  lift-CCA2d b adv (_ , re , re' , _ , rk , ra) = CCA2d.‚ÖÅ b adv (ra , rk , re , re') == b
  
  dbl-thm : ‚àÄ {n} ‚Üí n + n ‚â° 2 * n
  dbl-thm {n} rewrite ‚Ñï¬∞.+-comm n 0 = refl
  
  lemma : ‚àÄ b A+ ‚Üí # b lift-CCA2d A+ ‚â§ 2 * # b lift-CCA2 (A-transform A+)
  lemma b A+ = ŒºR2.sum (Œª { (_ , re , re' , _ , rk , ra)
                          ‚Üí ‚ü¶ CCA2d.‚ÖÅ b A+ ((ra , rk , re , re')) ‚üß  })
             ‚â°‚ü® dbl-thm {ŒºR'.sum _} ‚ü© 2 *
               (ŒºR'.sum (Œª { (re , re' , _ , rk , ra)
                          ‚Üí ‚ü¶ CCA2d.‚ÖÅ b A+ ((ra , rk , re , re')) ‚üß  }))
             ‚â§‚ü® s‚â§s (s‚â§s (z‚â§n {0})) *-mono lem ‚ü© 2 *
                ŒºR2.sum (Œª { (t , re , _ , rea , rk , ra)
                           ‚Üí ‚ü¶ CCA2.EXP X b (A-transform A+) (((t , rea) , ra) , rk , re) ‚üß})
                ‚àé
    where
      open ‚â§-Reasoning
      ‚ü¶_‚üß : Bit ‚Üí ‚Ñï
      ‚ü¶ x ‚üß = Bit‚ñπ‚Ñï (x == b)

      lem1 : ‚àÄ (f : R‚Çë ‚Üí ‚Ñï) ‚Üí FE.sum Œº‚Çë (Œª x ‚Üí FE.sum Œº‚Çë (Œª y ‚Üí f x))
                 ‚â° FE.sum Œº‚Çë (Œª x ‚Üí FE.sum Œº‚Çë (Œª y ‚Üí f y))
      lem1 f = Exp.sum-swap' Œº‚Çë‚Å± {_} {FE.sum Œº‚Çë} (Exp.sum-zero Œº‚Çë‚Å±) (Exp.sum-hom Œº‚Çë‚Å±) (Œª x y ‚Üí f x)
      
      lem4 : ‚àÄ b (f : Bit ‚Üí R' ‚Üí ‚Ñï) ‚Üí ŒºR'.sum (f b) + ŒºR'.sum (f (not b)) ‚â° ŒºR2.sum (Œª { (t , r) ‚Üí f t r})
      lem4 1b f = ‚Ñï¬∞.+-comm (ŒºR'.sum (f 1b)) (ŒºR'.sum (f 0b))
      lem4 0b f = refl

      lem : ŒºR'.sum (Œª { (re , re' , _ , rk , ra)
                       ‚Üí ‚ü¶ CCA2d.‚ÖÅ b A+ ((ra , rk , re , re')) ‚üß  })
          ‚â§ ŒºR2.sum (Œª { (t , re , _ , rea , rk , ra)
                       ‚Üí ‚ü¶ CCA2.EXP X b (A-transform A+) (((t , rea) , ra) , rk , re) ‚üß})
      lem = (ŒºR'.sum (Œª { (re , re' , _ , rk , ra)
                          ‚Üí ‚ü¶ CCA2d.‚ÖÅ b A+ ((ra , rk , re , re')) ‚üß  }))
             ‚â°‚ü® Exp.sum-ext Œº‚Çë‚Å± (Œª re ‚Üí  lem1 (Œª re' ‚Üí _)) ‚ü© 
               (ŒºR'.sum (Œª { (re , _ , re' , rk , ra)
                          ‚Üí ‚ü¶ CCA2d.‚ÖÅ b A+ ((ra , rk , re , re')) ‚üß  }))
             ‚â°‚ü® ŒºR'.sum-ext (Œª _ ‚Üí cong ‚ü¶_‚üß (correct b A+) )‚ü©
                ŒºR'.sum (Œª { (re , _ , rea , rk , ra)
                           ‚Üí ‚ü¶ CCA2.EXP X b (A-transform A+) (((not b , rea) , ra) , rk , re) ‚üß})
             ‚â§‚ü® n‚â§m+n (ŒºR'.sum (Œª { (re , _ , rea , rk , ra)
                     ‚Üí ‚ü¶ CCA2.EXP X b (A-transform A+) (((b , rea) , ra) , rk , re) ‚üß})) _ ‚ü© (
                ŒºR'.sum (Œª { (re , _ , rea , rk , ra)
                           ‚Üí ‚ü¶ CCA2.EXP X b (A-transform A+) (((b , rea) , ra) , rk , re) ‚üß})
             +  ŒºR'.sum (Œª { (re , _ , rea , rk , ra)
                           ‚Üí ‚ü¶ CCA2.EXP X b (A-transform A+) (((not b , rea) , ra) , rk , re) ‚üß}))
             ‚â°‚ü® lem4 b (Œª { t (re , _ , rea , rk , ra) ‚Üí ‚ü¶ CCA2.EXP X b (A-transform A+) (((t , rea) , ra) , rk , re) ‚üß }) ‚ü©
                ŒºR2.sum (Œª { (t , re , _ , rea , rk , ra)
                           ‚Üí ‚ü¶ CCA2.EXP X b (A-transform A+) (((t , rea) , ra) , rk , re) ‚üß})
                ‚àé

{-

Need to show that they are valid aswell:
This is easy, the adversary we are constructing have only a subset
of the restrictions that the original adversary have

-}



-- -}
-- -}
-- -}
-- -}
-- -}
