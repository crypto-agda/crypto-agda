{-# OPTIONS --copatterns #-}


  {- Not all adversaries of the Adversary type are valid.
  
     First, we do not forbid the challenge in the 2nd step of the Oracle.
     Second, there is no check preventing ballots to be resubmitted.
     Last but not least, no complexity analysis is done.
  -}

open import Function
open import Type
open import Data.Fin.NP using (Fin)
open import Data.List as L
open import Data.Nat.NP using (‚Ñï) renaming (_==_ to _==‚Ñï_)
open import Data.Product
open import Data.Two
open import Game.Challenge
open import Control.Strategy
import Data.List.Any as LA

open import Relation.Nullary
open import Relation.Binary.PropositionalEquality.NP

open module MM {X : ‚òÖ} = LA.Membership (setoid X)

module Game.ReceiptFreeness.CheatingAdversaries
  (PubKey    : ‚òÖ)
  (SecKey    : ‚òÖ)
  -- Message = ùüö
  (CipherText : ‚òÖ)

  (SerialNumber : ‚òÖ)

  -- randomness supply for, encryption, key-generation, adversary, adversary state
  (R‚Çë R‚Çñ R‚Çê : ‚òÖ)
  (#q : ‚Ñï) (max#q : Fin #q)
  (KeyGen : R‚Çñ ‚Üí PubKey √ó SecKey)
  (Enc    : let Message = ùüö in
            PubKey ‚Üí Message ‚Üí R‚Çë ‚Üí CipherText)
  (Dec    : let Message = ùüö in
            SecKey ‚Üí CipherText ‚Üí Message)
  where


open import Game.ReceiptFreeness.Definitions PubKey SecKey CipherText SerialNumber R‚Çë R‚Çñ R‚Çê #q max#q KeyGen Enc Dec

module _ 
  (Check : BB ‚Üí Receipt ‚Üí ùüö)
  (CheckMem : ‚àÄ bb r ‚Üí ‚úì (Check bb r) ‚Üí proj‚ÇÅ (proj‚ÇÇ r) ‚àâ L.map (proj‚ÇÅ ‚àò proj‚ÇÇ) bb)
  where

  open import Game.ReceiptFreeness.Experiment PubKey SecKey CipherText SerialNumber R‚Çë R‚Çñ R‚Çê #q max#q KeyGen Enc Dec Check CheckMem
  open import Game.ReceiptFreeness.Valid PubKey SecKey CipherText SerialNumber R‚Çë R‚Çñ R‚Çê #q max#q KeyGen Enc Dec
  
  module Cheating1 (sn : SerialNumber ¬≤) where
      open SimpleScheme 
      cheatingA : Adversary
      cheatingA r‚Çê pk = done chal where
        chal : ChalAdversary _ _ _
        get-chal chal = sn
        put-resp chal m = ask (RCO (m 1‚ÇÇ)) (Œª co ‚Üí done (co == (marked-on-second-cell? (markedReceipt? (m 1‚ÇÇ)))))
      module _
       (DecEnc : ‚àÄ r‚Çñ r‚Çë m ‚Üí let (pk , sk) = KeyGen r‚Çñ in
                             Dec sk (Enc pk m r‚Çë) ‚â° m) where
  
          cheatingA-wins : ‚àÄ r ‚Üí game cheatingA r ‚â° 1‚ÇÇ
          cheatingA-wins (r‚Çñ , _ , b‚ÇÇ , r‚Çë , _)
            rewrite DecEnc r‚Çñ (r‚Çë 1‚ÇÇ) (not b‚ÇÇ) with b‚ÇÇ
          ... | 0‚ÇÇ = refl
          ... | 1‚ÇÇ = refl
  
      module _ {r‚Çê pk sn ci} where
        notValid : ¬¨ (Valid-Adversary cheatingA)
        notValid va = proj‚ÇÇ (proj‚ÇÅ (proj‚ÇÇ (proj‚ÇÇ (va r‚Çê pk)) (Œª _ ‚Üí not-marked , sn , ci))) refl
      
          
  module Cheating2 (sn : SerialNumber ¬≤) where
      open SimpleScheme
      cheatingA : Adversary
      cheatingA r‚Çê pk = done chal where
        chal : ChalAdversary _ (Receipt ¬≤) (Strategy Q Resp ùüö)
        get-chal chal = sn
        put-resp chal m = ask (Vote (m 1‚ÇÇ))
          (Œª { accept ‚Üí ask RTally (Œª { (x , y) ‚Üí done (x ==‚Ñï 2) })
             ; reject ‚Üí done 1‚ÇÇ })
  
      module _
       (r‚Çñ : _)(r‚Çê : _)(b : _)(r‚Çë : _)(rgbs : _)
       (DecEnc : ‚àÄ b m ‚Üí let (pk , sk) = KeyGen r‚Çñ in
                       Dec sk (Enc pk m (r‚Çë b)) ‚â° m) where
  
          r : R
          r = r‚Çñ , r‚Çê , b , r‚Çë , rgbs
  
          pk = proj‚ÇÅ (KeyGen r‚Çñ)
          sk = proj‚ÇÇ (KeyGen r‚Çñ)
          
          module E = EXP cheatingA pk sk r‚Çê rgbs (ct-resp b pk r‚Çë) (const (marked 0‚ÇÇ))
          ballot = marked 0‚ÇÇ ,‚Ä≤ sn 1‚ÇÇ , Enc pk (not b) (r‚Çë 1‚ÇÇ)
          
          cheatingA-wins : game cheatingA r ‚â° b
          cheatingA-wins with Check E.BBrfc ballot
                            | CheckMem E.BBrfc ballot
          cheatingA-wins | 1‚ÇÇ | pr with pr _ (LA.there (LA.here refl))
          ... | ()
          cheatingA-wins | 0‚ÇÇ | _ with b
          ... | 0‚ÇÇ = refl
          ... | 1‚ÇÇ = refl
      module _  where
        valid : Valid-Adversary cheatingA
        valid r‚Çê pk = (Œª ()) , (Œª ()) , (Œª { r‚ÇÅ accept r ‚Üí _ ; r‚ÇÅ reject ‚Üí _ })

          {-
             rewrite CheckEnc (proj‚ÇÅ (KeyGen r‚Çñ)) (co 1‚ÇÇ) (r‚Çë 1‚ÇÇ)
                   | DecEnc r‚Çñ (r‚Çë 0‚ÇÇ) (co 0‚ÇÇ)
                   | DecEnc r‚Çñ (r‚Çë 1‚ÇÇ) (co 1‚ÇÇ) with co 0‚ÇÇ | co 1‚ÇÇ
          ... | 0‚ÇÇ | 0‚ÇÇ = refl
          ... | 0‚ÇÇ | 1‚ÇÇ = refl
          ... | 1‚ÇÇ | 0‚ÇÇ = refl
          ... | 1‚ÇÇ | 1‚ÇÇ = refl
          cheatingA-wins (r‚Çñ , _ , 1‚ÇÇ , co , r‚Çë , _)
             rewrite CheckEnc (proj‚ÇÅ (KeyGen r‚Çñ)) (co 0‚ÇÇ) (r‚Çë 0‚ÇÇ)
                   | DecEnc r‚Çñ (r‚Çë 0‚ÇÇ) (co 0‚ÇÇ)
                   | DecEnc r‚Çñ (r‚Çë 1‚ÇÇ) (co 1‚ÇÇ) with co 0‚ÇÇ | co 1‚ÇÇ
          ... | 0‚ÇÇ | 0‚ÇÇ = refl
          ... | 0‚ÇÇ | 1‚ÇÇ = refl
          ... | 1‚ÇÇ | 0‚ÇÇ = refl
          ... | 1‚ÇÇ | 1‚ÇÇ = refl
          -}
-- -}
-- -}
-- -}
-- -}
-- -}
-- -}
