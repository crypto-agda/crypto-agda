
open import Type
open import Function
open import Data.Zero
open import Data.One
open import Data.Two
open import Data.Maybe
open import Data.Product

open import Data.Nat.NP
--open import Rat

open import Explore.Core
open import Explore.Explorable
open import Explore.Product
open import Explore.Universe.Type {ùüò}
open import Explore.Universe.Base
open Operators
open import Control.Strategy renaming (run to runStrategy)
open import Game.Challenge
import Game.IND-CPA-utils

import Game.IND-CCA2-dagger.Adversary
import Game.IND-CCA2-dagger.Valid
import Game.IND-CCA2-dagger.Experiment

open import Relation.Binary.PropositionalEquality

module Game.IND-CCA2-dagger
  (PubKey    : ‚òÖ)
  (SecKey    : ‚òÖ)
  (Message   : ‚òÖ)
  (CipherText : ‚òÖ)

  -- randomness supply for, encryption, key-generation, adversary, adversary state
  (R‚Çë·µÅ R‚Çñ·µÅ R‚Çê·µÅ : U)
  (let R‚Çë = El R‚Çë·µÅ ; R‚Çñ = El R‚Çñ·µÅ ; R‚Çê = El R‚Çê·µÅ)
  (KeyGen : R‚Çñ ‚Üí PubKey √ó SecKey)
  (Enc    : PubKey ‚Üí Message ‚Üí R‚Çë ‚Üí CipherText)
  (Dec    : SecKey ‚Üí CipherText ‚Üí Message)

  where

open Game.IND-CCA2-dagger.Adversary PubKey Message CipherText R‚Çê public

open Game.IND-CCA2-dagger.Valid PubKey Message CipherText R‚Çê public
open Game.IND-CCA2-dagger.Experiment PubKey SecKey Message CipherText R‚Çë R‚Çñ R‚Çê KeyGen Enc Dec public

R·µÅ = R‚Çê·µÅ √ó·µÅ R‚Çñ·µÅ √ó·µÅ R‚Çë·µÅ √ó·µÅ R‚Çë·µÅ

run : ùüö ‚Üí Adversary ‚Üí ‚Ñï
run b adv = count R·µÅ (EXP b adv)

{-
module Advantage
  (Œº‚Çë : Explore‚ÇÄ R‚Çë)
  (Œº‚Çñ : Explore‚ÇÄ R‚Çñ)
  (Œº‚Çê : Explore‚ÇÄ R‚Çê)
  where
  -- ŒºR : Explore‚ÇÄ R
  ŒºR = Œº‚Çê √ó·µâ Œº‚Çñ √ó·µâ Œº‚Çë √ó·µâ Œº‚Çë

  module ŒºR = FromExplore ŒºR

  run : ùüö ‚Üí Adversary ‚Üí ‚Ñï
  run b adv = ŒºR.count (EXP b adv)

  {-
  Advantage : Adv ‚Üí ‚Ñö
  Advantage adv = dist (run 0b adv) (run 1b adv) / ŒºR.Card
  -}

-- -}
-- -}
-- -}
-- -}
-- -}
-- -}
