{-# OPTIONS --without-K #-}
open import Type
open import Function
open import Data.Zero
open import Data.Two
open import Data.Product
open import Data.Maybe
open import Data.Nat.NP
open import Relation.Binary.PropositionalEquality

open import Explore.Universe.Type {ùüò}
open import Explore.Universe.Base

open import Crypto.Schemes
open import Game.Challenge
import Game.IND-CPA-utils
import Game.IND-CCA2-dagger.Adversary
import Game.IND-CCA2-dagger.Valid
import Game.IND-CCA2-dagger.Experiment

module Game.IND-CCA2-dagger
  (PubKey    : Type)
  (SecKey    : Type)
  (Message   : Type)
  (CipherText : Type)

  -- randomness supply for, encryption, key-generation, adversary, adversary state
  (R‚Çë·µÅ R‚Çñ·µÅ R‚Çê·µÅ : U)
  (let R‚Çë = El R‚Çë·µÅ ; R‚Çñ = El R‚Çñ·µÅ ; R‚Çê = El R‚Çê·µÅ)
  (key-gen : R‚Çñ ‚Üí PubKey √ó SecKey)
  (enc    : PubKey ‚Üí Message ‚Üí R‚Çë ‚Üí CipherText)
  (dec    : SecKey ‚Üí CipherText ‚Üí Maybe Message)

  (functionally-correct :
    ‚àÄ r‚Çñ r‚Çë m ‚Üí let (pk , sk) = key-gen r‚Çñ in
               dec sk (enc pk m r‚Çë) ‚â° just m)
  where

pke : Pubkey-encryption
pke = record
        { pkt = record
          { PubKey = PubKey
          ; SecKey = SecKey
          ; Message = Message
          ; CipherText = CipherText
          ; R‚Çñ = R‚Çñ
          ; R‚Çë = R‚Çë }
        ; pko = record
          { key-gen = key-gen
          ; enc = enc
          ; dec = dec
          }
        ; functionally-correct = functionally-correct
        }

open Game.IND-CCA2-dagger.Valid PubKey Message CipherText R‚Çê public
open Game.IND-CCA2-dagger.Experiment pke R‚Çê public

R·µÅ = R‚Çê·µÅ √ó·µÅ R‚Çñ·µÅ √ó·µÅ R‚Çë·µÅ √ó·µÅ R‚Çë·µÅ

run : ùüö ‚Üí Adversary ‚Üí ‚Ñï
run b adv = count R·µÅ (EXP b adv)

{-
  Advantage : Adv ‚Üí ‚Ñö
  Advantage adv = dist (run 0b adv) (run 1b adv) / Card R·µÅ
-}

-- -}
-- -}
-- -}
-- -}
-- -}
-- -}
