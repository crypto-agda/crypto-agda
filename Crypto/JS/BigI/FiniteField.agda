{-# OPTIONS --without-K #-}
open import Type.Eq
open import Data.Two hiding (_==_)
open import Relation.Binary.PropositionalEquality
open import FFI.JS using (JS[_]; _++_; return; _>>_)
open import FFI.JS.Check
  using    (check!)
  renaming (check      to check?)
--renaming (warn-check to check?)

open import FFI.JS.BigI
open import Data.List.Base using (List; foldr)
open import Algebra.Raw
open import Algebra.Field

-- TODO carry on a primality proof of q
module Crypto.JS.BigI.FiniteField (q : BigI) where

abstract
  ‚Ñ§[_] : Set
  ‚Ñ§[_] = BigI

  private
    ‚Ñ§q : Set
    ‚Ñ§q = ‚Ñ§[_]

    mod-q : BigI ‚Üí ‚Ñ§q
    mod-q x = mod x q

  -- There are two ways to go from BigI to ‚Ñ§q: BigI‚ñπ‚Ñ§[ q ] and mod-q
  -- Use BigI‚ñπ‚Ñ§[ q ] for untrusted input data and mod-q for internal
  -- computation.
  BigI‚ñπ‚Ñ§[_] : BigI ‚Üí JS[ ‚Ñ§q ]
  BigI‚ñπ‚Ñ§[_] x =
  -- Console.log "BigI‚ñπ‚Ñ§[_]"
    check! "below the modulus" (x <I q)
           (Œª _ ‚Üí "Not below the modulus: q:" ++ toString q ++
                  " is less than x:" ++ toString x) >>
    check! "positivity" (x ‚â•I 0I)
           (Œª _ ‚Üí "Should be positive: " ++ toString x ++ " < 0") >>
    return x

  check-non-zero : ‚Ñ§q ‚Üí BigI
  check-non-zero = -- trace-call "check-non-zero "
    Œª x ‚Üí check? (x >I 0I) (Œª _ ‚Üí "Should be non zero") x

  repr : ‚Ñ§q ‚Üí BigI
  repr x = x

  0# 1# : ‚Ñ§q
  0# = 0I
  1# = 1I

  -- One could choose here to return a dummy value when 0 is given.
  -- Instead we throw an exception which in some circumstances could
  -- be bad if the runtime semantics is too eager.
  1/_ : ‚Ñ§q ‚Üí ‚Ñ§q
  1/ x = modInv (check-non-zero x) q

  _^_ : ‚Ñ§q ‚Üí BigI ‚Üí ‚Ñ§q
  x ^ y = modPow x y q

_‚äó_ : ‚Ñ§q ‚Üí BigI ‚Üí ‚Ñ§q
x ‚äó y = mod-q (multiply (repr x) y)

_+_ _‚àí_ _*_ _/_ : ‚Ñ§q ‚Üí ‚Ñ§q ‚Üí ‚Ñ§q

x + y = mod-q (add      (repr x) (repr y))
x ‚àí y = mod-q (subtract (repr x) (repr y))
x * y = x ‚äó repr y
x / y = x * 1/ y

0‚àí_ : ‚Ñ§q ‚Üí ‚Ñ§q
0‚àí x = mod-q (negate (repr x))

sum prod : List ‚Ñ§q ‚Üí ‚Ñ§q
sum  = foldr _+_ 0#
prod = foldr _*_ 1#

instance
  ‚Ñ§[_]-Eq? : Eq? ‚Ñ§q
  ‚Ñ§[_]-Eq? = record
    { _==_ = _=='_
    ; ‚â°‚áí== = ‚â°‚áí=='
    ; ==‚áí‚â° = ==‚áí‚â°' }
    where
      _=='_ : ‚Ñ§q ‚Üí ‚Ñ§q ‚Üí ùüö
      x ==' y = equals (repr x) (repr y)
      postulate
        ‚â°‚áí==' : ‚àÄ {x y} ‚Üí x ‚â° y ‚Üí ‚úì (x ==' y)
        ==‚áí‚â°' : ‚àÄ {x y} ‚Üí ‚úì (x ==' y) ‚Üí x ‚â° y

+-mon-ops : Monoid-Ops ‚Ñ§q
+-mon-ops = _+_ , 0#

+-grp-ops : Group-Ops ‚Ñ§q
+-grp-ops = +-mon-ops , 0‚àí_

*-mon-ops : Monoid-Ops ‚Ñ§q
*-mon-ops = _*_ , 1#

*-grp-ops : Group-Ops ‚Ñ§q
*-grp-ops = *-mon-ops , 1/_

fld-ops : Field-Ops ‚Ñ§q
fld-ops = +-grp-ops , *-grp-ops

postulate
  fld-struct : Field-Struct fld-ops

fld : Field ‚Ñ§q
fld = fld-ops , fld-struct

module fld = Field fld

open fld using (+-grp) public
-- -}
-- -}
-- -}
-- -}
