{-# OPTIONS --without-K #-}
open import Type.Eq using (_==_; Eq?; ‚â°‚áí==; ==‚áí‚â°)
open import Data.Two.Base using (ùüö; ‚úì)
open import Relation.Binary.PropositionalEquality.Base using (_‚â°_; refl; ap)
open import FFI.JS using (JS[_]; _++_; return; _>>_)
open import FFI.JS.Check
  using    (check!)
--renaming (check      to check?)
  renaming (warn-check to check?)

open import FFI.JS.BigI
open import Data.List.Base using (List; foldr)
open import Algebra.Raw
open import Algebra.Group
open import Algebra.Group.Homomorphism
open import Algebra.Field

-- TODO carry on a primality proof of q
module Crypto.JS.BigI.FiniteField (q : BigI) where

-- The constructor mk is not exported.
private
  module Internals where
    data ‚Ñ§[_] : Set where
      mk : BigI ‚Üí ‚Ñ§[_]

    mk-inj : ‚àÄ {x y : BigI} ‚Üí ‚Ñ§[_].mk x ‚â° mk y ‚Üí x ‚â° y
    mk-inj refl = refl

open Internals public using (‚Ñ§[_])
open Internals

‚Ñ§q : Set
‚Ñ§q = ‚Ñ§[_]

private
  mod-q : BigI ‚Üí ‚Ñ§q
  mod-q x = mk (mod x q)

-- There are two ways to go from BigI to ‚Ñ§q: BigI‚ñπ‚Ñ§[ q ] and mod-q
-- Use BigI‚ñπ‚Ñ§[ q ] for untrusted input data and mod-q for internal
-- computation.
BigI‚ñπ‚Ñ§[_] : BigI ‚Üí JS[ ‚Ñ§q ]
BigI‚ñπ‚Ñ§[_] x =
-- Console.log "BigI‚ñπ‚Ñ§[_]"
  check! "below the modulus" (x <I q)
         (Œª _ ‚Üí "Not below the modulus: q:" ++ toString q ++
                " is less than x:" ++ toString x) >>
  check! "positivity" (x ‚â•I 0I)
         (Œª _ ‚Üí "Should be positive: " ++ toString x ++ " < 0") >>
  return (mk x)

check-non-zero : ‚Ñ§q ‚Üí BigI
check-non-zero (mk x) = -- trace-call "check-non-zero "
  check? (x >I 0I) (Œª _ ‚Üí "Should be non zero") x

‚Ñ§[_]‚ñπBigI : ‚Ñ§q ‚Üí BigI
‚Ñ§[_]‚ñπBigI (mk x) = x

0# 1# : ‚Ñ§q
0# = mk 0I
1# = mk 1I

-- One could choose here to return a dummy value when 0 is given.
-- Instead we throw an exception which in some circumstances could
-- be bad if the runtime semantics is too eager.
1/_ : ‚Ñ§q ‚Üí ‚Ñ§q
1/ x = mk (modInv (check-non-zero x) q)

_^I_ : ‚Ñ§q ‚Üí BigI ‚Üí ‚Ñ§q
mk x ^I y = mk (modPow x y q)

‚Ñ§q‚ñπBigI = ‚Ñ§[_]‚ñπBigI
BigI‚ñπ‚Ñ§q = BigI‚ñπ‚Ñ§[_]

_‚äóI_ : ‚Ñ§q ‚Üí BigI ‚Üí ‚Ñ§q
x ‚äóI y = mod-q (multiply (‚Ñ§q‚ñπBigI x) y)

_+_ _‚àí_ _*_ _/_ : ‚Ñ§q ‚Üí ‚Ñ§q ‚Üí ‚Ñ§q

x + y = mod-q (add      (‚Ñ§q‚ñπBigI x) (‚Ñ§q‚ñπBigI y))
x ‚àí y = mod-q (subtract (‚Ñ§q‚ñπBigI x) (‚Ñ§q‚ñπBigI y))
x * y = x ‚äóI ‚Ñ§q‚ñπBigI y
x / y = x * 1/ y

*-def : _*_ ‚â° (Œª x y ‚Üí x ‚äóI ‚Ñ§q‚ñπBigI y)
*-def = refl

0‚àí_ : ‚Ñ§q ‚Üí ‚Ñ§q
0‚àí x = mod-q (negate (‚Ñ§q‚ñπBigI x))

sum prod : List ‚Ñ§q ‚Üí ‚Ñ§q
sum  = foldr _+_ 0#
prod = foldr _*_ 1#

instance
  ‚Ñ§[_]-Eq? : Eq? ‚Ñ§q
  ‚Ñ§[_]-Eq? = record
    { _==_ = _=='_
    ; ‚â°‚áí== = ‚â°‚áí=='
    ; ==‚áí‚â° = ==‚áí‚â°' }
    where
      _=='_ : ‚Ñ§q ‚Üí ‚Ñ§q ‚Üí ùüö
      mk x ==' mk y = x == y
      ‚â°‚áí==' : ‚àÄ {x y} ‚Üí x ‚â° y ‚Üí ‚úì (x ==' y)
      ‚â°‚áí==' {mk x} {mk y} p = ‚â°‚áí== (mk-inj p)
      ==‚áí‚â°' : ‚àÄ {x y} ‚Üí ‚úì (x ==' y) ‚Üí x ‚â° y
      ==‚áí‚â°' {mk x} {mk y} p = ap mk (==‚áí‚â° p)

‚Ñ§q-Eq?  = ‚Ñ§[_]-Eq?

+-mon-ops : Monoid-Ops ‚Ñ§q
+-mon-ops = _+_ , 0#

+-grp-ops : Group-Ops ‚Ñ§q
+-grp-ops = +-mon-ops , 0‚àí_

*-mon-ops : Monoid-Ops ‚Ñ§q
*-mon-ops = _*_ , 1#

*-grp-ops : Group-Ops ‚Ñ§q
*-grp-ops = *-mon-ops , 1/_

fld-ops : Field-Ops ‚Ñ§q
fld-ops = +-grp-ops , *-grp-ops

postulate fld-struct : Field-Struct fld-ops

fld : Field ‚Ñ§q
fld = fld-ops , fld-struct

module fld = Field fld

-- open fld using (+-grp) public

‚Ñ§[_]+-grp : Group ‚Ñ§q
‚Ñ§[_]+-grp = fld.+-grp

‚Ñ§q+-grp : Group ‚Ñ§q
‚Ñ§q+-grp = fld.+-grp

-- -}
-- -}
-- -}
-- -}
