
-- {-# OPTIONS --without-K #-}
open import Coinduction
open import Function.NP
open import Type
open import Level.NP
open import Data.Product.NP renaming (map to √ó-map; proj‚ÇÅ to fst; proj‚ÇÇ to snd)
open import Data.Zero
open import Data.Sum renaming (inj‚ÇÅ to inl; inj‚ÇÇ to inr; [_,_] to [inl:_,inr:_]) hiding ([_,_]‚Ä≤)
open import Data.One hiding (_‚âü_)
open import Data.Two hiding (_‚âü_)
open import Data.Nat hiding (_‚äî_)
open Data.Two.Indexed

open import Relation.Binary
import Function.Inverse.NP as Inv
open Inv using (_‚Üî_; {-_‚àò_; sym; id;-} inverses; module Inverse) renaming (_$‚ÇÅ_ to to; _$‚ÇÇ_ to from)
open import Function.Related.TypeIsomorphisms.NP hiding (Œ£-assoc)
import Relation.Binary.PropositionalEquality.NP as ‚â°
open ‚â° using (_‚â°_; cong; !_; _‚àô_; refl; subst; cong‚ÇÇ; J; ap; coe; coe!; J-orig)

module Control.Protocol.Choreography where

postulate
    FunExt : ‚òÖ
    Œª= : ‚àÄ {a}{b}{A : ‚òÖ_ a}{B : A ‚Üí ‚òÖ_ b}{f g : (x : A) ‚Üí B x} ‚Üí (‚àÄ x ‚Üí f x ‚â° g x) ‚Üí {{fe : FunExt}} ‚Üí f ‚â° g

-- Contractible
module _ {a}(A : ‚òÖ_ a) where
    Is-contr : ‚òÖ_ a
    Is-contr = Œ£ A Œª x ‚Üí ‚àÄ y ‚Üí x ‚â° y

module _ {a}{b}{A : ‚òÖ_ a}{B : A ‚Üí ‚òÖ_ b} where
    pair= : ‚àÄ {x y : Œ£ A B} ‚Üí (p : fst x ‚â° fst y) ‚Üí subst B p (snd x) ‚â° snd y ‚Üí x ‚â° y
    pair= refl = cong (_,_ _)
    snd= : ‚àÄ {x : A} {y y' : B x} ‚Üí y ‚â° y' ‚Üí _‚â°_ {A = Œ£ A B} (x , y) (x , y')
    snd= = pair= refl
module _ {a}{b}{A : ‚òÖ_ a}{B : ‚òÖ_ b} where
    pair√ó= : ‚àÄ {x x' : A}(p : x ‚â° x')
               {y y' : B}(q : y ‚â° y')
             ‚Üí (x , y) ‚â° (x' , y')
    pair√ó= refl q = snd= q

module _ {a}(A : ‚òÖ_ a){b}{B‚ÇÄ B‚ÇÅ : A ‚Üí ‚òÖ_ b}(B : (x : A) ‚Üí B‚ÇÄ x ‚â° B‚ÇÅ x){{_ : FunExt}} where
    Œ£=‚Ä≤ : Œ£ A B‚ÇÄ ‚â° Œ£ A B‚ÇÅ
    Œ£=‚Ä≤ = cong (Œ£ A) (Œª= B)

    Œ†=‚Ä≤ : Œ† A B‚ÇÄ ‚â° Œ† A B‚ÇÅ
    Œ†=‚Ä≤ = cong (Œ† A) (Œª= B)

module _ {{_ : FunExt}} where
    Œ£= : ‚àÄ {a}{A‚ÇÄ A‚ÇÅ : ‚òÖ_ a}{b}{B‚ÇÄ : A‚ÇÄ ‚Üí ‚òÖ_ b}{B‚ÇÅ : A‚ÇÅ ‚Üí ‚òÖ_ b}
           (A : A‚ÇÄ ‚â° A‚ÇÅ)(B : (x : A‚ÇÄ) ‚Üí B‚ÇÄ x ‚â° B‚ÇÅ (coe A x))
         ‚Üí Œ£ A‚ÇÄ B‚ÇÄ ‚â° Œ£ A‚ÇÅ B‚ÇÅ
    Œ£= refl B = Œ£=‚Ä≤ _ B

    Œ†= : ‚àÄ {a}{A‚ÇÄ A‚ÇÅ : ‚òÖ_ a}{b}{B‚ÇÄ : A‚ÇÄ ‚Üí ‚òÖ_ b}{B‚ÇÅ : A‚ÇÅ ‚Üí ‚òÖ_ b}
           (A : A‚ÇÄ ‚â° A‚ÇÅ)(B : (x : A‚ÇÄ) ‚Üí B‚ÇÄ x ‚â° B‚ÇÅ (coe A x))
         ‚Üí Œ† A‚ÇÄ B‚ÇÄ ‚â° Œ† A‚ÇÅ B‚ÇÅ
    Œ†= refl B = Œ†=‚Ä≤ _ B

module _ {a}{A‚ÇÄ A‚ÇÅ : ‚òÖ_ a}{b}{B‚ÇÄ B‚ÇÅ : ‚òÖ_ b}(A : A‚ÇÄ ‚â° A‚ÇÅ)(B : B‚ÇÄ ‚â° B‚ÇÅ) where
    √ó= : (A‚ÇÄ √ó B‚ÇÄ) ‚â° (A‚ÇÅ √ó B‚ÇÅ)
    √ó= = cong‚ÇÇ _√ó_ A B

    ‚äé= : (A‚ÇÄ ‚äé B‚ÇÄ) ‚â° (A‚ÇÅ ‚äé B‚ÇÅ)
    ‚äé= = cong‚ÇÇ _‚äé_ A B

module Equivalences where

  module _ {a b}{A : ‚òÖ_ a}{B : ‚òÖ_ b} where
    _LeftInverseOf_ : (B ‚Üí A) ‚Üí (A ‚Üí B) ‚Üí ‚òÖ_ a
    linv LeftInverseOf f = ‚àÄ x ‚Üí linv (f x) ‚â° x

    _RightInverseOf_ : (B ‚Üí A) ‚Üí (A ‚Üí B) ‚Üí ‚òÖ_ b
    rinv RightInverseOf f = ‚àÄ x ‚Üí f (rinv x) ‚â° x

    record Linv (f : A ‚Üí B) : ‚òÖ_(a ‚äî b) where
      field
        linv : B ‚Üí A
        is-linv : ‚àÄ x ‚Üí linv (f x) ‚â° x

    record Rinv (f : A ‚Üí B) : ‚òÖ_(a ‚äî b) where
      field
        rinv : B ‚Üí A
        is-rinv : ‚àÄ x ‚Üí f (rinv x) ‚â° x

    record Is-equiv (f : A ‚Üí B) : ‚òÖ_(a ‚äî b) where
      field
        linv : B ‚Üí A
        is-linv : ‚àÄ x ‚Üí linv (f x) ‚â° x
        rinv : B ‚Üí A
        is-rinv : ‚àÄ x ‚Üí f (rinv x) ‚â° x

      injective : ‚àÄ {x y} ‚Üí f x ‚â° f y ‚Üí x ‚â° y
      injective {x} {y} p = !(is-linv x) ‚àô ap linv p ‚àô is-linv y

      surjective : ‚àÄ y ‚Üí ‚àÉ Œª x ‚Üí f x ‚â° y
      surjective y = rinv y , is-rinv y

  module _ {a b}{A : ‚òÖ_ a}{B : ‚òÖ_ b}{f : A ‚Üí B}(f·¥± : Is-equiv f) where
      open Is-equiv f·¥±
      inv : B ‚Üí A
      inv = linv ‚àò f ‚àò rinv

      inv-is-equiv : Is-equiv inv
      inv-is-equiv = record { linv = f
                         ; is-linv = Œª x ‚Üí ap f (is-linv (rinv x)) ‚àô is-rinv x
                         ; rinv = f
                         ; is-rinv = Œª x ‚Üí ap linv (is-rinv (f x)) ‚àô is-linv x }

  module _ {a}{A : ‚òÖ_ a}{f : A ‚Üí A}(f-inv : f LeftInverseOf f) where
      self-inv-is-equiv : Is-equiv f
      self-inv-is-equiv = record { linv = f ; is-linv = f-inv ; rinv = f ; is-rinv = f-inv }

  module _ {a}{A : ‚òÖ_ a} where
    id·¥± : Is-equiv {A = A} id
    id·¥± = self-inv-is-equiv Œª _ ‚Üí refl

  module _ {a b c}{A : ‚òÖ_ a}{B : ‚òÖ_ b}{C : ‚òÖ_ c}{g : B ‚Üí C}{f : A ‚Üí B} where
    _‚àò·¥±_ : Is-equiv g ‚Üí Is-equiv f ‚Üí Is-equiv (g ‚àò f)
    g·¥± ‚àò·¥± f·¥± = record { linv = F.linv ‚àò G.linv ; is-linv = Œª x ‚Üí ap F.linv (G.is-linv (f x)) ‚àô F.is-linv x
                      ; rinv = F.rinv ‚àò G.rinv ; is-rinv = Œª x ‚Üí ap g (F.is-rinv _) ‚àô G.is-rinv x }
      where
        module G = Is-equiv g·¥±
        module F = Is-equiv f·¥±

  module _ {a b} where
    infix 4 _‚âÉ_
    _‚âÉ_ : ‚òÖ_ a ‚Üí ‚òÖ_ b ‚Üí ‚òÖ_(a ‚äî b)
    A ‚âÉ B = Œ£ (A ‚Üí B) Is-equiv

  module _ {a b}{A : ‚òÖ_ a}{B : ‚òÖ_ b} where
    ‚Äì> : (e : A ‚âÉ B) ‚Üí (A ‚Üí B)
    ‚Äì> e = fst e

    <‚Äì : (e : A ‚âÉ B) ‚Üí (B ‚Üí A)
    <‚Äì e = Is-equiv.linv (snd e)

    <‚Äì-inv-l : (e : A ‚âÉ B) (a : A)
              ‚Üí (<‚Äì e (‚Äì> e a) ‚â° a)
    <‚Äì-inv-l e a = Is-equiv.is-linv (snd e) a

    {-
    <‚Äì-inv-r : (e : A ‚âÉ B) (b : B)
                ‚Üí (‚Äì> e (<‚Äì e b) ‚â° b)
    <‚Äì-inv-r e b = Is-equiv.is-rinv (snd e) b
    -}

    -- Equivalences are "injective"
    equiv-inj : (e : A ‚âÉ B) {x y : A}
                ‚Üí (‚Äì> e x ‚â° ‚Äì> e y ‚Üí x ‚â° y)
    equiv-inj e {x} {y} p = ! (<‚Äì-inv-l e x) ‚àô ap (<‚Äì e) p ‚àô <‚Äì-inv-l e y

  module _ {a b}{A : ‚òÖ_ a}{B : ‚òÖ_ b}
           (f : A ‚Üí B) (g : B ‚Üí A)
           (f-g : (y : B) ‚Üí f (g y) ‚â° y)
           (g-f : (x : A) ‚Üí g (f x) ‚â° x) where
    is-equiv : Is-equiv f
    is-equiv = record { linv = g ; is-linv = g-f ; rinv = g ; is-rinv = f-g }

    equiv : A ‚âÉ B
    equiv = f , is-equiv

  module _ {‚Ñì} where
    ‚âÉ-refl : Reflexive (_‚âÉ_ {‚Ñì})
    ‚âÉ-refl = _ , id·¥±

    ‚âÉ-sym : Symmetric (_‚âÉ_ {‚Ñì})
    ‚âÉ-sym (_ , f·¥±) = _ , inv-is-equiv f·¥±

    ‚âÉ-trans : Transitive (_‚âÉ_ {‚Ñì})
    ‚âÉ-trans (_ , p) (_ , q) = _ , q ‚àò·¥± p

    ‚âÉ-! = ‚âÉ-sym
    _‚âÉ-‚àô_ = ‚âÉ-trans

  module _ {a}{A : ‚òÖ_ a} where
    Paths : ‚òÖ_ a
    Paths = Œ£ A Œª x ‚Üí Œ£ A Œª y ‚Üí x ‚â° y

    id-path : A ‚Üí Paths
    id-path x = x , x , refl

    fst-rinv-id-path : ‚àÄ p ‚Üí id-path (fst p) ‚â° p
    fst-rinv-id-path (x , y , p) = snd= (pair= p (J (Œª {y} p ‚Üí subst (_‚â°_ x) p refl ‚â° p) refl p))

    id-path-is-equiv : Is-equiv id-path
    id-path-is-equiv = record { linv = fst
                              ; is-linv = Œª x ‚Üí refl
                              ; rinv = fst
                              ; is-rinv = fst-rinv-id-path }

    ‚âÉ-Paths : A ‚âÉ Paths
    ‚âÉ-Paths = id-path , id-path-is-equiv

  module _ {a b}{A : ‚òÖ_ a}{B : ‚òÖ_ b}(f : A ‚Üí B) where
    hfiber : (y : B) ‚Üí ‚òÖ_(a ‚äî b)
    hfiber y = Œ£ A Œª x ‚Üí f x ‚â° y

    Is-equiv-alt : ‚òÖ_(a ‚äî b)
    Is-equiv-alt = (y : B) ‚Üí Is-contr (hfiber y)

  module Is-contr-to-Is-equiv {a}{A : ‚òÖ_ a}(A-contr : Is-contr A) where
    const-is-equiv : Is-equiv (Œª (_ : ùüô) ‚Üí fst A-contr)
    const-is-equiv = record { linv = _ ; is-linv = Œª _ ‚Üí refl ; rinv = _ ; is-rinv = snd A-contr }
    ùüô‚âÉ : ùüô ‚âÉ A
    ùüô‚âÉ = _ , const-is-equiv
  module Is-equiv-to-Is-contr {a}{A : ‚òÖ_ a}(f : ùüô ‚Üí A)(f-is-equiv : Is-equiv f) where
    open Is-equiv f-is-equiv
    A-contr : Is-contr A
    A-contr = f _ , is-rinv

  module _ {a}{A : ‚òÖ_ a}{b}{B : ‚òÖ_ b} where
    iso-to-equiv : (A ‚Üî B) ‚Üí (A ‚âÉ B)
    iso-to-equiv iso = to iso , record { linv = from iso ; is-linv = Inverse.left-inverse-of iso
                                       ; rinv = from iso ; is-rinv = Inverse.right-inverse-of iso }

    equiv-to-iso : (A ‚âÉ B) ‚Üí (A ‚Üî B)
    equiv-to-iso (f , f-is-equiv) = inverses f (f·¥±.linv ‚àò f ‚àò f·¥±.rinv)
                                             (Œª x ‚Üí ap f·¥±.linv (f·¥±.is-rinv (f x)) ‚àô f·¥±.is-linv x)
                                             (Œª x ‚Üí ap f (f·¥±.is-linv (f·¥±.rinv x)) ‚àô f·¥±.is-rinv x)
      where module f·¥± = Is-equiv f-is-equiv

    {-
    iso-to-equiv-to-iso : (iso : A ‚Üî B) ‚Üí equiv-to-iso (iso-to-equiv iso) ‚â° iso
    iso-to-equiv-to-iso iso = {!!}
      where module Iso = Inverse iso

    iso-to-equiv-is-equiv : Is-equiv iso-to-equiv
    iso-to-equiv-is-equiv = record { linv = equiv-to-iso ; is-linv = {!!} ; rinv = {!!} ; is-rinv = {!!} }
    -}
open Equivalences

module _ {‚Ñì}{A : ‚òÖ_ ‚Ñì} where
    coe!-inv-r : ‚àÄ {B}(p : A ‚â° B) y ‚Üí coe p (coe! p y) ‚â° y
    coe!-inv-r refl y = refl

    coe!-inv-l : ‚àÄ {B}(p : A ‚â° B) x ‚Üí coe! p (coe p x) ‚â° x
    coe!-inv-l refl x = refl

    coe-equiv : ‚àÄ {B} ‚Üí A ‚â° B ‚Üí A ‚âÉ B
    coe-equiv p = equiv (coe p) (coe! p) (coe!-inv-r p) (coe!-inv-l p)

postulate
  UA : ‚òÖ
module _ {‚Ñì}{A B : ‚òÖ_ ‚Ñì}{{_ : UA}} where
  postulate
    ua : (A ‚âÉ B) ‚Üí (A ‚â° B)
    coe-equiv-Œ≤ : (e : A ‚âÉ B) ‚Üí coe-equiv (ua e) ‚â° e
    ua-Œ∑ : (p : A ‚â° B) ‚Üí ua (coe-equiv p) ‚â° p

  ua-equiv : (A ‚âÉ B) ‚âÉ (A ‚â° B)
  ua-equiv = equiv ua coe-equiv ua-Œ∑ coe-equiv-Œ≤

  coe-Œ≤ : (e : A ‚âÉ B) (a : A) ‚Üí coe (ua e) a ‚â° ‚Äì> e a
  coe-Œ≤ e a = ap (Œª e ‚Üí ‚Äì> e a) (coe-equiv-Œ≤ e)

module _ {{_ : UA}}{{_ : FunExt}}{a}{A‚ÇÄ A‚ÇÅ : ‚òÖ_ a}{b}{B‚ÇÄ : A‚ÇÄ ‚Üí ‚òÖ_ b}{B‚ÇÅ : A‚ÇÅ ‚Üí ‚òÖ_ b} where
    Œ£‚âÉ : (A : A‚ÇÄ ‚âÉ A‚ÇÅ)(B : (x : A‚ÇÄ) ‚Üí B‚ÇÄ x ‚â° B‚ÇÅ (‚Äì> A x))
         ‚Üí Œ£ A‚ÇÄ B‚ÇÄ ‚â° Œ£ A‚ÇÅ B‚ÇÅ
    Œ£‚âÉ A B = Œ£= (ua A) Œª x ‚Üí B x ‚àô ap B‚ÇÅ (! coe-Œ≤ A x)

    Œ†‚âÉ : (A : A‚ÇÄ ‚âÉ A‚ÇÅ)(B : (x : A‚ÇÄ) ‚Üí B‚ÇÄ x ‚â° B‚ÇÅ (‚Äì> A x))
         ‚Üí Œ† A‚ÇÄ B‚ÇÄ ‚â° Œ† A‚ÇÅ B‚ÇÅ
    Œ†‚âÉ A B = Œ†= (ua A) Œª x ‚Üí B x ‚àô ap B‚ÇÅ (! coe-Œ≤ A x)

module _ {{_ : UA}}{{_ : FunExt}}{A : ‚òÖ}{B C : A ‚Üí ‚òÖ} where
    Œ£‚äé-split : (Œ£ A (Œª x ‚Üí B x ‚äé C x)) ‚â° (Œ£ A B ‚äé Œ£ A C)
    Œ£‚äé-split = ua (equiv (Œª { (x , inl y) ‚Üí inl (x , y)
                            ; (x , inr y) ‚Üí inr (x , y) })
                         (Œª { (inl (x , y)) ‚Üí x , inl y
                            ; (inr (x , y)) ‚Üí x , inr y })
                         (Œª { (inl (x , y)) ‚Üí refl
                            ; (inr (x , y)) ‚Üí refl })
                         (Œª { (x , inl y) ‚Üí refl
                            ; (x , inr y) ‚Üí refl }))

module _ {{_ : UA}}{{_ : FunExt}}{A B : ‚òÖ}{C : A ‚Üí ‚òÖ}{D : B ‚Üí ‚òÖ} where
    dist-‚äé-Œ£ : (Œ£ (A ‚äé B) [inl: C ,inr: D ]) ‚â° (Œ£ A C ‚äé Œ£ B D)
    dist-‚äé-Œ£ = ua (iso-to-equiv Œ£‚äé-distrib)
    dist-√ó-Œ† : (Œ† (A ‚äé B) [inl: C ,inr: D ]) ‚â° (Œ† A C √ó Œ† B D)
    dist-√ó-Œ† = ua (iso-to-equiv (Œ†√ó-distrib (Œª fg ‚Üí Œª= fg)))

module _ {A : ‚òÖ}{B : A ‚Üí ‚òÖ}{C : (x : A) ‚Üí B x ‚Üí ‚òÖ} where
    Œ£-assoc-equiv : (Œ£ A (Œª x ‚Üí Œ£ (B x) (C x))) ‚âÉ (Œ£ (Œ£ A B) (uncurry C))
    Œ£-assoc-equiv = equiv (Œª x ‚Üí (fst x , fst (snd x)) , snd (snd x))
                          (Œª x ‚Üí fst (fst x) , snd (fst x) , snd x)
                          (Œª y ‚Üí refl)
                          (Œª y ‚Üí refl)

    Œ£-assoc : {{_ : UA}} ‚Üí (Œ£ A (Œª x ‚Üí Œ£ (B x) (C x))) ‚â° (Œ£ (Œ£ A B) (uncurry C))
    Œ£-assoc = ua Œ£-assoc-equiv

module _ {A B : ‚òÖ} where
    √ó-comm-equiv : (A √ó B) ‚âÉ (B √ó A)
    √ó-comm-equiv = equiv swap swap (Œª y ‚Üí refl) (Œª x ‚Üí refl)

    √ó-comm : {{_ : UA}} ‚Üí (A √ó B) ‚â° (B √ó A)
    √ó-comm = ua √ó-comm-equiv

    ‚äé-comm-equiv : (A ‚äé B) ‚âÉ (B ‚äé A)
    ‚äé-comm-equiv = equiv [inl: inr ,inr: inl ]
                         [inl: inr ,inr: inl ]
                         [inl: (Œª x ‚Üí refl) ,inr: (Œª x ‚Üí refl) ]
                         [inl: (Œª x ‚Üí refl) ,inr: (Œª x ‚Üí refl) ]

    ‚äé-comm : {{_ : UA}} ‚Üí (A ‚äé B) ‚â° (B ‚äé A)
    ‚äé-comm = ua ‚äé-comm-equiv

module _ {A B : ‚òÖ}{C : A ‚Üí B ‚Üí ‚òÖ} where
    Œ†Œ†-comm-equiv : ((x : A)(y : B) ‚Üí C x y) ‚âÉ ((y : B)(x : A) ‚Üí C x y)
    Œ†Œ†-comm-equiv = equiv flip flip (Œª _ ‚Üí refl) (Œª _ ‚Üí refl)

    Œ†Œ†-comm : {{_ : UA}} ‚Üí ((x : A)(y : B) ‚Üí C x y) ‚â° ((y : B)(x : A) ‚Üí C x y)
    Œ†Œ†-comm = ua Œ†Œ†-comm-equiv

    Œ£Œ£-comm-equiv : (Œ£ A Œª x ‚Üí Œ£ B Œª y ‚Üí C x y) ‚âÉ (Œ£ B Œª y ‚Üí Œ£ A Œª x ‚Üí C x y)
    Œ£Œ£-comm-equiv = equiv (Œª { (x , y , z) ‚Üí y , x , z })
                          (Œª { (x , y , z) ‚Üí y , x , z })
                          (Œª _ ‚Üí refl)
                          (Œª _ ‚Üí refl)

    Œ£Œ£-comm : {{_ : UA}} ‚Üí (Œ£ A Œª x ‚Üí Œ£ B Œª y ‚Üí C x y) ‚â° (Œ£ B Œª y ‚Üí Œ£ A Œª x ‚Üí C x y)
    Œ£Œ£-comm = ua Œ£Œ£-comm-equiv

module _ {A B C : ‚òÖ} where
    √ó-assoc : {{_ : UA}} ‚Üí (A √ó (B √ó C)) ‚â° ((A √ó B) √ó C)
    √ó-assoc = Œ£-assoc

    ‚äé-assoc-equiv : (A ‚äé (B ‚äé C)) ‚âÉ ((A ‚äé B) ‚äé C)
    ‚äé-assoc-equiv = equiv [inl: inl ‚àò inl ,inr: [inl: inl ‚àò inr ,inr: inr ] ]
                          [inl: [inl: inl ,inr: inr ‚àò inl ] ,inr: inr ‚àò inr ]
                          [inl: [inl: (Œª x ‚Üí refl) ,inr: (Œª x ‚Üí refl) ] ,inr: (Œª x ‚Üí refl) ]
                          [inl: (Œª x ‚Üí refl) ,inr: [inl: (Œª x ‚Üí refl) ,inr: (Œª x ‚Üí refl) ] ]

    ‚äé-assoc : {{_ : UA}} ‚Üí (A ‚äé (B ‚äé C)) ‚â° ((A ‚äé B) ‚äé C)
    ‚äé-assoc = ua ‚äé-assoc-equiv

module _ {{_ : FunExt}}(F G : ùüò ‚Üí ‚òÖ) where
    Œ†ùüò-uniq : Œ† ùüò F ‚â° Œ† ùüò G
    Œ†ùüò-uniq = Œ†=‚Ä≤ ùüò (Œª())

Œ†¬∑ : ‚àÄ {a b}(A : ‚òÖ_ a) ‚Üí (B : ..(_ : A) ‚Üí ‚òÖ_ b) ‚Üí ‚òÖ_ (a ‚äî b)
Œ†¬∑ A B = ..(x : A) ‚Üí B x

data ‚òê {a}(A : ‚òÖ_ a) : ‚òÖ_ a where
  [_] : ..(x : A) ‚Üí ‚òê A

un‚òê : ‚àÄ {a b}{A : ‚òÖ_ a}{B : ‚òê A ‚Üí ‚òÖ_ b} ‚Üí (..(x : A) ‚Üí B [ x ]) ‚Üí Œ† (‚òê A) B
un‚òê f [ x ] = f x

data _‚â°‚òê_ {a} {A : ‚òÖ_ a} (x : A) : ..(y : A) ‚Üí ‚òÖ_ a where
  refl : x ‚â°‚òê x

{-
data S<_> {a} {A : ‚òÖ_ a} : ..(x : A) ‚Üí ‚òÖ_ a where
  S[_] : ‚àÄ x ‚Üí S< x >

unS : ‚àÄ {a} {A : ‚òÖ_ a} ..{x : A} ‚Üí S< x > ‚Üí A
unS S[ y ] = y
-}

record S<_> {a} {A : ‚òÖ_ a} ..(x : A) : ‚òÖ_ a where
  constructor S[_‚à•_]
  field
    unS : A
    isS : unS ‚â°‚òê x
open S<_> public

S[_] : ‚àÄ {a}{A : ‚òÖ_ a} (x : A) ‚Üí S< x >
S[ x ] = S[ x ‚à• refl ]

_>>‚òê_ : ‚àÄ {a b}{A : ‚òÖ_ a}{B : ‚òê A ‚Üí ‚òÖ_ b} (x : ‚òê A) ‚Üí (..(x : A) ‚Üí B [ x ]) ‚Üí B x
[ x ] >>‚òê f = f x

-- This is not a proper map since the function takes a ..A.
map‚òê : ‚àÄ {a b}{A : ‚òÖ_ a}{B : ‚òÖ_ b} ‚Üí (..(x : A) ‚Üí B) ‚Üí ‚òê A ‚Üí ‚òê B
map‚òê f [ x ] = [ f x ]

-- This does not work since a ‚òê has to be relevant when eliminated.
-- join‚òê : ‚àÄ {a}{A : ‚òÖ_ a} ‚Üí ‚òê (‚òê A) ‚Üí ‚òê A

{- This is not a proper bind either.
_>>=‚òê_ : ‚àÄ {a b}{A : ‚òÖ_ a}{B : ‚òÖ_ b} (x : ‚òê A) ‚Üí (..(x : A) ‚Üí ‚òê B) ‚Üí ‚òê B
_>>=‚òê_ = _>>‚òê_
-}

data InOut : ‚òÖ where
  In Out : InOut

dual·¥µ·¥º : InOut ‚Üí InOut
dual·¥µ·¥º In  = Out
dual·¥µ·¥º Out = In

dual·¥µ·¥º-involutive : ‚àÄ io ‚Üí dual·¥µ·¥º (dual·¥µ·¥º io) ‚â° io
dual·¥µ·¥º-involutive In = refl
dual·¥µ·¥º-involutive Out = refl

dual·¥µ·¥º-equiv : Is-equiv dual·¥µ·¥º
dual·¥µ·¥º-equiv = self-inv-is-equiv dual·¥µ·¥º-involutive

dual·¥µ·¥º-inj : ‚àÄ {x y} ‚Üí dual·¥µ·¥º x ‚â° dual·¥µ·¥º y ‚Üí x ‚â° y
dual·¥µ·¥º-inj = Is-equiv.injective dual·¥µ·¥º-equiv

module UniversalProtocols ‚Ñì {U : ‚òÖ_(‚Çõ ‚Ñì)}(U‚ü¶_‚üß : U ‚Üí ‚òÖ_ ‚Ñì) where
  data Proto_ : ‚òÖ_(‚Çõ ‚Ñì) where
    end : Proto_
    com : (io : InOut){M : U}(P : U‚ü¶ M ‚üß ‚Üí Proto_) ‚Üí Proto_

module U‚òÖ ‚Ñì = UniversalProtocols ‚Ñì {‚òÖ_ ‚Ñì} id
open U‚òÖ

Proto : ‚òÖ‚ÇÅ
Proto = Proto_ ‚ÇÄ
Proto‚ÇÄ = Proto
Proto‚ÇÅ = Proto_ ‚ÇÅ

pattern Œ†·¥æ M P = com In  {M} P
pattern Œ£·¥æ M P = com Out {M} P

module ProtoRel (_‚âà·¥µ·¥º_ : InOut ‚Üí InOut ‚Üí ‚òÖ) where
    infix 0 _‚âà·¥æ_
    data _‚âà·¥æ_ : Proto ‚Üí Proto ‚Üí ‚òÖ‚ÇÅ where
      end : end ‚âà·¥æ end
      com : ‚àÄ {io‚ÇÄ io‚ÇÅ} (io : io‚ÇÄ ‚âà·¥µ·¥º io‚ÇÅ){M P Q} ‚Üí (‚àÄ (m : M) ‚Üí P m ‚âà·¥æ Q m) ‚Üí com io‚ÇÄ P ‚âà·¥æ com io‚ÇÅ Q

module ProtoRelImplicit {_‚âà·¥µ·¥º_ : InOut ‚Üí InOut ‚Üí ‚òÖ} = ProtoRel _‚âà·¥µ·¥º_
open ProtoRelImplicit hiding (_‚âà·¥æ_)
open ProtoRel _‚â°_ public renaming (_‚âà·¥æ_ to _‚â°·¥æ_) using ()

data View-‚â°·¥æ : (P Q : Proto) ‚Üí P ‚â°·¥æ Q ‚Üí ‚òÖ‚ÇÅ where
  end : View-‚â°·¥æ end end end
  ‚â°-Œ£ : ‚àÄ {M P Q} (p‚â°q : (m : M) ‚Üí P m ‚â°·¥æ Q m) ‚Üí View-‚â°·¥æ (Œ£·¥æ _ P) (Œ£·¥æ _ Q) (com refl p‚â°q)
  ‚â°-Œ† : ‚àÄ {M P Q} (p‚â°q : (m : M) ‚Üí P m ‚â°·¥æ Q m) ‚Üí View-‚â°·¥æ (Œ†·¥æ _ P) (Œ†·¥æ _ Q) (com refl p‚â°q)

view-‚â°·¥æ : ‚àÄ {P Q} (p‚â°q : P ‚â°·¥æ Q) ‚Üí View-‚â°·¥æ P Q p‚â°q
view-‚â°·¥æ end = end
view-‚â°·¥æ (com {In}  refl _) = ‚â°-Œ† _
view-‚â°·¥æ (com {Out} refl _) = ‚â°-Œ£ _

Œ†‚òê·¥æ : (M : ‚òÖ)(P : ..(_ : M) ‚Üí Proto) ‚Üí Proto
Œ†‚òê·¥æ M P = Œ†·¥æ (‚òê M) (Œª { [ m ] ‚Üí P m })

Œ£‚òê·¥æ : (M : ‚òÖ)(P : ..(_ : M) ‚Üí Proto) ‚Üí Proto
Œ£‚òê·¥æ M P = Œ£·¥æ (‚òê M) (Œª { [ m ] ‚Üí P m })

source-of : Proto ‚Üí Proto
source-of end       = end
source-of (com _ P) = Œ£·¥æ _ Œª m ‚Üí source-of (P m)

{-
dual : Proto ‚Üí Proto
dual end      = end
dual (Œ£·¥æ M P) = Œ†·¥æ M Œª m ‚Üí dual (P m)
dual (Œ†·¥æ M P) = Œ£·¥æ M Œª m ‚Üí dual (P m)
-}

dual : Proto ‚Üí Proto
dual end        = end
dual (com io P) = com (dual·¥µ·¥º io) Œª m ‚Üí dual (P m)

data IsSource : Proto ‚Üí ‚òÖ‚ÇÅ where
  end : IsSource end
  com : ‚àÄ M {P} (PT : ‚àÄ m ‚Üí IsSource (P m)) ‚Üí IsSource (Œ£·¥æ M P)

data IsSink : Proto ‚Üí ‚òÖ‚ÇÅ where
  end : IsSink end
  com : ‚àÄ M {P} (PT : ‚àÄ m ‚Üí IsSink (P m)) ‚Üí IsSink (Œ†·¥æ M P)

data Proto‚òê : Proto ‚Üí ‚òÖ‚ÇÅ where
  end : Proto‚òê end
  com : ‚àÄ q M {P} (P‚òê : ‚àÄ (m : ‚òê M) ‚Üí Proto‚òê (P m)) ‚Üí Proto‚òê (com q P)

record End_ ‚Ñì : ‚òÖ_ ‚Ñì where
  constructor end

End : ‚àÄ {‚Ñì} ‚Üí ‚òÖ_ ‚Ñì
End = End_ _

‚ü¶_‚üß·¥µ·¥º : InOut ‚Üí ‚àÄ{‚Ñì}(M : ‚òÖ_ ‚Ñì)(P : M ‚Üí ‚òÖ_ ‚Ñì) ‚Üí ‚òÖ_ ‚Ñì
‚ü¶_‚üß·¥µ·¥º In  = Œ†
‚ü¶_‚üß·¥µ·¥º Out = Œ£

‚ü¶_‚üß : ‚àÄ {‚Ñì} ‚Üí Proto_ ‚Ñì ‚Üí ‚òÖ_ ‚Ñì
‚ü¶ end     ‚üß = End
‚ü¶ com q P ‚üß = ‚ü¶ q ‚üß·¥µ·¥º _ Œª m ‚Üí ‚ü¶ P m ‚üß

‚ü¶_‚ä•‚üß : Proto ‚Üí ‚òÖ
‚ü¶ P ‚ä•‚üß = ‚ü¶ dual P ‚üß

‚Ñõ‚ü¶_‚üß : ‚àÄ{‚Ñì}(P : Proto_ ‚Ñì) (p q : ‚ü¶ P ‚üß) ‚Üí ‚òÖ_ ‚Ñì
‚Ñõ‚ü¶ end    ‚üß p q = End
‚Ñõ‚ü¶ Œ†·¥æ M P ‚üß p q = (m : M) ‚Üí ‚Ñõ‚ü¶ P m ‚üß (p m) (q m)
‚Ñõ‚ü¶ Œ£·¥æ M P ‚üß p q = Œ£ (fst p ‚â° fst q) Œª e ‚Üí ‚Ñõ‚ü¶ P (fst q) ‚üß (subst (‚ü¶_‚üß ‚àò P) e (snd p)) (snd q)

‚Ñõ‚ü¶_‚üß-refl : ‚àÄ {‚Ñì}(P : Proto_ ‚Ñì) ‚Üí Reflexive ‚Ñõ‚ü¶ P ‚üß
‚Ñõ‚ü¶ end    ‚üß-refl     = end
‚Ñõ‚ü¶ Œ†·¥æ M P ‚üß-refl     = Œª m ‚Üí ‚Ñõ‚ü¶ P m ‚üß-refl
‚Ñõ‚ü¶ Œ£·¥æ M P ‚üß-refl {x} = refl , ‚Ñõ‚ü¶ P (fst x) ‚üß-refl

‚Ñõ‚ü¶_‚üß-sym : ‚àÄ {‚Ñì}(P : Proto_ ‚Ñì) ‚Üí Symmetric ‚Ñõ‚ü¶ P ‚üß
‚Ñõ‚ü¶ end    ‚üß-sym p          = end
‚Ñõ‚ü¶ Œ†·¥æ M P ‚üß-sym p          = Œª m ‚Üí ‚Ñõ‚ü¶ P m ‚üß-sym (p m)
‚Ñõ‚ü¶ Œ£·¥æ M P ‚üß-sym (refl , q) = refl , ‚Ñõ‚ü¶ P _ ‚üß-sym q    -- TODO HoTT

‚Ñõ‚ü¶_‚üß-trans : ‚àÄ {‚Ñì}(P : Proto_ ‚Ñì) ‚Üí Transitive ‚Ñõ‚ü¶ P ‚üß
‚Ñõ‚ü¶ end    ‚üß-trans p          q          = end
‚Ñõ‚ü¶ Œ†·¥æ M P ‚üß-trans p          q          = Œª m ‚Üí ‚Ñõ‚ü¶ P m ‚üß-trans (p m) (q m)
‚Ñõ‚ü¶ Œ£·¥æ M P ‚üß-trans (refl , p) (refl , q) = refl , ‚Ñõ‚ü¶ P _ ‚üß-trans p q    -- TODO HoTT

data ViewProc {‚Ñì} : ‚àÄ (P : Proto_ ‚Ñì) ‚Üí ‚ü¶ P ‚üß ‚Üí ‚òÖ_(‚Çõ ‚Ñì) where
  send : ‚àÄ M(P : M ‚Üí Proto_ ‚Ñì)(m : M)(p : ‚ü¶ P m ‚üß) ‚Üí ViewProc (Œ£·¥æ M P) (m , p)
  recv : ‚àÄ M(P : M ‚Üí Proto_ ‚Ñì)(p : ((m : M) ‚Üí ‚ü¶ P m ‚üß)) ‚Üí ViewProc (Œ†·¥æ M P) p
  end  : ViewProc end _

view-proc : ‚àÄ {‚Ñì} (P : Proto_ ‚Ñì) (p : ‚ü¶ P ‚üß) ‚Üí ViewProc P p
view-proc end      _       = end
view-proc (Œ†·¥æ M P) p       = recv _ _ p
view-proc (Œ£·¥æ M P) (m , p) = send _ _ m p

_√ó'_ : ‚òÖ ‚Üí Proto ‚Üí Proto
M √ó' P = Œ£·¥æ M Œª _ ‚Üí P

_‚Üí'_ : ‚òÖ ‚Üí Proto ‚Üí Proto
M ‚Üí' P = Œ†·¥æ M Œª _ ‚Üí P

‚â°·¥æ-refl : ‚àÄ P ‚Üí P ‚â°·¥æ P
‚â°·¥æ-refl end       = end
‚â°·¥æ-refl (com q P) = com refl Œª m ‚Üí ‚â°·¥æ-refl (P m)

‚â°·¥æ-reflexive : ‚àÄ {P Q} ‚Üí P ‚â° Q ‚Üí P ‚â°·¥æ Q
‚â°·¥æ-reflexive refl = ‚â°·¥æ-refl _

‚â°·¥æ-sym : Symmetric _‚â°·¥æ_
‚â°·¥æ-sym end = end
‚â°·¥æ-sym (com refl r) = com refl Œª m ‚Üí ‚â°·¥æ-sym (r m)

‚â°·¥æ-trans : Transitive _‚â°·¥æ_
‚â°·¥æ-trans end qr = qr
‚â°·¥æ-trans (com refl x) (com refl x‚ÇÅ) = com refl (Œª m ‚Üí ‚â°·¥æ-trans (x m) (x‚ÇÅ m))

!·¥æ = ‚â°·¥æ-sym
_‚àô·¥æ_ = ‚â°·¥æ-trans

dual-involutive : ‚àÄ P ‚Üí dual (dual P) ‚â°·¥æ P
dual-involutive end       = end
dual-involutive (com q P) = com (dual·¥µ·¥º-involutive q) Œª m ‚Üí dual-involutive (P m)

module _ {{_ : FunExt}} where
    ‚â°·¥æ-sound : ‚àÄ {P Q} ‚Üí P ‚â°·¥æ Q ‚Üí P ‚â° Q
    ‚â°·¥æ-sound end            = refl
    ‚â°·¥æ-sound (com refl P‚â°Q) = ap (com _) (Œª= Œª m ‚Üí ‚â°·¥æ-sound (P‚â°Q m))

    ‚â°·¥æ-cong : ‚àÄ {P Q} (f : Proto ‚Üí Proto) ‚Üí P ‚â°·¥æ Q ‚Üí f P ‚â°·¥æ f Q
    ‚â°·¥æ-cong f P‚â°Q = ‚â°·¥æ-reflexive (ap f (‚â°·¥æ-sound P‚â°Q))

    dual-equiv : Is-equiv dual
    dual-equiv = self-inv-is-equiv (‚â°·¥æ-sound ‚àò dual-involutive)

    dual-inj : ‚àÄ {P Q} ‚Üí dual P ‚â° dual Q ‚Üí P ‚â° Q
    dual-inj = Is-equiv.injective dual-equiv

source-of-idempotent : ‚àÄ P ‚Üí source-of (source-of P) ‚â°·¥æ source-of P
source-of-idempotent end       = end
source-of-idempotent (com _ P) = com refl Œª m ‚Üí source-of-idempotent (P m)

source-of-dual-oblivious : ‚àÄ P ‚Üí source-of (dual P) ‚â°·¥æ source-of P
source-of-dual-oblivious end       = end
source-of-dual-oblivious (com _ P) = com refl Œª m ‚Üí source-of-dual-oblivious (P m)

sink-of : Proto ‚Üí Proto
sink-of = dual ‚àò source-of

Sink : Proto ‚Üí ‚òÖ
Sink P = ‚ü¶ sink-of P ‚üß

sink : ‚àÄ P ‚Üí Sink P
sink end         = _
sink (com _ P) x = sink (P x)

module _ {{_ : FunExt}} where
    sink-contr : ‚àÄ P s ‚Üí sink P ‚â° s
    sink-contr end       s = refl
    sink-contr (com _ P) s = Œª= Œª m ‚Üí sink-contr (P m) (s m)

    Sink-is-contr : ‚àÄ P ‚Üí Is-contr (Sink P)
    Sink-is-contr P = sink P , sink-contr P

    ùüô‚âÉSink : ‚àÄ P ‚Üí ùüô ‚âÉ Sink P
    ùüô‚âÉSink P = Is-contr-to-Is-equiv.ùüô‚âÉ (Sink-is-contr P)

Log : Proto ‚Üí ‚òÖ
Log P = ‚ü¶ source-of P ‚üß

_>>=_ : (P : Proto) ‚Üí (Log P ‚Üí Proto) ‚Üí Proto
end     >>= Q = Q _
com q P >>= Q = com q Œª m ‚Üí P m >>= Œª ms ‚Üí Q (m , ms)

_>>_ : Proto ‚Üí Proto ‚Üí Proto
P >> Q = P >>= Œª _ ‚Üí Q

replicate·¥æ : ‚Ñï ‚Üí Proto ‚Üí Proto
replicate·¥æ 0       P = end
replicate·¥æ (suc n) P = P >> replicate·¥æ n P

++Log : ‚àÄ (P : Proto){Q : Log P ‚Üí Proto} (xs : Log P) ‚Üí Log (Q xs) ‚Üí Log (P >>= Q)
++Log end       _        ys = ys
++Log (com q P) (x , xs) ys = x , ++Log (P x) xs ys

>>=-right-unit : ‚àÄ P ‚Üí (P >> end) ‚â°·¥æ P
>>=-right-unit end       = end
>>=-right-unit (com q P) = com refl Œª m ‚Üí >>=-right-unit (P m)

>>=-assoc : ‚àÄ (P : Proto)(Q : Log P ‚Üí Proto)(R : Log (P >>= Q) ‚Üí Proto)
            ‚Üí P >>= (Œª x ‚Üí Q x >>= (Œª y ‚Üí R (++Log P x y))) ‚â°·¥æ ((P >>= Q) >>= R)
>>=-assoc end       Q R = ‚â°·¥æ-refl (Q _ >>= R)
>>=-assoc (com q P) Q R = com refl Œª m ‚Üí >>=-assoc (P m) (Œª ms ‚Üí Q (m , ms)) (Œª ms ‚Üí R (m , ms))

data Accept? : ‚òÖ where
  accept reject : Accept?
data Is-accept : Accept? ‚Üí ‚òÖ where
  accept : Is-accept accept

data End? : ‚òÖ where
  end continue : End?

End?·¥æ : Proto ‚Üí Proto
End?·¥æ P = Œ£·¥æ End? Œª { end ‚Üí end ; continue ‚Üí P }

module _ {A : ‚òÖ} (A·¥æ : A ‚Üí Proto) where
    addŒ£·¥æ : Proto ‚Üí Proto
    addŒ£·¥æ end      = end
    addŒ£·¥æ (Œ£·¥æ M P) = Œ£·¥æ (M ‚äé A) [inl: (Œª m ‚Üí addŒ£·¥æ (P m)) ,inr: A·¥æ ]
    addŒ£·¥æ (Œ†·¥æ M P) = Œ†·¥æ M Œª m ‚Üí addŒ£·¥æ (P m)

    addŒ†·¥æ : Proto ‚Üí Proto
    addŒ†·¥æ end      = end
    addŒ†·¥æ (Œ†·¥æ M P) = Œ†·¥æ (M ‚äé A) [inl: (Œª m ‚Üí addŒ†·¥æ (P m)) ,inr: A·¥æ ]
    addŒ†·¥æ (Œ£·¥æ M P) = Œ£·¥æ M Œª m ‚Üí addŒ†·¥æ (P m)

module _ {A : ‚òÖ} (A·¥æ : A ‚Üí Proto) where
    dual-addŒ£·¥æ : ‚àÄ P ‚Üí dual (addŒ£·¥æ A·¥æ P) ‚â°·¥æ addŒ†·¥æ (dual ‚àò A·¥æ) (dual P)
    dual-addŒ£·¥æ end      = end
    dual-addŒ£·¥æ (Œ†·¥æ M P) = com refl (Œª m ‚Üí dual-addŒ£·¥æ (P m))
    dual-addŒ£·¥æ (Œ£·¥æ M P) = com refl [inl: (Œª m ‚Üí dual-addŒ£·¥æ (P m))
                                   ,inr: (Œª x ‚Üí ‚â°·¥æ-refl (dual (A·¥æ x))) ]

data Abort : ‚òÖ where abort : Abort

Abort·¥æ : Abort ‚Üí Proto
Abort·¥æ _ = end

add-abort : Proto ‚Üí Proto
add-abort = addŒ£·¥æ Abort·¥æ

telecom : ‚àÄ P ‚Üí ‚ü¶ P ‚üß ‚Üí ‚ü¶ P ‚ä•‚üß ‚Üí Log P
telecom end      _       _       = _
telecom (Œ†·¥æ M P) p       (m , q) = m , telecom (P m) (p m) q
telecom (Œ£·¥æ M P) (m , p) q       = m , telecom (P m) p (q m)

lift·¥æ : ‚àÄ a {‚Ñì} ‚Üí Proto_ ‚Ñì ‚Üí Proto_ (a ‚äî ‚Ñì)
lift·¥æ a end        = end
lift·¥æ a (com io P) = com io Œª m ‚Üí lift·¥æ a (P (lower {‚Ñì = a} m))

lift-proc : ‚àÄ a {‚Ñì} (P : Proto_ ‚Ñì) ‚Üí ‚ü¶ P ‚üß ‚Üí ‚ü¶ lift·¥æ a P ‚üß
lift-proc a {‚Ñì} P0 p0 = lift-view (view-proc P0 p0)
  where
    lift-view : ‚àÄ {P : Proto_ ‚Ñì}{p : ‚ü¶ P ‚üß} ‚Üí ViewProc P p ‚Üí ‚ü¶ lift·¥æ a P ‚üß
    lift-view (send M P m p) = lift m , lift-proc _ (P m) p
    lift-view (recv M P x)   = Œª { (lift m) ‚Üí lift-proc _ (P m) (x m) }
    lift-view end            = end

module MonomorphicSky (P : Proto‚ÇÄ) where
  Cloud : Proto‚ÇÄ
  Cloud = Œ†·¥æ ‚ü¶ P  ‚üß  Œª p ‚Üí
          Œ†·¥æ ‚ü¶ P ‚ä•‚üß  Œª p‚ä• ‚Üí
          Œ£·¥æ (Log P) Œª log ‚Üí
          end
  cloud : ‚ü¶ Cloud ‚üß
  cloud p p‚ä• = telecom P p p‚ä• , _

module PolySky where
  Cloud : Proto_ ‚ÇÅ
  Cloud = Œ†·¥æ Proto‚ÇÄ         Œª P ‚Üí
          lift·¥æ ‚ÇÅ (MonomorphicSky.Cloud P)
  cloud : ‚ü¶ Cloud ‚üß
  cloud P = lift-proc ‚ÇÅ (MonomorphicSky.Cloud P) (MonomorphicSky.cloud P)

module PolySky' where
  Cloud : Proto_ ‚ÇÅ
  Cloud = Œ†·¥æ Proto‚ÇÄ         Œª P ‚Üí
         Œ†·¥æ (Lift ‚ü¶ P  ‚üß)  Œª p ‚Üí
         Œ†·¥æ (Lift ‚ü¶ P ‚ä•‚üß)  Œª p‚ä• ‚Üí
         Œ£·¥æ (Lift (Log P)) Œª log ‚Üí
         end
  cloud : ‚ü¶ Cloud ‚üß
  cloud P (lift p) (lift p‚ä•) = lift (telecom P p p‚ä•) , _

data Choreo (I : ‚òÖ) : ‚òÖ‚ÇÅ where
  _-[_]‚Üí_‚Åè_ : (A : I) (M : ‚òÖ) (B : I) (‚ÑÇ : ..(m : M) ‚Üí Choreo I) ‚Üí Choreo I
  _-[_]‚Üí‚òÖ‚Åè_ : (A : I) (M : ‚òÖ)         (‚ÑÇ :   (m : M) ‚Üí Choreo I) ‚Üí Choreo I
  end       : Choreo I

module _ {I : ‚òÖ} where 
    _-[_]‚Üí√∏‚Åè_ : ‚àÄ (A : I) (M : ‚òÖ)         (‚ÑÇ : ..(m : M) ‚Üí Choreo I) ‚Üí Choreo I
    A -[ M ]‚Üí√∏‚Åè ‚ÑÇ = A -[ ‚òê M ]‚Üí‚òÖ‚Åè Œª { [ m ] ‚Üí ‚ÑÇ m }

    _//_ : (‚ÑÇ : Choreo I) (p : I ‚Üí ùüö) ‚Üí Proto
    (A -[ M ]‚Üí B ‚Åè ‚ÑÇ) // p = case p A
                               0: case p B
                                    0: Œ†·¥æ (‚òê M) (Œª { [ m ] ‚Üí ‚ÑÇ m // p })
                                    1: Œ†·¥æ M     (Œª     m   ‚Üí ‚ÑÇ m // p)
                               1: Œ£·¥æ M (Œª m ‚Üí ‚ÑÇ m // p)
    (A -[ M ]‚Üí‚òÖ‚Åè   ‚ÑÇ) // p = com (case p A 0: In 1: Out) Œª m ‚Üí ‚ÑÇ m // p
    end               // p = end

    ‚ÑÇObserver : Choreo I ‚Üí Proto
    ‚ÑÇObserver ‚ÑÇ = ‚ÑÇ // Œª _ ‚Üí 0‚ÇÇ

    ‚ÑÇLog : Choreo I ‚Üí Proto
    ‚ÑÇLog ‚ÑÇ = ‚ÑÇ // Œª _ ‚Üí 1‚ÇÇ

    ‚ÑÇLog-IsSource : ‚àÄ ‚ÑÇ ‚Üí IsSource (‚ÑÇLog ‚ÑÇ)
    ‚ÑÇLog-IsSource (A -[ M ]‚Üí B ‚Åè ‚ÑÇ) = com M Œª m ‚Üí ‚ÑÇLog-IsSource (‚ÑÇ m)
    ‚ÑÇLog-IsSource (A -[ M ]‚Üí‚òÖ‚Åè   ‚ÑÇ) = com M Œª m ‚Üí ‚ÑÇLog-IsSource (‚ÑÇ m)
    ‚ÑÇLog-IsSource end               = end

    ‚ÑÇObserver-IsSink : ‚àÄ ‚ÑÇ ‚Üí IsSink (‚ÑÇObserver ‚ÑÇ)
    ‚ÑÇObserver-IsSink (A -[ M ]‚Üí B ‚Åè ‚ÑÇ) = com (‚òê M) Œª { [ m ] ‚Üí ‚ÑÇObserver-IsSink (‚ÑÇ m) }
    ‚ÑÇObserver-IsSink (A -[ M ]‚Üí‚òÖ‚Åè   ‚ÑÇ) = com M Œª m ‚Üí ‚ÑÇObserver-IsSink (‚ÑÇ m)
    ‚ÑÇObserver-IsSink end = end

    data R : (p q r : ùüö) ‚Üí ‚òÖ where
      R011 : R 0‚ÇÇ 1‚ÇÇ 1‚ÇÇ
      R101 : R 1‚ÇÇ 0‚ÇÇ 1‚ÇÇ
      R000 : R 0‚ÇÇ 0‚ÇÇ 0‚ÇÇ
    R¬∞ : ‚àÄ {I : ‚òÖ} (p q r : I ‚Üí ùüö) ‚Üí ‚òÖ
    R¬∞ p q r = ‚àÄ i ‚Üí R (p i) (q i) (r i)

    module _ {p q r : I ‚Üí ùüö} where
        choreo-merge : (‚ÑÇ : Choreo I)(pqr : R¬∞ p q r) ‚Üí ‚ü¶ ‚ÑÇ // p ‚üß ‚Üí ‚ü¶ ‚ÑÇ // q ‚üß ‚Üí ‚ü¶ ‚ÑÇ // r ‚üß
        choreo-merge (A -[ M ]‚Üí B ‚Åè ‚ÑÇ) pqr ‚ÑÇp ‚ÑÇq with p A | q A | r A | pqr A | p B | q B | r B | pqr B
        choreo-merge (A -[ M ]‚Üí B ‚Åè ‚ÑÇ) pqr ‚ÑÇp (m , ‚ÑÇq) | .0‚ÇÇ |  1‚ÇÇ | .1‚ÇÇ | R011 |  1‚ÇÇ | .0‚ÇÇ | .1‚ÇÇ | R101 = m , choreo-merge (‚ÑÇ m) pqr (‚ÑÇp m) ‚ÑÇq
        choreo-merge (A -[ M ]‚Üí B ‚Åè ‚ÑÇ) pqr ‚ÑÇp (m , ‚ÑÇq) | .0‚ÇÇ |  1‚ÇÇ | .1‚ÇÇ | R011 |  0‚ÇÇ |  _  |  _  | _    = m , choreo-merge (‚ÑÇ m) pqr (‚ÑÇp [ m ]) ‚ÑÇq
        choreo-merge (A -[ M ]‚Üí B ‚Åè ‚ÑÇ) pqr (m , ‚ÑÇp) ‚ÑÇq |  1‚ÇÇ | .0‚ÇÇ | .1‚ÇÇ | R101 | .0‚ÇÇ |  1‚ÇÇ | .1‚ÇÇ | R011 = m , choreo-merge (‚ÑÇ m) pqr ‚ÑÇp (‚ÑÇq m)
        choreo-merge (A -[ M ]‚Üí B ‚Åè ‚ÑÇ) pqr (m , ‚ÑÇp) ‚ÑÇq |  1‚ÇÇ | .0‚ÇÇ | .1‚ÇÇ | R101 |  _  |  0‚ÇÇ |  _  | _    = m , choreo-merge (‚ÑÇ m) pqr ‚ÑÇp (‚ÑÇq [ m ])
        choreo-merge (A -[ M ]‚Üí B ‚Åè ‚ÑÇ) pqr ‚ÑÇp ‚ÑÇq       | .0‚ÇÇ |  0‚ÇÇ | .0‚ÇÇ | R000 | .0‚ÇÇ |  1‚ÇÇ | .1‚ÇÇ | R011 = Œª m ‚Üí choreo-merge (‚ÑÇ m) pqr (‚ÑÇp [ m ]) (‚ÑÇq m)
        choreo-merge (A -[ M ]‚Üí B ‚Åè ‚ÑÇ) pqr ‚ÑÇp ‚ÑÇq       | .0‚ÇÇ |  0‚ÇÇ | .0‚ÇÇ | R000 |  1‚ÇÇ | .0‚ÇÇ | .1‚ÇÇ | R101 = Œª m ‚Üí choreo-merge (‚ÑÇ m) pqr (‚ÑÇp m) (‚ÑÇq [ m ])
        choreo-merge (A -[ M ]‚Üí B ‚Åè ‚ÑÇ) pqr ‚ÑÇp ‚ÑÇq       | .0‚ÇÇ |  0‚ÇÇ | .0‚ÇÇ | R000 |  0‚ÇÇ |  0‚ÇÇ | .0‚ÇÇ | R000 = Œª { [ m ] ‚Üí choreo-merge (‚ÑÇ m) pqr (‚ÑÇp [ m ]) (‚ÑÇq [ m ]) }
        choreo-merge (A -[ M ]‚Üí‚òÖ‚Åè ‚ÑÇ) pqr ‚ÑÇp ‚ÑÇq with p A | q A | r A | pqr A
        choreo-merge (A -[ M ]‚Üí‚òÖ‚Åè ‚ÑÇ) pqr ‚ÑÇp (m , ‚ÑÇq) | .0‚ÇÇ |  1‚ÇÇ | .1‚ÇÇ | R011 = m , choreo-merge (‚ÑÇ m) pqr (‚ÑÇp m) ‚ÑÇq
        choreo-merge (A -[ M ]‚Üí‚òÖ‚Åè ‚ÑÇ) pqr (m , ‚ÑÇp) ‚ÑÇq |  1‚ÇÇ | .0‚ÇÇ | .1‚ÇÇ | R101 = m , choreo-merge (‚ÑÇ m) pqr ‚ÑÇp (‚ÑÇq m)
        choreo-merge (A -[ M ]‚Üí‚òÖ‚Åè ‚ÑÇ) pqr ‚ÑÇp ‚ÑÇq       | .0‚ÇÇ |  0‚ÇÇ | .0‚ÇÇ | R000 = Œª m ‚Üí choreo-merge (‚ÑÇ m) pqr (‚ÑÇp m) (‚ÑÇq m)
        choreo-merge end pqr ‚ÑÇp ‚ÑÇq = _

        {-
    module _ {p q r pq qr pqr : I ‚Üí ùüö} where
        choreo-merge-assoc : (‚ÑÇ : Choreo I)(Rpqr : R¬∞ p qr pqr)(Rqr : R¬∞ q r qr)(Rpqr' : R¬∞ pq r pqr)(Rpq : R¬∞ p q pq) ‚Üí
                             (‚ÑÇp : ‚ü¶ ‚ÑÇ // p ‚üß) (‚ÑÇq : ‚ü¶ ‚ÑÇ // q ‚üß) (‚ÑÇr : ‚ü¶ ‚ÑÇ // r ‚üß)
                             ‚Üí choreo-merge ‚ÑÇ Rpqr ‚ÑÇp (choreo-merge ‚ÑÇ Rqr ‚ÑÇq ‚ÑÇr) ‚â° choreo-merge ‚ÑÇ Rpqr' (choreo-merge ‚ÑÇ Rpq ‚ÑÇp ‚ÑÇq) ‚ÑÇr
        choreo-merge-assoc = {!!}
        -}

    R-p-¬¨p-1 : ‚àÄ (p : I ‚Üí ùüö) i ‚Üí R (p i) (not (p i)) 1‚ÇÇ
    R-p-¬¨p-1 p i with p i
    R-p-¬¨p-1 p i | 1‚ÇÇ = R101
    R-p-¬¨p-1 p i | 0‚ÇÇ = R011

    choreo-bi : {p : I ‚Üí ùüö}(‚ÑÇ : Choreo I) ‚Üí ‚ü¶ ‚ÑÇ // p ‚üß ‚Üí ‚ü¶ ‚ÑÇ // (not ‚àò p) ‚üß ‚Üí ‚ü¶ ‚ÑÇLog ‚ÑÇ ‚üß
    choreo-bi {p} ‚ÑÇ ‚ÑÇp ‚ÑÇ¬¨p = choreo-merge ‚ÑÇ (R-p-¬¨p-1 p) ‚ÑÇp ‚ÑÇ¬¨p

choreo2 : (‚ÑÇ : Choreo ùüö) ‚Üí ‚ü¶ ‚ÑÇ // id ‚üß ‚Üí ‚ü¶ ‚ÑÇ // not ‚üß ‚Üí ‚ü¶ ‚ÑÇLog ‚ÑÇ ‚üß
choreo2 = choreo-bi

module Choreo3 where
  data ùüõ : ‚òÖ where
    0‚ÇÉ 1‚ÇÉ 2‚ÇÉ : ùüõ
  0‚ÇÉ? 1‚ÇÉ? 2‚ÇÉ? : ùüõ ‚Üí ùüö
  0‚ÇÉ? 0‚ÇÉ = 1‚ÇÇ
  0‚ÇÉ? _  = 0‚ÇÇ
  1‚ÇÉ? 1‚ÇÉ = 1‚ÇÇ
  1‚ÇÉ? _  = 0‚ÇÇ
  2‚ÇÉ? 2‚ÇÉ = 1‚ÇÇ
  2‚ÇÉ? _  = 0‚ÇÇ

  choreo3 : (‚ÑÇ : Choreo ùüõ) ‚Üí ‚ü¶ ‚ÑÇ // 0‚ÇÉ? ‚üß ‚Üí ‚ü¶ ‚ÑÇ // 1‚ÇÉ? ‚üß ‚Üí ‚ü¶ ‚ÑÇ // 2‚ÇÉ? ‚üß ‚Üí ‚ü¶ ‚ÑÇLog ‚ÑÇ ‚üß
  choreo3 (0‚ÇÉ -[ M ]‚Üí 0‚ÇÉ ‚Åè ‚ÑÇ) (m , p0) p1 p2 = m , choreo3 (‚ÑÇ m) p0 (p1 [ m ]) (p2 [ m ])
  choreo3 (0‚ÇÉ -[ M ]‚Üí 1‚ÇÉ ‚Åè ‚ÑÇ) (m , p0) p1 p2 = m , choreo3 (‚ÑÇ m) p0 (p1 m) (p2 [ m ])
  choreo3 (0‚ÇÉ -[ M ]‚Üí 2‚ÇÉ ‚Åè ‚ÑÇ) (m , p0) p1 p2 = m , choreo3 (‚ÑÇ m) p0 (p1 [ m ]) (p2 m)
  choreo3 (1‚ÇÉ -[ M ]‚Üí 0‚ÇÉ ‚Åè ‚ÑÇ) p0 (m , p1) p2 = m , choreo3 (‚ÑÇ m) (p0 m) p1 (p2 [ m ])
  choreo3 (1‚ÇÉ -[ M ]‚Üí 1‚ÇÉ ‚Åè ‚ÑÇ) p0 (m , p1) p2 = m , choreo3 (‚ÑÇ m) (p0 [ m ]) p1 (p2 [ m ])
  choreo3 (1‚ÇÉ -[ M ]‚Üí 2‚ÇÉ ‚Åè ‚ÑÇ) p0 (m , p1) p2 = m , choreo3 (‚ÑÇ m) (p0 [ m ]) p1 (p2 m)
  choreo3 (2‚ÇÉ -[ M ]‚Üí 0‚ÇÉ ‚Åè ‚ÑÇ) p0 p1 (m , p2) = m , choreo3 (‚ÑÇ m) (p0 m) (p1 [ m ]) p2
  choreo3 (2‚ÇÉ -[ M ]‚Üí 1‚ÇÉ ‚Åè ‚ÑÇ) p0 p1 (m , p2) = m , choreo3 (‚ÑÇ m) (p0 [ m ]) (p1 m) p2
  choreo3 (2‚ÇÉ -[ M ]‚Üí 2‚ÇÉ ‚Åè ‚ÑÇ) p0 p1 (m , p2) = m , choreo3 (‚ÑÇ m) (p0 [ m ]) (p1 [ m ]) p2
  choreo3 (0‚ÇÉ -[ M ]‚Üí‚òÖ‚Åè    ‚ÑÇ) (m , p0) p1 p2 = m , choreo3 (‚ÑÇ m) p0 (p1 m) (p2 m)
  choreo3 (1‚ÇÉ -[ M ]‚Üí‚òÖ‚Åè    ‚ÑÇ) p0 (m , p1) p2 = m , choreo3 (‚ÑÇ m) (p0 m) p1 (p2 m)
  choreo3 (2‚ÇÉ -[ M ]‚Üí‚òÖ‚Åè    ‚ÑÇ) p0 p1 (m , p2) = m , choreo3 (‚ÑÇ m) (p0 m) (p1 m) p2
  choreo3 end p0 p1 p2 = _

  choreo3' : (‚ÑÇ : Choreo ùüõ) ‚Üí ‚ü¶ ‚ÑÇ // 0‚ÇÉ? ‚üß ‚Üí ‚ü¶ ‚ÑÇ // 1‚ÇÉ? ‚üß ‚Üí ‚ü¶ ‚ÑÇ // 2‚ÇÉ? ‚üß ‚Üí ‚ü¶ ‚ÑÇLog ‚ÑÇ ‚üß
  choreo3' ‚ÑÇ p0 p1 p2 = choreo-merge ‚ÑÇ (R-p-¬¨p-1 0‚ÇÉ?) p0 (choreo-merge ‚ÑÇ R-1-2-¬¨0 p1 p2)
     where R-1-2-¬¨0 : ‚àÄ i ‚Üí R (1‚ÇÉ? i) (2‚ÇÉ? i) (not (0‚ÇÉ? i))
           R-1-2-¬¨0 0‚ÇÉ = R000
           R-1-2-¬¨0 1‚ÇÉ = R101
           R-1-2-¬¨0 2‚ÇÉ = R011

>>=-com : (P : Proto){Q : Log P ‚Üí Proto}{R : Log P ‚Üí Proto}
          ‚Üí ‚ü¶ P >>= Q  ‚üß
          ‚Üí ‚ü¶ P >>= R ‚ä•‚üß
          ‚Üí Œ£ (Log P) (Œª t ‚Üí ‚ü¶ Q t ‚üß √ó ‚ü¶ R t ‚ä•‚üß)
>>=-com end      p0       p1       = _ , p0 , p1
>>=-com (Œ£·¥æ M P) (m , p0) p1       = first (_,_ m) (>>=-com (P m) p0 (p1 m))
>>=-com (Œ†·¥æ M P) p0       (m , p1) = first (_,_ m) (>>=-com (P m) (p0 m) p1)

>>-com : (P : Proto){Q R : Proto}
       ‚Üí ‚ü¶ P >> Q  ‚üß
       ‚Üí ‚ü¶ P >> R ‚ä•‚üß
       ‚Üí Log P √ó ‚ü¶ Q ‚üß √ó ‚ü¶ R ‚ä•‚üß
>>-com P p q = >>=-com P p q

module ClientServerV1 (Query : ‚òÖ‚ÇÄ) (Resp : Query ‚Üí ‚òÖ‚ÇÄ) (P : Proto) where
    Client : ‚Ñï ‚Üí Proto
    Client zero    = P
    Client (suc n) = Œ£·¥æ Query Œª q ‚Üí Œ†·¥æ (Resp q) Œª r ‚Üí Client n

    Server : ‚Ñï ‚Üí Proto
    Server zero    = P
    Server (suc n) = Œ†·¥æ Query Œª q ‚Üí Œ£·¥æ (Resp q) Œª r ‚Üí Server n

module ClientServerV2 (Query : ‚òÖ‚ÇÄ) (Resp : Query ‚Üí ‚òÖ‚ÇÄ) where
    ClientRound ServerRound : Proto
    ClientRound = Œ£·¥æ Query Œª q ‚Üí Œ†·¥æ (Resp q) Œª r ‚Üí end
    ServerRound = dual ClientRound

    Client Server : ‚Ñï ‚Üí Proto
    Client n = replicate·¥æ n ClientRound
    Server = dual ‚àò Client

    DynamicServer StaticServer : Proto
    DynamicServer = Œ†·¥æ ‚Ñï Œª n ‚Üí
                    Server n
    StaticServer  = Œ£·¥æ ‚Ñï Œª n ‚Üí
                    Server n

    module PureServer (serve : Œ† Query Resp) where
      server : ‚àÄ n ‚Üí ‚ü¶ Server n ‚üß
      server zero      = _
      server (suc n) q = serve q , server n

module _ {{_ : FunExt}} where
  dual-Log : ‚àÄ P ‚Üí Log (dual P) ‚â° Log P
  dual-Log P = ap ‚ü¶_‚üß (‚â°·¥æ-sound (source-of-dual-oblivious P))

dual->> : ‚àÄ P Q ‚Üí dual (P >> Q) ‚â°·¥æ dual P >> dual Q
dual->> end      Q = ‚â°·¥æ-refl _
dual->> (Œ†·¥æ _ P) Q = com refl Œª m ‚Üí dual->> (P m) Q
dual->> (Œ£·¥æ _ P) Q = com refl Œª m ‚Üí dual->> (P m) Q

  {- ohoh!
  dual->>= : ‚àÄ P (Q : Log P ‚Üí Proto) ‚Üí dual (P >>= Q) ‚â°·¥æ dual P >>= (dual ‚àò Q ‚àò subst id (dual-Log P))
  dual->>= end Q = ‚â°·¥æ-refl _
  dual->>= (Œ†·¥æ M P) Q = ProtoRel.com refl M (Œª m ‚Üí {!dual->>= (P m) (Q ‚àò _,_ m)!})
  dual->>= (Œ£·¥æ M P) Q = ProtoRel.com refl M (Œª m ‚Üí {!!})
  -}

module _ {{_ : FunExt}} (P : Proto) where
    dual-replicate·¥æ : ‚àÄ n ‚Üí dual (replicate·¥æ n P) ‚â°·¥æ replicate·¥æ n (dual P)
    dual-replicate·¥æ zero    = end
    dual-replicate·¥æ (suc n) = dual->> P (replicate·¥æ n P) ‚àô·¥æ ‚â°·¥æ-cong (_>>_ (dual P)) (dual-replicate·¥æ n)

data LR : ‚òÖ where
  `L `R : LR

[L:_R:_] : ‚àÄ {‚Ñì}{C : LR ‚Üí ‚òÖ_ ‚Ñì}(l : C `L)(r : C `R)(lr : LR) ‚Üí C lr
[L: l R: r ] `L = l
[L: l R: r ] `R = r

_‚äï·¥æ_ : (l r : Proto) ‚Üí Proto
l ‚äï·¥æ r = Œ£·¥æ LR [L: l R: r ]

_&·¥æ_ : (l r : Proto) ‚Üí Proto
l &·¥æ r = Œ†·¥æ LR [L: l R: r ]

module _ {P Q R S} where
    ‚äï·¥æ-map : (‚ü¶ P ‚üß ‚Üí ‚ü¶ Q ‚üß) ‚Üí (‚ü¶ R ‚üß ‚Üí ‚ü¶ S ‚üß) ‚Üí ‚ü¶ P ‚äï·¥æ R ‚üß ‚Üí ‚ü¶ Q ‚äï·¥æ S ‚üß
    ‚äï·¥æ-map f g (`L , pr) = `L , f pr
    ‚äï·¥æ-map f g (`R , pr) = `R , g pr

    &·¥æ-map : (‚ü¶ P ‚üß ‚Üí ‚ü¶ Q ‚üß) ‚Üí (‚ü¶ R ‚üß ‚Üí ‚ü¶ S ‚üß) ‚Üí ‚ü¶ P &·¥æ R ‚üß ‚Üí ‚ü¶ Q &·¥æ S ‚üß
    &·¥æ-map f g p `L = f (p `L)
    &·¥æ-map f g p `R = g (p `R)

module _ {P Q} where
    ‚äï·¥æ‚Üí‚äé : ‚ü¶ P ‚äï·¥æ Q ‚üß ‚Üí ‚ü¶ P ‚üß ‚äé ‚ü¶ Q ‚üß
    ‚äï·¥æ‚Üí‚äé (`L , p) = inl p
    ‚äï·¥æ‚Üí‚äé (`R , q) = inr q

    ‚äé‚Üí‚äï·¥æ : ‚ü¶ P ‚üß ‚äé ‚ü¶ Q ‚üß ‚Üí ‚ü¶ P ‚äï·¥æ Q ‚üß
    ‚äé‚Üí‚äï·¥æ (inl p) = `L , p
    ‚äé‚Üí‚äï·¥æ (inr q) = `R , q

    ‚äé‚Üí‚äï·¥æ‚Üí‚äé : ‚àÄ x ‚Üí ‚äé‚Üí‚äï·¥æ (‚äï·¥æ‚Üí‚äé x) ‚â° x
    ‚äé‚Üí‚äï·¥æ‚Üí‚äé (`L , _) = refl
    ‚äé‚Üí‚äï·¥æ‚Üí‚äé (`R , _) = refl

    ‚äï·¥æ‚Üí‚äé‚Üí‚äï·¥æ : ‚àÄ x ‚Üí ‚äï·¥æ‚Üí‚äé (‚äé‚Üí‚äï·¥æ x) ‚â° x
    ‚äï·¥æ‚Üí‚äé‚Üí‚äï·¥æ (inl _) = refl
    ‚äï·¥æ‚Üí‚äé‚Üí‚äï·¥æ (inr _) = refl

    ‚äï·¥æ‚âÉ‚äé : ‚ü¶ P ‚äï·¥æ Q ‚üß ‚âÉ (‚ü¶ P ‚üß ‚äé ‚ü¶ Q ‚üß)
    ‚äï·¥æ‚âÉ‚äé = ‚äï·¥æ‚Üí‚äé , record { linv = ‚äé‚Üí‚äï·¥æ ; is-linv = ‚äé‚Üí‚äï·¥æ‚Üí‚äé ; rinv = ‚äé‚Üí‚äï·¥æ ; is-rinv = ‚äï·¥æ‚Üí‚äé‚Üí‚äï·¥æ }

    ‚äï·¥æ‚â°‚äé : {{_ : UA}} ‚Üí ‚ü¶ P ‚äï·¥æ Q ‚üß ‚â° (‚ü¶ P ‚üß ‚äé ‚ü¶ Q ‚üß)
    ‚äï·¥æ‚â°‚äé = ua ‚äï·¥æ‚âÉ‚äé

    &·¥æ‚Üí√ó : ‚ü¶ P &·¥æ Q ‚üß ‚Üí ‚ü¶ P ‚üß √ó ‚ü¶ Q ‚üß
    &·¥æ‚Üí√ó p = p `L , p `R

    √ó‚Üí&·¥æ : ‚ü¶ P ‚üß √ó ‚ü¶ Q ‚üß ‚Üí ‚ü¶ P &·¥æ Q ‚üß
    √ó‚Üí&·¥æ (p , q) `L = p
    √ó‚Üí&·¥æ (p , q) `R = q

    &·¥æ‚Üí√ó‚Üí&·¥æ : ‚àÄ x ‚Üí &·¥æ‚Üí√ó (√ó‚Üí&·¥æ x) ‚â° x
    &·¥æ‚Üí√ó‚Üí&·¥æ (p , q) = refl

    module _ {{_ : FunExt}} where
        √ó‚Üí&·¥æ‚Üí√ó : ‚àÄ x ‚Üí √ó‚Üí&·¥æ (&·¥æ‚Üí√ó x) ‚â° x
        √ó‚Üí&·¥æ‚Üí√ó p = Œª= Œª { `L ‚Üí refl ; `R ‚Üí refl }

        &·¥æ‚âÉ√ó : ‚ü¶ P &·¥æ Q ‚üß ‚âÉ (‚ü¶ P ‚üß √ó ‚ü¶ Q ‚üß)
        &·¥æ‚âÉ√ó = &·¥æ‚Üí√ó , record { linv = √ó‚Üí&·¥æ ; is-linv = √ó‚Üí&·¥æ‚Üí√ó ; rinv = √ó‚Üí&·¥æ ; is-rinv = &·¥æ‚Üí√ó‚Üí&·¥æ }

        &·¥æ‚â°√ó : {{_ : UA}} ‚Üí ‚ü¶ P &·¥æ Q ‚üß ‚â° (‚ü¶ P ‚üß √ó ‚ü¶ Q ‚üß)
        &·¥æ‚â°√ó = ua &·¥æ‚âÉ√ó


module _ where

  _‚Öã·¥æ_ : Proto ‚Üí Proto ‚Üí Proto
  end    ‚Öã·¥æ Q      = Q
  Œ†·¥æ M P ‚Öã·¥æ Q      = Œ†·¥æ M Œª m ‚Üí P m ‚Öã·¥æ Q
  P      ‚Öã·¥æ end    = P
  P      ‚Öã·¥æ Œ†·¥æ M Q = Œ†·¥æ M Œª m ‚Üí P ‚Öã·¥æ Q m
  Œ£·¥æ M P ‚Öã·¥æ Œ£·¥æ N Q = Œ£·¥æ (M ‚äé N) [inl: (Œª m ‚Üí P m ‚Öã·¥æ Œ£·¥æ N Q)
                                ,inr: (Œª n ‚Üí Œ£·¥æ M P ‚Öã·¥æ Q n) ]

  _‚äó·¥æ_ : Proto ‚Üí Proto ‚Üí Proto
  end    ‚äó·¥æ Q      = Q
  Œ£·¥æ M P ‚äó·¥æ Q      = Œ£·¥æ M Œª m ‚Üí P m ‚äó·¥æ Q
  P      ‚äó·¥æ end    = P
  P      ‚äó·¥æ Œ£·¥æ M Q = Œ£·¥æ M Œª m ‚Üí P ‚äó·¥æ Q m
  Œ†·¥æ M P ‚äó·¥æ Œ†·¥æ N Q = Œ†·¥æ (M ‚äé N) [inl: (Œª m ‚Üí P m ‚äó·¥æ Œ†·¥æ N Q)
                                ,inr: (Œª n ‚Üí Œ†·¥æ M P ‚äó·¥æ Q n) ]

  module _ {{_ : FunExt}}{{_ : UA}} where
    ‚äó-sendR : ‚àÄ P{M}(Q : M ‚Üí Proto) ‚Üí ‚ü¶ P ‚äó·¥æ Œ£·¥æ _ Q ‚üß ‚â° (Œ£ M Œª m ‚Üí ‚ü¶ P ‚äó·¥æ Q m ‚üß)
    ‚äó-sendR end      Q = refl
    ‚äó-sendR (Œ†·¥æ _ P) Q = refl
    ‚äó-sendR (Œ£·¥æ _ P) Q = (Œ£=‚Ä≤ _ Œª m ‚Üí ‚äó-sendR (P m) Q) ‚àô Œ£Œ£-comm

    ‚äó-endR : ‚àÄ P ‚Üí ‚ü¶ P ‚äó·¥æ end ‚üß ‚â° ‚ü¶ P ‚üß
    ‚äó-endR end      = refl
    ‚äó-endR (Œ†·¥æ _ _) = refl
    ‚äó-endR (Œ£·¥æ _ P) = Œ£=‚Ä≤ _ Œª m ‚Üí ‚äó-endR (P m)

    ‚äó·¥æ-comm : ‚àÄ P Q ‚Üí ‚ü¶ P ‚äó·¥æ Q ‚üß ‚â° ‚ü¶ Q ‚äó·¥æ P ‚üß
    ‚äó·¥æ-comm end      Q        = ! ‚äó-endR Q
    ‚äó·¥æ-comm (Œ£·¥æ _ P) Q        = (Œ£=‚Ä≤ _ Œª m ‚Üí ‚äó·¥æ-comm (P m) Q) ‚àô ! ‚äó-sendR Q P
    ‚äó·¥æ-comm (Œ†·¥æ _ P) end      = refl
    ‚äó·¥æ-comm (Œ†·¥æ _ P) (Œ£·¥æ _ Q) = Œ£=‚Ä≤ _ Œª m ‚Üí ‚äó·¥æ-comm (Œ†·¥æ _ P) (Q m)
    ‚äó·¥æ-comm (Œ†·¥æ _ P) (Œ†·¥æ _ Q) = Œ†‚âÉ ‚äé-comm-equiv [inl: (Œª m ‚Üí ‚äó·¥æ-comm (P m) (Œ†·¥æ _ Q))
                                                ,inr: (Œª m ‚Üí ‚äó·¥æ-comm (Œ†·¥æ _ P) (Q m)) ]

  module _ {{_ : FunExt}}{{_ : UA}} where
    ‚Öã-recvR : ‚àÄ P{M}(Q : M ‚Üí Proto) ‚Üí ‚ü¶ P ‚Öã·¥æ Œ†·¥æ _ Q ‚üß ‚â° (Œ† M Œª m ‚Üí ‚ü¶ P ‚Öã·¥æ Q m ‚üß)
    ‚Öã-recvR end      Q = refl
    ‚Öã-recvR (Œ£·¥æ _ P) Q = refl
    ‚Öã-recvR (Œ†·¥æ _ P) Q = (Œ†=‚Ä≤ _ Œª m ‚Üí ‚Öã-recvR (P m) Q) ‚àô Œ†Œ†-comm

    ‚Öã-endR : ‚àÄ P ‚Üí ‚ü¶ P ‚Öã·¥æ end ‚üß ‚â° ‚ü¶ P ‚üß
    ‚Öã-endR end      = refl
    ‚Öã-endR (Œ£·¥æ _ _) = refl
    ‚Öã-endR (Œ†·¥æ _ P) = Œ†=‚Ä≤ _ Œª m ‚Üí ‚Öã-endR (P m)

  module _ {{_ : FunExt}}{{_ : UA}} where
    ‚Öã·¥æ-comm : ‚àÄ P Q ‚Üí ‚ü¶ P ‚Öã·¥æ Q ‚üß ‚â° ‚ü¶ Q ‚Öã·¥æ P ‚üß
    ‚Öã·¥æ-comm end      Q        = ! ‚Öã-endR Q
    ‚Öã·¥æ-comm (Œ†·¥æ _ P) Q        = (Œ†=‚Ä≤ _ Œª m ‚Üí ‚Öã·¥æ-comm (P m) Q) ‚àô ! ‚Öã-recvR Q P
    ‚Öã·¥æ-comm (Œ£·¥æ _ P) end      = refl
    ‚Öã·¥æ-comm (Œ£·¥æ _ P) (Œ†·¥æ _ Q) = Œ†=‚Ä≤ _ Œª m ‚Üí ‚Öã·¥æ-comm (Œ£·¥æ _ P) (Q m)
    ‚Öã·¥æ-comm (Œ£·¥æ _ P) (Œ£·¥æ _ Q) = Œ£‚âÉ ‚äé-comm-equiv [inl: (Œª m ‚Üí ‚Öã·¥æ-comm (P m) (Œ£·¥æ _ Q))
                                                ,inr: (Œª m ‚Üí ‚Öã·¥æ-comm (Œ£·¥æ _ P) (Q m)) ]

  module _ {{_ : FunExt}}{{_ : UA}} where
    ‚Öã-assoc : ‚àÄ P Q R ‚Üí ‚ü¶ P ‚Öã·¥æ (Q ‚Öã·¥æ R) ‚üß ‚â° ‚ü¶ (P ‚Öã·¥æ Q) ‚Öã·¥æ R ‚üß
    ‚Öã-assoc end      Q        R        = refl
    ‚Öã-assoc (Œ†·¥æ _ P) Q        R        = Œ†=‚Ä≤ _ Œª m ‚Üí ‚Öã-assoc (P m) Q R
    ‚Öã-assoc (Œ£·¥æ _ P) end      R        = refl
    ‚Öã-assoc (Œ£·¥æ _ P) (Œ†·¥æ _ Q) R        = Œ†=‚Ä≤ _ Œª m ‚Üí ‚Öã-assoc (Œ£·¥æ _ P) (Q m) R
    ‚Öã-assoc (Œ£·¥æ _ P) (Œ£·¥æ _ Q) end      = refl
    ‚Öã-assoc (Œ£·¥æ _ P) (Œ£·¥æ _ Q) (Œ†·¥æ _ R) = Œ†=‚Ä≤ _ Œª m ‚Üí ‚Öã-assoc (Œ£·¥æ _ P) (Œ£·¥æ _ Q) (R m)
    ‚Öã-assoc (Œ£·¥æ _ P) (Œ£·¥æ _ Q) (Œ£·¥æ _ R) = Œ£‚âÉ ‚äé-assoc-equiv
                                             Œª { (inl m)       ‚Üí ‚Öã-assoc (P m) (Œ£·¥æ _ Q) (Œ£·¥æ _ R)
                                               ; (inr (inl m)) ‚Üí ‚Öã-assoc (Œ£·¥æ _ P) (Q m) (Œ£·¥æ _ R)
                                               ; (inr (inr m)) ‚Üí ‚Öã-assoc (Œ£·¥æ _ P) (Œ£·¥æ _ Q) (R m) }

  module _ {P Q R}{{_ : FunExt}} where
    dist-‚äó-‚äï‚Ä≤ : ‚ü¶ (Q ‚äï·¥æ R) ‚äó·¥æ P ‚üß ‚â° ‚ü¶ (Q ‚äó·¥æ P) ‚äï·¥æ (R ‚äó·¥æ P) ‚üß
    dist-‚äó-‚äï‚Ä≤ = Œ£=‚Ä≤ LR [L: refl R: refl ]

    dist-‚Öã-&‚Ä≤ : ‚ü¶ (Q &·¥æ R) ‚Öã·¥æ P ‚üß ‚â° ‚ü¶ (Q ‚Öã·¥æ P) &·¥æ (R ‚Öã·¥æ P) ‚üß
    dist-‚Öã-&‚Ä≤ = Œ†=‚Ä≤ LR [L: refl R: refl ]

    module _ {{_ : UA}} where
        dist-‚äó-‚äï : ‚ü¶ P ‚äó·¥æ (Q ‚äï·¥æ R) ‚üß ‚â° ‚ü¶ (P ‚äó·¥æ Q) ‚äï·¥æ (P ‚äó·¥æ R) ‚üß
        dist-‚äó-‚äï = ‚äó·¥æ-comm P (Q ‚äï·¥æ R)
                 ‚àô dist-‚äó-‚äï‚Ä≤
                 ‚àô ‚äï·¥æ‚â°‚äé
                 ‚àô ‚äé= (‚äó·¥æ-comm Q P) (‚äó·¥æ-comm R P)
                 ‚àô ! ‚äï·¥æ‚â°‚äé

        dist-‚Öã-& : ‚ü¶ P ‚Öã·¥æ (Q &·¥æ R) ‚üß ‚â° ‚ü¶ (P ‚Öã·¥æ Q) &·¥æ (P ‚Öã·¥æ R) ‚üß
        dist-‚Öã-& = ‚Öã·¥æ-comm P (Q &·¥æ R)
                 ‚àô dist-‚Öã-&‚Ä≤
                 ‚àô &·¥æ‚â°√ó
                 ‚àô √ó= (‚Öã·¥æ-comm Q P) (‚Öã·¥æ-comm R P)
                 ‚àô ! &·¥æ‚â°√ó

  -- P ‚ü¶‚äó‚üß Q ‚âÉ ‚ü¶ P ‚äó·¥æ Q ‚üß
  -- but potentially more convenient
  _‚ü¶‚äó‚üß_ : Proto ‚Üí Proto ‚Üí ‚òÖ
  end    ‚ü¶‚äó‚üß Q      = ‚ü¶ Q ‚üß
  Œ£·¥æ M P ‚ü¶‚äó‚üß Q      = Œ£ M Œª m ‚Üí P m ‚ü¶‚äó‚üß Q
  P      ‚ü¶‚äó‚üß end    = ‚ü¶ P ‚üß
  P      ‚ü¶‚äó‚üß Œ£·¥æ M Q = Œ£ M Œª m ‚Üí P ‚ü¶‚äó‚üß Q m
  Œ†·¥æ M P ‚ü¶‚äó‚üß Œ†·¥æ N Q = (Œ† M Œª m ‚Üí P m    ‚ü¶‚äó‚üß Œ†·¥æ N Q)
                    √ó (Œ† N Œª n ‚Üí Œ†·¥æ M P ‚ü¶‚äó‚üß Q n)

  module _ {{_ : FunExt}}{{_ : UA}} where
    ‚ü¶‚äó‚üß-correct : ‚àÄ P Q ‚Üí P ‚ü¶‚äó‚üß Q ‚â° ‚ü¶ P ‚äó·¥æ Q ‚üß
    ‚ü¶‚äó‚üß-correct end      Q        = refl
    ‚ü¶‚äó‚üß-correct (Œ£·¥æ M P) Q        = Œ£=‚Ä≤ M Œª m ‚Üí ‚ü¶‚äó‚üß-correct (P m) Q
    ‚ü¶‚äó‚üß-correct (Œ†·¥æ M P) end      = refl
    ‚ü¶‚äó‚üß-correct (Œ†·¥æ M P) (Œ£·¥æ N Q) = Œ£=‚Ä≤ N Œª n ‚Üí ‚ü¶‚äó‚üß-correct (Œ†·¥æ M P) (Q n)
    ‚ü¶‚äó‚üß-correct (Œ†·¥æ M P) (Œ†·¥æ N Q) = ! dist-√ó-Œ†
                                  ‚àô Œ†=‚Ä≤ (M ‚äé N) Œª { (inl m)  ‚Üí ‚ü¶‚äó‚üß-correct (P m) (Œ†·¥æ N Q)
                                                  ; (inr n) ‚Üí ‚ü¶‚äó‚üß-correct (Œ†·¥æ M P) (Q n) }

  -- an alternative, potentially more convenient
  _‚ü¶‚Öã‚üß_ : Proto ‚Üí Proto ‚Üí ‚òÖ
  end    ‚ü¶‚Öã‚üß Q       = ‚ü¶ Q ‚üß
  Œ†·¥æ M P ‚ü¶‚Öã‚üß Q       = Œ† M Œª m ‚Üí P m ‚ü¶‚Öã‚üß Q
  P      ‚ü¶‚Öã‚üß end     = ‚ü¶ P ‚üß
  P      ‚ü¶‚Öã‚üß Œ†·¥æ M  Q = Œ† M Œª m ‚Üí P ‚ü¶‚Öã‚üß Q m
  Œ£·¥æ M P ‚ü¶‚Öã‚üß Œ£·¥æ N Q = (Œ£ M  Œª m  ‚Üí P m    ‚ü¶‚Öã‚üß Œ£·¥æ N Q)
                     ‚äé (Œ£ N Œª n ‚Üí Œ£·¥æ M P ‚ü¶‚Öã‚üß Q n)

  module _ {{_ : FunExt}}{{_ : UA}} where
    ‚ü¶‚Öã‚üß-correct : ‚àÄ P Q ‚Üí P ‚ü¶‚Öã‚üß Q ‚â° ‚ü¶ P ‚Öã·¥æ Q ‚üß
    ‚ü¶‚Öã‚üß-correct end      Q        = refl
    ‚ü¶‚Öã‚üß-correct (Œ†·¥æ M P) Q        = Œ†=‚Ä≤ M Œª m ‚Üí ‚ü¶‚Öã‚üß-correct (P m) Q
    ‚ü¶‚Öã‚üß-correct (Œ£·¥æ M P) end      = refl
    ‚ü¶‚Öã‚üß-correct (Œ£·¥æ M P) (Œ†·¥æ N Q) = Œ†=‚Ä≤ N Œª n ‚Üí ‚ü¶‚Öã‚üß-correct (Œ£·¥æ M P) (Q n)
    ‚ü¶‚Öã‚üß-correct (Œ£·¥æ M P) (Œ£·¥æ N Q) = ! dist-‚äé-Œ£
                                  ‚àô Œ£=‚Ä≤ (M ‚äé N) Œª { (inl m) ‚Üí ‚ü¶‚Öã‚üß-correct (P m) (Œ£·¥æ N Q)
                                                  ; (inr n) ‚Üí ‚ü¶‚Öã‚üß-correct (Œ£·¥æ M P) (Q n) }

  ‚äó‚Öã-dual : ‚àÄ P Q ‚Üí dual (P ‚Öã·¥æ Q) ‚â°·¥æ dual P ‚äó·¥æ dual Q
  ‚äó‚Öã-dual end Q = ‚â°·¥æ-refl _
  ‚äó‚Öã-dual (Œ†·¥æ _ P) Q = com refl Œª m ‚Üí ‚äó‚Öã-dual (P m) _
  ‚äó‚Öã-dual (Œ£·¥æ _ P) end = ‚â°·¥æ-refl _
  ‚äó‚Öã-dual (Œ£·¥æ _ P) (Œ†·¥æ _ Q) = com refl Œª n ‚Üí ‚äó‚Öã-dual (Œ£·¥æ _ P) (Q n)
  ‚äó‚Öã-dual (Œ£·¥æ _ P) (Œ£·¥æ _ Q) = com refl
    [inl: (Œª m ‚Üí ‚äó‚Öã-dual (P m) (Œ£·¥æ _ Q))
    ,inr: (Œª n ‚Üí ‚äó‚Öã-dual (Œ£·¥æ _ P) (Q n))
    ]

  data View-‚Öã-proto : Proto ‚Üí Proto ‚Üí ‚òÖ‚ÇÅ where
    end-X     : ‚àÄ Q ‚Üí View-‚Öã-proto end Q
    recv-X    : ‚àÄ {M}(P : M ‚Üí Proto)Q ‚Üí View-‚Öã-proto (Œ†·¥æ M P) Q
    send-send : ‚àÄ {M N}(P : M ‚Üí Proto)(Q : N ‚Üí Proto) ‚Üí View-‚Öã-proto (Œ£·¥æ M P) (Œ£·¥æ N Q)
    send-recv : ‚àÄ {M N}(P : M ‚Üí Proto)(Q : N ‚Üí Proto) ‚Üí View-‚Öã-proto (Œ£·¥æ M P) (Œ†·¥æ N Q)
    send-end  : ‚àÄ {M}(P : M ‚Üí Proto) ‚Üí View-‚Öã-proto (Œ£·¥æ M P) end

  view-‚Öã-proto : ‚àÄ P Q ‚Üí View-‚Öã-proto P Q
  view-‚Öã-proto end      Q        = end-X Q
  view-‚Öã-proto (Œ†·¥æ _ P) Q        = recv-X P Q
  view-‚Öã-proto (Œ£·¥æ _ P) end      = send-end P
  view-‚Öã-proto (Œ£·¥æ _ P) (Œ†·¥æ _ Q) = send-recv P Q
  view-‚Öã-proto (Œ£·¥æ _ P) (Œ£·¥æ _ Q) = send-send P Q

  data View-‚äó-proto : Proto ‚Üí Proto ‚Üí ‚òÖ‚ÇÅ where
    end-X     : ‚àÄ Q ‚Üí View-‚äó-proto end Q
    send-X    : ‚àÄ {M}(P : M ‚Üí Proto)Q ‚Üí View-‚äó-proto (Œ£·¥æ M P) Q
    recv-recv : ‚àÄ {M N}(P : M ‚Üí Proto)(Q : N ‚Üí Proto) ‚Üí View-‚äó-proto (Œ†·¥æ M P) (Œ†·¥æ N Q)
    recv-send : ‚àÄ {M N}(P : M ‚Üí Proto)(Q : N ‚Üí Proto) ‚Üí View-‚äó-proto (Œ†·¥æ M P) (Œ£·¥æ N Q)
    recv-end  : ‚àÄ {M}(P : M ‚Üí Proto) ‚Üí View-‚äó-proto (Œ†·¥æ M P) end

  view-‚äó-proto : ‚àÄ P Q ‚Üí View-‚äó-proto P Q
  view-‚äó-proto end      Q        = end-X Q
  view-‚äó-proto (Œ£·¥æ _ P) Q        = send-X P Q
  view-‚äó-proto (Œ†·¥æ _ P) end      = recv-end P
  view-‚äó-proto (Œ†·¥æ _ P) (Œ†·¥æ _ Q) = recv-recv P Q
  view-‚äó-proto (Œ†·¥æ _ P) (Œ£·¥æ _ Q) = recv-send P Q

  -- the terminology used for the constructor follows the behavior of the combined process
  data View-‚Öã : ‚àÄ P Q ‚Üí ‚ü¶ P ‚Öã·¥æ Q ‚üß ‚Üí ‚òÖ‚ÇÅ where
    sendL' : ‚àÄ {M N}(P : M ‚Üí Proto)(Q : N ‚Üí Proto)(m  : M )(p : ‚ü¶ P m ‚Öã·¥æ Œ£·¥æ N Q ‚üß) ‚Üí View-‚Öã (Œ£·¥æ M P) (Œ£·¥æ N Q) (inl m  , p)
    sendR' : ‚àÄ {M N}(P : M ‚Üí Proto)(Q : N ‚Üí Proto)(n : N)(p : ‚ü¶ Œ£·¥æ M P ‚Öã·¥æ Q n ‚üß) ‚Üí View-‚Öã (Œ£·¥æ M P) (Œ£·¥æ N Q) (inr n , p)
    recvL' : ‚àÄ {M} (P : M ‚Üí Proto) Q (p : ((m : M) ‚Üí ‚ü¶ P m ‚Öã·¥æ Q ‚üß)) ‚Üí View-‚Öã (Œ†·¥æ M P) Q p
    recvR' : ‚àÄ {M N} (P : M ‚Üí Proto) (Q : N ‚Üí Proto)(p : (n : N) ‚Üí ‚ü¶ Œ£·¥æ M P ‚Öã·¥æ Q n ‚üß) ‚Üí View-‚Öã (Œ£·¥æ M P) (Œ†·¥æ N Q) p
    endL   : ‚àÄ Q (p : ‚ü¶ Q ‚üß) ‚Üí View-‚Öã end Q p
    send   : ‚àÄ {M}(P : M ‚Üí Proto)(m : M)(p : ‚ü¶ P m ‚üß) ‚Üí View-‚Öã (Œ£·¥æ M P) end (m , p)

  view-‚Öã : ‚àÄ P Q (p : ‚ü¶ P ‚Öã·¥æ Q ‚üß) ‚Üí View-‚Öã P Q p
  view-‚Öã end Q p = endL Q p
  view-‚Öã (Œ†·¥æ M P) Q p = recvL' P Q p
  view-‚Öã (Œ£·¥æ M P) end (m , p) = send P m p
  view-‚Öã (Œ£·¥æ M P) (Œ†·¥æ N Q) p = recvR' P Q p
  view-‚Öã (Œ£·¥æ M P) (Œ£·¥æ N Q) (inl x , p) = sendL' P Q x p
  view-‚Öã (Œ£·¥æ M P) (Œ£·¥æ N Q) (inr y , p) = sendR' P Q y p

  {-
  -- use coe (‚Öã-assoc P Q R)
  ‚Öã·¥æ-assoc : ‚àÄ P Q R ‚Üí ‚ü¶ P ‚Öã·¥æ (Q ‚Öã·¥æ R) ‚üß ‚Üí ‚ü¶ (P ‚Öã·¥æ Q) ‚Öã·¥æ R ‚üß
  ‚Öã·¥æ-assoc end      Q        R         s                 = s
  ‚Öã·¥æ-assoc (Œ†·¥æ _ P) Q        R         s m               = ‚Öã·¥æ-assoc (P m) _ _ (s m)
  ‚Öã·¥æ-assoc (Œ£·¥æ _ P) end      R         s                 = s
  ‚Öã·¥æ-assoc (Œ£·¥æ _ P) (Œ†·¥æ _ Q) R         s m               = ‚Öã·¥æ-assoc (Œ£·¥æ _ P) (Q m) _ (s m)
  ‚Öã·¥æ-assoc (Œ£·¥æ _ P) (Œ£·¥æ _ Q) end       s                 = s
  ‚Öã·¥æ-assoc (Œ£·¥æ _ P) (Œ£·¥æ _ Q) (Œ†·¥æ M R)  s m               = ‚Öã·¥æ-assoc (Œ£·¥æ _ P) (Œ£·¥æ _ Q) (R m) (s m)
  ‚Öã·¥æ-assoc (Œ£·¥æ _ P) (Œ£·¥æ _ Q) (Œ£·¥æ Mr R) (inl m , s)       = inl (inl m) , ‚Öã·¥æ-assoc (P m) (Œ£·¥æ _ Q) (Œ£·¥æ _ R) s
  ‚Öã·¥æ-assoc (Œ£·¥æ _ P) (Œ£·¥æ _ Q) (Œ£·¥æ Mr R) (inr (inl m) , s) = inl (inr m) , ‚Öã·¥æ-assoc (Œ£·¥æ _ P) (Q m) (Œ£·¥æ _ R) s
  ‚Öã·¥æ-assoc (Œ£·¥æ _ P) (Œ£·¥æ _ Q) (Œ£·¥æ Mr R) (inr (inr m) , s) = inr m       , ‚Öã·¥æ-assoc (Œ£·¥æ _ P) (Œ£·¥æ _ Q) (R m) s

  -- use coe (‚Öã-endR P) instead
  ‚Öã·¥æ-rend : ‚àÄ P ‚Üí ‚ü¶ P ‚Öã·¥æ end ‚üß  ‚Üí ‚ü¶ P ‚üß
  ‚Öã·¥æ-rend end      p = p
  ‚Öã·¥æ-rend (Œ£·¥æ _ _) p = p
  ‚Öã·¥æ-rend (Œ†·¥æ _ P) p = Œª m ‚Üí ‚Öã·¥æ-rend (P m) (p m)

  -- use coe! (‚Öã-endR P) instead
  ‚Öã·¥æ-rend! : ‚àÄ P  ‚Üí ‚ü¶ P ‚üß ‚Üí ‚ü¶ P ‚Öã·¥æ end ‚üß
  ‚Öã·¥æ-rend! end      p = p
  ‚Öã·¥æ-rend! (Œ£·¥æ _ _) p = p
  ‚Öã·¥æ-rend! (Œ†·¥æ _ P) p = Œª m ‚Üí ‚Öã·¥æ-rend! (P m) (p m)

  -- use coe! (‚Öã-recvR P Q) instead
  ‚Öã·¥æ-isendR : ‚àÄ {N} P Q ‚Üí ‚ü¶ P ‚Öã·¥æ Œ†·¥æ N Q ‚üß ‚Üí (n : N) ‚Üí ‚ü¶ P ‚Öã·¥æ Q n ‚üß
  ‚Öã·¥æ-isendR end Q s n = s n
  ‚Öã·¥æ-isendR (Œ†·¥æ M P) Q s n = Œª m ‚Üí ‚Öã·¥æ-isendR (P m) Q (s m) n
  ‚Öã·¥æ-isendR (Œ£·¥æ M P) Q s n = s n


  -- see ‚Öã-recvR
  ‚Öã·¥æ-recvR : ‚àÄ {M} P Q ‚Üí ((m : M) ‚Üí ‚ü¶ P ‚Öã·¥æ Q m ‚üß) ‚Üí ‚ü¶ P ‚Öã·¥æ Œ†·¥æ M Q ‚üß
  ‚Öã·¥æ-recvR end      Q s = s
  ‚Öã·¥æ-recvR (Œ†·¥æ M P) Q s = Œª x ‚Üí ‚Öã·¥æ-recvR (P x) Q (Œª m ‚Üí s m x)
  ‚Öã·¥æ-recvR (Œ£·¥æ M P) Q s = s
  -}

  module _ {{_ : FunExt}}{{_ : UA}} where

    ‚Öã·¥æ-sendL : ‚àÄ {M}{P : M ‚Üí Proto} Q (m : M) ‚Üí ‚ü¶ P m ‚Öã·¥æ Q ‚üß ‚Üí ‚ü¶ Œ£·¥æ M P ‚Öã·¥æ Q ‚üß
    ‚Öã·¥æ-sendL {P = P} end      m p = m , coe (‚Öã-endR (P m)) p
    ‚Öã·¥æ-sendL {P = P} (Œ†·¥æ M Q) m p = Œª n ‚Üí ‚Öã·¥æ-sendL (Q n) m (coe (‚Öã-recvR (P m) _) p n)
    ‚Öã·¥æ-sendL         (Œ£·¥æ M Q) m p = inl m , p

    ‚Öã·¥æ-sendR : ‚àÄ {M}P{Q : M ‚Üí Proto}(m : M) ‚Üí ‚ü¶ P ‚Öã·¥æ Q m ‚üß ‚Üí ‚ü¶ P ‚Öã·¥æ Œ£·¥æ M Q ‚üß
    ‚Öã·¥æ-sendR end      m p = m , p
    ‚Öã·¥æ-sendR (Œ£·¥æ M P) m p = inr m , p
    ‚Öã·¥æ-sendR (Œ†·¥æ M P) m p = Œª x ‚Üí ‚Öã·¥æ-sendR (P x) m (p x)

    ‚Öã·¥æ-id : ‚àÄ P ‚Üí ‚ü¶ dual P ‚Öã·¥æ P ‚üß
    ‚Öã·¥æ-id end      = end
    ‚Öã·¥æ-id (Œ†·¥æ M P) = Œª x ‚Üí ‚Öã·¥æ-sendL (P x) x (‚Öã·¥æ-id (P x))
    ‚Öã·¥æ-id (Œ£·¥æ M P) = Œª x ‚Üí ‚Öã·¥æ-sendR (dual (P x)) x (‚Öã·¥æ-id (P x))

  data View-‚àò : ‚àÄ P Q R ‚Üí ‚ü¶ P ‚Öã·¥æ Q ‚üß ‚Üí ‚ü¶ dual Q ‚Öã·¥æ R ‚üß ‚Üí ‚òÖ‚ÇÅ where
    sendLL : ‚àÄ {M N}(P : M ‚Üí Proto)(Q : N ‚Üí Proto) R (m : M)(p : ‚ü¶ P m ‚Öã·¥æ Œ£·¥æ _ Q ‚üß)(q : ‚ü¶ dual (Œ£·¥æ _ Q) ‚Öã·¥æ R ‚üß)
             ‚Üí View-‚àò (Œ£·¥æ M P) (Œ£·¥æ _ Q) R (inl m , p) q
    recvLL : ‚àÄ {M} (P : M ‚Üí Proto) Q R
               (p : ((m : M) ‚Üí ‚ü¶ P m ‚Öã·¥æ Q ‚üß))(q : ‚ü¶ dual Q ‚Öã·¥æ R ‚üß)
             ‚Üí View-‚àò (Œ†·¥æ M P) Q R p q
    recvR-sendR : ‚àÄ {MP MQ MR}ioP(P : MP ‚Üí Proto)(Q : MQ ‚Üí Proto)(R : MR ‚Üí Proto)
                    (mR : MR)(p : ‚ü¶ com ioP P ‚Öã·¥æ Œ†·¥æ _ Q ‚üß)(q : ‚ü¶ dual (Œ†·¥æ _ Q) ‚Öã·¥æ R mR ‚üß)
                    ‚Üí View-‚àò (com ioP P) (Œ†·¥æ _ Q) (Œ£·¥æ _ R) p (inr mR , q)

    recvRR : ‚àÄ {MP MQ MR}(P : MP ‚Üí Proto)(Q : MQ ‚Üí Proto)(R : MR ‚Üí Proto)
               (p : ‚ü¶ Œ£·¥æ _ P ‚Öã·¥æ Œ†·¥æ _ Q ‚üß)(q : (m : MR) ‚Üí ‚ü¶ dual (Œ†·¥æ _ Q) ‚Öã·¥æ R m ‚üß)
             ‚Üí View-‚àò (Œ£·¥æ _ P) (Œ†·¥æ _ Q) (Œ†·¥æ _ R) p q
    sendR-recvL : ‚àÄ {MP MQ}(P : MP ‚Üí Proto)(Q : MQ ‚Üí Proto)R(m : MQ)
                    (p : ‚ü¶ Œ£·¥æ _ P ‚Öã·¥æ Q m ‚üß)(q : (m : MQ) ‚Üí ‚ü¶ dual (Q m) ‚Öã·¥æ R ‚üß)
                  ‚Üí View-‚àò (Œ£·¥æ _ P) (Œ£·¥æ _ Q) R (inr m , p) q
    recvR-sendL : ‚àÄ {MP MQ MR}(P : MP ‚Üí Proto)(Q : MQ ‚Üí Proto)(R : MR ‚Üí Proto)
                    (p : (m : MQ) ‚Üí ‚ü¶ Œ£·¥æ _ P ‚Öã·¥æ Q m ‚üß)(m : MQ)(q : ‚ü¶ dual (Q m) ‚Öã·¥æ Œ£·¥æ _ R ‚üß)
                  ‚Üí View-‚àò (Œ£·¥æ _ P) (Œ†·¥æ _ Q) (Œ£·¥æ _ R) p (inl m , q)
    endL : ‚àÄ Q R
           ‚Üí (q : ‚ü¶ Q ‚üß)(qr : ‚ü¶ dual Q ‚Öã·¥æ R ‚üß)
           ‚Üí View-‚àò end Q R q qr
    sendLM : ‚àÄ {MP}(P : MP ‚Üí Proto)R
               (m : MP)(p : ‚ü¶ P m ‚üß)(r : ‚ü¶ R ‚üß)
             ‚Üí View-‚àò (Œ£·¥æ _ P) end R (m , p) r
    recvL-sendR : ‚àÄ {MP MQ}(P : MP ‚Üí Proto)(Q : MQ ‚Üí Proto)
                    (m : MQ)(p : ‚àÄ m ‚Üí ‚ü¶ Œ£·¥æ _ P ‚Öã·¥æ Q m ‚üß)(q : ‚ü¶ dual (Q m) ‚üß)
                  ‚Üí View-‚àò (Œ£·¥æ _ P) (Œ†·¥æ _ Q) end p (m , q)

  view-‚àò : ‚àÄ P Q R (pq : ‚ü¶ P ‚Öã·¥æ Q ‚üß)(qr : ‚ü¶ dual Q ‚Öã·¥æ R ‚üß) ‚Üí View-‚àò P Q R pq qr
  view-‚àò P Q R pq qr = view-‚àò-view (view-‚Öã P Q pq) (view-‚Öã (dual Q) R qr)
   where
    view-‚àò-view : ‚àÄ {P Q R}{pq : ‚ü¶ P ‚Öã·¥æ Q ‚üß}{qr : ‚ü¶ dual Q ‚Öã·¥æ R ‚üß} ‚Üí View-‚Öã P Q pq ‚Üí View-‚Öã (dual Q) R qr ‚Üí View-‚àò P Q R pq qr
    view-‚àò-view (sendL' _ _ _ _) _                 = sendLL _ _ _ _ _ _
    view-‚àò-view (recvL' _ _ _)   _                 = recvLL _ _ _ _ _
    view-‚àò-view (sendR' _ _ _ _) _                 = sendR-recvL _ _ _ _ _ _
    view-‚àò-view (recvR' _ _ _)   (sendL' ._ _ _ _) = recvR-sendL _ _ _ _ _ _
    view-‚àò-view (recvR' _ _ _)   (sendR' ._ _ _ _) = recvR-sendR _ _ _ _ _ _ _
    view-‚àò-view (recvR' _ _ _)   (recvR' ._ _ _)   = recvRR _ _ _ _ _
    view-‚àò-view (recvR' _ _ _)   (send ._ _ _)     = recvL-sendR _ _ _ _ _
    view-‚àò-view (endL _ _)       _                 = endL _ _ _ _
    view-‚àò-view (send _ _ _)     _                 = sendLM _ _ _ _ _

  ‚Öã·¥æ-apply : ‚àÄ P Q ‚Üí ‚ü¶ P ‚Öã·¥æ Q ‚üß ‚Üí ‚ü¶ dual P ‚üß ‚Üí ‚ü¶ Q ‚üß
  ‚Öã·¥æ-apply end      Q        s           p       = s
  ‚Öã·¥æ-apply (Œ†·¥æ M P) Q        s           (m , p) = ‚Öã·¥æ-apply (P m) Q (s m) p
  ‚Öã·¥æ-apply (Œ£·¥æ M P) end      s           p       = _
  ‚Öã·¥æ-apply (Œ£·¥æ M P) (Œ†·¥æ N Q) s           p n     = ‚Öã·¥æ-apply (Œ£·¥æ M P) (Q n) (s n) p
  ‚Öã·¥æ-apply (Œ£·¥æ M P) (Œ£·¥æ N Q) (inl m , s) p       = ‚Öã·¥æ-apply (P m) (Œ£·¥æ N Q) s (p m)
  ‚Öã·¥æ-apply (Œ£·¥æ M P) (Œ£·¥æ N Q) (inr m , s) p       = m , ‚Öã·¥æ-apply (Œ£·¥æ M P) (Q m) s p

  {-
  -- see dist-‚Öã-&
  dist-‚Öã-fst : ‚àÄ P Q R ‚Üí ‚ü¶ P ‚Öã·¥æ (Q &·¥æ R) ‚üß ‚Üí ‚ü¶ P ‚Öã·¥æ Q ‚üß
  dist-‚Öã-fst (Œ†·¥æ _ P) Q R p = Œª m ‚Üí dist-‚Öã-fst (P m) Q R (p m)
  dist-‚Öã-fst (Œ£·¥æ _ P) Q R p = p `L
  dist-‚Öã-fst end      Q R p = p `L

  -- see dist-‚Öã-&
  dist-‚Öã-snd : ‚àÄ P Q R ‚Üí ‚ü¶ P ‚Öã·¥æ (Q &·¥æ R) ‚üß ‚Üí ‚ü¶ P ‚Öã·¥æ R ‚üß
  dist-‚Öã-snd (Œ†·¥æ _ P) Q R p = Œª m ‚Üí dist-‚Öã-snd (P m) Q R (p m)
  dist-‚Öã-snd (Œ£·¥æ _ P) Q R p = p `R
  dist-‚Öã-snd end      Q R p = p `R

  -- see dist-‚Öã-&
  dist-‚Öã-√ó : ‚àÄ P Q R ‚Üí ‚ü¶ P ‚Öã·¥æ (Q &·¥æ R) ‚üß ‚Üí ‚ü¶ P ‚Öã·¥æ Q ‚üß √ó ‚ü¶ P ‚Öã·¥æ R ‚üß
  dist-‚Öã-√ó P Q R p = dist-‚Öã-fst P Q R p , dist-‚Öã-snd P Q R p

  -- see dist-‚Öã-&
  dist-‚Öã-& : ‚àÄ P Q R ‚Üí ‚ü¶ P ‚Öã·¥æ (Q &·¥æ R) ‚üß ‚Üí ‚ü¶ (P ‚Öã·¥æ Q) &·¥æ (P ‚Öã·¥æ R) ‚üß
  dist-‚Öã-& P Q R p = √ó‚Üí&·¥æ (dist-‚Öã-√ó P Q R p)

  -- see dist-‚Öã-&
  factor-,-‚Öã : ‚àÄ P Q R ‚Üí ‚ü¶ P ‚Öã·¥æ Q ‚üß ‚Üí ‚ü¶ P ‚Öã·¥æ R ‚üß ‚Üí ‚ü¶ P ‚Öã·¥æ (Q &·¥æ R) ‚üß
  factor-,-‚Öã end      Q R pq pr = √ó‚Üí&·¥æ (pq , pr)
  factor-,-‚Öã (Œ†·¥æ _ P) Q R pq pr = Œª m ‚Üí factor-,-‚Öã (P m) Q R (pq m) (pr m)
  factor-,-‚Öã (Œ£·¥æ _ P) Q R pq pr = [L: pq R: pr ]

  -- see dist-‚Öã-&
  factor-√ó-‚Öã : ‚àÄ P Q R ‚Üí ‚ü¶ P ‚Öã·¥æ Q ‚üß √ó ‚ü¶ P ‚Öã·¥æ R ‚üß ‚Üí ‚ü¶ P ‚Öã·¥æ (Q &·¥æ R) ‚üß
  factor-√ó-‚Öã P Q R (p , q) = factor-,-‚Öã P Q R p q

  -- see dist-‚Öã-&
  factor-&-‚Öã : ‚àÄ P Q R ‚Üí ‚ü¶ (P ‚Öã·¥æ Q) &·¥æ (P ‚Öã·¥æ R) ‚üß ‚Üí ‚ü¶ P ‚Öã·¥æ (Q &·¥æ R) ‚üß
  factor-&-‚Öã P Q R p = factor-√ó-‚Öã P Q R (&·¥æ‚Üí√ó p)

  -- see dist-‚Öã-&
  module _ {{_ : FunExt}} where
    dist-‚Öã-fst-factor-&-, : ‚àÄ P Q R (pq : ‚ü¶ P ‚Öã·¥æ Q ‚üß)(pr : ‚ü¶ P ‚Öã·¥æ R ‚üß)
                            ‚Üí dist-‚Öã-fst P Q R (factor-,-‚Öã P Q R pq pr) ‚â° pq
    dist-‚Öã-fst-factor-&-, (Œ†·¥æ _ P) Q R pq pr = Œª= Œª m ‚Üí dist-‚Öã-fst-factor-&-, (P m) Q R (pq m) (pr m)
    dist-‚Öã-fst-factor-&-, (Œ£·¥æ _ P) Q R pq pr = refl
    dist-‚Öã-fst-factor-&-, end      Q R pq pr = refl

    dist-‚Öã-snd-factor-&-, : ‚àÄ P Q R (pq : ‚ü¶ P ‚Öã·¥æ Q ‚üß)(pr : ‚ü¶ P ‚Öã·¥æ R ‚üß)
                            ‚Üí dist-‚Öã-snd P Q R (factor-,-‚Öã P Q R pq pr) ‚â° pr
    dist-‚Öã-snd-factor-&-, (Œ†·¥æ _ P) Q R pq pr = Œª= Œª m ‚Üí dist-‚Öã-snd-factor-&-, (P m) Q R (pq m) (pr m)
    dist-‚Öã-snd-factor-&-, (Œ£·¥æ _ P) Q R pq pr = refl
    dist-‚Öã-snd-factor-&-, end      Q R pq pr = refl

    factor-√ó-‚Öã-linv-dist-‚Öã-√ó : ‚àÄ P Q R ‚Üí (factor-√ó-‚Öã P Q R) LeftInverseOf (dist-‚Öã-√ó P Q R)
    factor-√ó-‚Öã-linv-dist-‚Öã-√ó (Œ†·¥æ _ P) Q R p = Œª= Œª m ‚Üí factor-√ó-‚Öã-linv-dist-‚Öã-√ó (P m) Q R (p m)
    factor-√ó-‚Öã-linv-dist-‚Öã-√ó (Œ£·¥æ _ P) Q R p = Œª= Œª { `L ‚Üí refl ; `R ‚Üí refl }
    factor-√ó-‚Öã-linv-dist-‚Öã-√ó end      Q R p = Œª= Œª { `L ‚Üí refl ; `R ‚Üí refl }

    module _ P Q R where
        factor-√ó-‚Öã-rinv-dist-‚Öã-√ó : (factor-√ó-‚Öã P Q R) RightInverseOf (dist-‚Öã-√ó P Q R)
        factor-√ó-‚Öã-rinv-dist-‚Öã-√ó (x , y) = pair√ó= (dist-‚Öã-fst-factor-&-, P Q R x y) (dist-‚Öã-snd-factor-&-, P Q R x y)

        dist-‚Öã-√ó-‚âÉ : ‚ü¶ P ‚Öã·¥æ (Q &·¥æ R) ‚üß ‚âÉ (‚ü¶ P ‚Öã·¥æ Q ‚üß √ó ‚ü¶ P ‚Öã·¥æ R ‚üß)
        dist-‚Öã-√ó-‚âÉ = dist-‚Öã-√ó P Q R
                   , record { linv = factor-√ó-‚Öã P Q R; is-linv = factor-√ó-‚Öã-linv-dist-‚Öã-√ó P Q R
                            ; rinv = factor-√ó-‚Öã P Q R; is-rinv = factor-√ó-‚Öã-rinv-dist-‚Öã-√ó }

        dist-‚Öã-&-‚âÉ : ‚ü¶ P ‚Öã·¥æ (Q &·¥æ R) ‚üß ‚âÉ ‚ü¶ (P ‚Öã·¥æ Q) &·¥æ (P ‚Öã·¥æ R) ‚üß
        dist-‚Öã-&-‚âÉ = dist-‚Öã-√ó-‚âÉ ‚âÉ-‚àô ‚âÉ-! &·¥æ‚âÉ√ó
  -}

module _ {{_ : FunExt}}{{_ : UA}} where
  ‚Öã·¥æ-apply' : ‚àÄ {P Q} ‚Üí ‚ü¶ dual P ‚Öã·¥æ Q ‚üß ‚Üí ‚ü¶ P ‚üß ‚Üí ‚ü¶ Q ‚üß
  ‚Öã·¥æ-apply' {P} {Q} pq p = ‚Öã·¥æ-apply (dual P) Q pq (subst ‚ü¶_‚üß (‚â°.sym (‚â°·¥æ-sound (dual-involutive P))) p)

  -- left-biased ‚Äústrategy‚Äù
  par : ‚àÄ P Q ‚Üí ‚ü¶ P ‚üß ‚Üí ‚ü¶ Q ‚üß ‚Üí ‚ü¶ P ‚Öã·¥æ Q ‚üß
  par P Q p q = par-view (view-proc P p)
    where par-view : ‚àÄ {P} {p : ‚ü¶ P ‚üß} ‚Üí ViewProc P p ‚Üí ‚ü¶ P ‚Öã·¥æ Q ‚üß
          par-view (send M P m p) = ‚Öã·¥æ-sendL Q m (par (P m) Q p q)
          par-view (recv M P p)   = Œª m ‚Üí par (P m) Q (p m) q
          par-view end            = q

  ‚Öã·¥æ-‚àò : ‚àÄ P Q R ‚Üí ‚ü¶ P ‚Öã·¥æ Q ‚üß ‚Üí ‚ü¶ dual Q ‚Öã·¥æ R ‚üß ‚Üí ‚ü¶ P ‚Öã·¥æ R ‚üß
  ‚Öã·¥æ-‚àò P Q R pq qr = ‚Öã·¥æ-‚àò-view (view-‚àò P Q R pq qr)
   where
    ‚Öã·¥æ-‚àò-view : ‚àÄ {P Q R}{pq : ‚ü¶ P ‚Öã·¥æ Q ‚üß}{qr : ‚ü¶ dual Q ‚Öã·¥æ R ‚üß} ‚Üí View-‚àò P Q R pq qr ‚Üí ‚ü¶ P ‚Öã·¥æ R ‚üß
    ‚Öã·¥æ-‚àò-view (sendLL P Q R m p qr)          = ‚Öã·¥æ-sendL R m (‚Öã·¥æ-‚àò (P m) (Œ£·¥æ _ Q) R p qr)
    ‚Öã·¥æ-‚àò-view (recvLL P Q R p qr)            = Œª m ‚Üí ‚Öã·¥æ-‚àò (P m) Q R (p m) qr
    ‚Öã·¥æ-‚àò-view (recvR-sendR ioP P Q R m pq q) = ‚Öã·¥æ-sendR (com ioP P) m (‚Öã·¥æ-‚àò (com ioP P) (Œ†·¥æ _ Q) (R m) pq q)
    ‚Öã·¥æ-‚àò-view (recvRR P Q R pq q)            = Œª m ‚Üí ‚Öã·¥æ-‚àò (Œ£·¥æ _ P) (Œ†·¥æ _ Q) (R m) pq (q m)
    ‚Öã·¥æ-‚àò-view (sendR-recvL P Q R m p q)      = ‚Öã·¥æ-‚àò (Œ£·¥æ _ P) (Q m) R p (q m)
    ‚Öã·¥æ-‚àò-view (recvR-sendL P Q R p m q)      = ‚Öã·¥æ-‚àò (Œ£·¥æ _ P) (Q m) (Œ£·¥æ _ R) (p m) q
    ‚Öã·¥æ-‚àò-view (endL Q R pq qr)               = ‚Öã·¥æ-apply' {Q} {R} qr pq
    ‚Öã·¥æ-‚àò-view (sendLM P R m pq qr)           = ‚Öã·¥æ-sendL R m (par (P m) R pq qr)
    ‚Öã·¥æ-‚àò-view (recvL-sendR P Q m pq qr)      = ‚Öã·¥æ-‚àò (Œ£·¥æ _ P) (Q m) end (pq m) (coe! (‚Öã-endR (dual (Q m))) qr)

    {-
  mutual
    ‚Öã·¥æ-comm : ‚àÄ P Q ‚Üí ‚ü¶ P ‚Öã·¥æ Q ‚üß ‚Üí ‚ü¶ Q ‚Öã·¥æ P ‚üß
    ‚Öã·¥æ-comm P Q p = ‚Öã·¥æ-comm-view (view-‚Öã P Q p)

    ‚Öã·¥æ-comm-view : ‚àÄ {P Q} {pq : ‚ü¶ P ‚Öã·¥æ Q ‚üß} ‚Üí View-‚Öã P Q pq ‚Üí ‚ü¶ Q ‚Öã·¥æ P ‚üß
    ‚Öã·¥æ-comm-view (sendL' P Q m p) = ‚Öã·¥æ-sendR (Œ£·¥æ _ Q) m (‚Öã·¥æ-comm (P m) (Œ£·¥æ _ Q) p)
    ‚Öã·¥æ-comm-view (sendR' P Q n p) = inl n , ‚Öã·¥æ-comm (Œ£·¥æ _ P) (Q n) p
    ‚Öã·¥æ-comm-view (recvL' P Q pq)  = ‚Öã·¥æ-recvR Q P Œª m ‚Üí ‚Öã·¥æ-comm (P m) Q (pq m)
    ‚Öã·¥æ-comm-view (recvR' P Q pq)  = Œª n ‚Üí ‚Öã·¥æ-comm (Œ£·¥æ _ P) (Q n) (pq n)
    ‚Öã·¥æ-comm-view (endL Q pq)      = ‚Öã·¥æ-rend! Q pq
    ‚Öã·¥æ-comm-view (send P m pq)    = m , pq
  -}

  comma·¥æ : ‚àÄ {P Q} ‚Üí ‚ü¶ P ‚üß ‚Üí ‚ü¶ Q ‚üß ‚Üí ‚ü¶ P ‚äó·¥æ Q ‚üß
  comma·¥æ {end}    {Q}      p q       = q
  comma·¥æ {Œ£·¥æ M P} {Q}      (m , p) q = m , comma·¥æ {P m} p q
  comma·¥æ {Œ†·¥æ M P} {end}    p end     = p
  comma·¥æ {Œ†·¥æ M P} {Œ£·¥æ _ Q} p (m , q) = m , comma·¥æ {Œ†·¥æ M P} {Q m} p q
  comma·¥æ {Œ†·¥æ M P} {Œ†·¥æ N Q} p q       = [inl: (Œª m ‚Üí comma·¥æ {P m}    {Œ†·¥æ _ Q} (p m) q)
                                       ,inr: (Œª n ‚Üí comma·¥æ {Œ†·¥æ _ P} {Q n}    p     (q n)) ]

  ‚äó·¥æ-fst : ‚àÄ P Q ‚Üí ‚ü¶ P ‚äó·¥æ Q ‚üß ‚Üí ‚ü¶ P ‚üß
  ‚äó·¥æ-fst end      Q        pq       = _
  ‚äó·¥æ-fst (Œ£·¥æ M P) Q        (m , pq) = m , ‚äó·¥æ-fst (P m) Q pq
  ‚äó·¥æ-fst (Œ†·¥æ M P) end      pq       = pq
  ‚äó·¥æ-fst (Œ†·¥æ M P) (Œ£·¥æ _ Q) (_ , pq) = ‚äó·¥æ-fst (Œ†·¥æ M P) (Q _) pq
  ‚äó·¥æ-fst (Œ†·¥æ M P) (Œ†·¥æ N Q) pq       = Œª m ‚Üí ‚äó·¥æ-fst (P m) (Œ†·¥æ N Q) (pq (inl m))

  ‚äó·¥æ-snd : ‚àÄ P Q ‚Üí ‚ü¶ P ‚äó·¥æ Q ‚üß ‚Üí ‚ü¶ Q ‚üß
  ‚äó·¥æ-snd end      Q        pq       = pq
  ‚äó·¥æ-snd (Œ£·¥æ M P) Q        (_ , pq) = ‚äó·¥æ-snd (P _) Q pq
  ‚äó·¥æ-snd (Œ†·¥æ M P) end      pq       = end
  ‚äó·¥æ-snd (Œ†·¥æ M P) (Œ£·¥æ _ Q) (m , pq) = m , ‚äó·¥æ-snd (Œ†·¥æ M P) (Q m) pq
  ‚äó·¥æ-snd (Œ†·¥æ M P) (Œ†·¥æ N Q) pq       = Œª m ‚Üí ‚äó·¥æ-snd (Œ†·¥æ M P) (Q m) (pq (inr m))

  ‚äó·¥æ-comma-fst : ‚àÄ P Q (p : ‚ü¶ P ‚üß)(q : ‚ü¶ Q ‚üß) ‚Üí ‚äó·¥æ-fst P Q (comma·¥æ {P} {Q} p q) ‚â° p
  ‚äó·¥æ-comma-fst end      Q        p q       = refl
  ‚äó·¥æ-comma-fst (Œ£·¥æ M P) Q        (m , p) q = pair= refl (‚äó·¥æ-comma-fst (P m) Q p q)
  ‚äó·¥æ-comma-fst (Œ†·¥æ M P) end      p q       = refl
  ‚äó·¥æ-comma-fst (Œ†·¥æ M P) (Œ£·¥æ _ Q) p (m , q) = ‚äó·¥æ-comma-fst (Œ†·¥æ _ P) (Q m) p q
  ‚äó·¥æ-comma-fst (Œ†·¥æ M P) (Œ†·¥æ N Q) p q       = Œª= Œª m ‚Üí ‚äó·¥æ-comma-fst (P m) (Œ†·¥æ _ Q) (p m) q

  ‚äó·¥æ-comma-snd : ‚àÄ P Q (p : ‚ü¶ P ‚üß)(q : ‚ü¶ Q ‚üß) ‚Üí ‚äó·¥æ-snd P Q (comma·¥æ {P} {Q} p q) ‚â° q
  ‚äó·¥æ-comma-snd end      Q        p q       = refl
  ‚äó·¥æ-comma-snd (Œ£·¥æ M P) Q        (m , p) q = ‚äó·¥æ-comma-snd (P m) Q p q
  ‚äó·¥æ-comma-snd (Œ†·¥æ M P) end      p q       = refl
  ‚äó·¥æ-comma-snd (Œ†·¥æ M P) (Œ£·¥æ _ Q) p (m , q) = pair= refl (‚äó·¥æ-comma-snd (Œ†·¥æ _ P) (Q m) p q)
  ‚äó·¥æ-comma-snd (Œ†·¥æ M P) (Œ†·¥æ N Q) p q       = Œª= Œª m ‚Üí ‚äó·¥æ-comma-snd (Œ†·¥æ M P) (Q m) p (q m)

  module _ P Q where
    ‚äó‚Üí√ó : ‚ü¶ P ‚äó·¥æ Q ‚üß ‚Üí ‚ü¶ P ‚üß √ó ‚ü¶ Q ‚üß
    ‚äó‚Üí√ó pq = ‚äó·¥æ-fst P Q pq , ‚äó·¥æ-snd P Q pq

    √ó‚Üí‚äó : ‚ü¶ P ‚üß √ó ‚ü¶ Q ‚üß ‚Üí ‚ü¶ P ‚äó·¥æ Q ‚üß
    √ó‚Üí‚äó (p , q) = comma·¥æ {P} {Q} p q

    √ó‚Üí‚äó‚Üí√ó : √ó‚Üí‚äó RightInverseOf ‚äó‚Üí√ó
    √ó‚Üí‚äó‚Üí√ó = Œª { (x , y) ‚Üí pair√ó= (‚äó·¥æ-comma-fst P Q x y) (‚äó·¥æ-comma-snd P Q x y) }

    ‚äó‚Üí√ó-has-rinv : Rinv ‚äó‚Üí√ó
    ‚äó‚Üí√ó-has-rinv = record { rinv = √ó‚Üí‚äó ; is-rinv = √ó‚Üí‚äó‚Üí√ó }

  {- WRONG
  ‚äó‚Üí√ó‚Üí‚äó : (√ó‚Üí‚äó P Q) LeftInverseOf (‚äó‚Üí√ó P Q)
  ‚äó‚âÉ√ó   : ‚ü¶ P ‚äó·¥æ Q ‚üß ‚âÉ ‚ü¶ P ‚üß √ó ‚ü¶ Q ‚üß
  ‚ü¶‚äó‚üß‚â°√ó : P ‚ü¶‚äó‚üß Q ‚â° (‚ü¶ P ‚üß √ó ‚ü¶ Q ‚üß)
  -}

  switchL' : ‚àÄ P Q R (pq : ‚ü¶ P ‚Öã·¥æ Q ‚üß) (r : ‚ü¶ R ‚üß) ‚Üí ‚ü¶ P ‚Öã·¥æ (Q ‚äó·¥æ R) ‚üß
  switchL' end      Q        R        q  r = comma·¥æ {Q} {R} q r
  switchL' (Œ£·¥æ _ P) end      R        p  r = par (Œ£·¥æ _ P) R p r
  switchL' (Œ£·¥æ _ P) (Œ£·¥æ _ Q) R        (inl m , pq) r = inl m , switchL' (P m) (Œ£·¥æ _ Q) R pq r
  switchL' (Œ£·¥æ _ P) (Œ£·¥æ _ Q) R        (inr m , pq) r = inr m , switchL' (Œ£·¥æ _ P) (Q m) R pq r
  switchL' (Œ£·¥æ _ P) (Œ†·¥æ _ Q) end      pq r = pq
  switchL' (Œ£·¥æ _ P) (Œ†·¥æ _ Q) (Œ£·¥æ _ R) pq (m , r) = inr m , switchL' (Œ£·¥æ _ P) (Œ†·¥æ _ Q) (R m) pq r
  switchL' (Œ£·¥æ _ P) (Œ†·¥æ _ Q) (Œ†·¥æ _ R) pq r (inl m) = switchL' (Œ£·¥æ _ P) (Q m) (Œ†·¥æ _ R) (pq m) r
  switchL' (Œ£·¥æ _ P) (Œ†·¥æ _ Q) (Œ†·¥æ _ R) pq r (inr m) = switchL' (Œ£·¥æ _ P) (Œ†·¥æ _ Q) (R m) pq (r m)
  switchL' (Œ†·¥æ _ P) Q R pq r = Œª m ‚Üí switchL' (P m) Q R (pq m) r

  switchL : ‚àÄ P Q R ‚Üí ‚ü¶ (P ‚Öã·¥æ Q) ‚äó·¥æ R ‚üß ‚Üí ‚ü¶ P ‚Öã·¥æ (Q ‚äó·¥æ R) ‚üß
  switchL P Q R pqr = switchL' P Q R (‚äó·¥æ-fst (P ‚Öã·¥æ Q) R pqr) (‚äó·¥æ-snd (P ‚Öã·¥æ Q) R pqr)

  -- multiplicative mix (left-biased)
  mmix : ‚àÄ P Q ‚Üí ‚ü¶ P ‚äó·¥æ Q ‚üß ‚Üí ‚ü¶ P ‚Öã·¥æ Q ‚üß
  mmix P Q pq = par P Q (‚äó·¥æ-fst P Q pq) (‚äó·¥æ-snd P Q pq)

  -- additive mix (left-biased)
  amix : ‚àÄ P Q ‚Üí ‚ü¶ P &·¥æ Q ‚üß ‚Üí ‚ü¶ P ‚äï·¥æ Q ‚üß
  amix P Q pq = (`L , pq `L)

{-
A `‚äó B 'times', context chooses how A and B are used
A `‚Öã B 'par', "we" chooses how A and B are used
A `‚äï B 'plus', select from A or B
A `& B 'with', offer choice of A or B
`! A   'of course!', server accept
`? A   'why not?', client request
`1     unit for `‚äó
`‚ä•     unit for `‚Öã
`0     unit for `‚äï
`‚ä§     unit for `&
-}
data CLL : ‚òÖ where
  `1 `‚ä§ `0 `‚ä• : CLL
  _`‚äó_ _`‚Öã_ _`‚äï_ _`&_ : (A B : CLL) ‚Üí CLL
  -- `!_ `?_ : (A : CLL) ‚Üí CLL

_‚ä• : CLL ‚Üí CLL
`1 ‚ä• = `‚ä•
`‚ä• ‚ä• = `1
`0 ‚ä• = `‚ä§
`‚ä§ ‚ä• = `0
(A `‚äó B)‚ä• = A ‚ä• `‚Öã B ‚ä•
(A `‚Öã B)‚ä• = A ‚ä• `‚äó B ‚ä•
(A `‚äï B)‚ä• = A ‚ä• `& B ‚ä•
(A `& B)‚ä• = A ‚ä• `‚äï B ‚ä•
{-
(`! A)‚ä• = `?(A ‚ä•)
(`? A)‚ä• = `!(A ‚ä•)
-}

CLL-proto : CLL ‚Üí Proto
CLL-proto `1       = end  -- TODO
CLL-proto `‚ä•       = end  -- TODO
CLL-proto `0       = Œ£·¥æ ùüò Œª()
CLL-proto `‚ä§       = Œ†·¥æ ùüò Œª()
CLL-proto (A `‚äó B) = CLL-proto A ‚äó·¥æ CLL-proto B
CLL-proto (A `‚Öã B) = CLL-proto A ‚Öã·¥æ CLL-proto B
CLL-proto (A `‚äï B) = CLL-proto A ‚äï·¥æ CLL-proto B
CLL-proto (A `& B) = CLL-proto A &·¥æ CLL-proto B

{- The point of this could be to devise a particular equivalence
   relation for processes. It could properly deal with ‚Öã. -}

{-
module _ where
  trace : ‚àÄ {B E} ‚Üí Sim (Trace B) (Trace E) ‚Üí Log B √ó Log E
  trace {end}   {end}   end = _
  trace {com _} {end}   (comL  (send m s)) = first  (_,_ m) (trace s)
  trace {end}   {com _} (comR (send m s)) = second (_,_ m) (trace s)
  trace {com _} {com c} (comL  (send m s)) = first  (_,_ m) (trace {E = com c} s)
  trace {com c} {com _} (comR (send m s)) = second (_,_ m) (trace {com c} s)

  module _ {P Q} where
    _‚âà_ : (PQ PQ' : Sim P Q) ‚Üí ‚òÖ‚ÇÅ
    PQ ‚âà PQ' = ‚àÄ {B P' Q' E} ‚Üí (P'-P : Dual P' P)(Q-Q' : Dual Q Q')(BP : Sim (Trace B) P')(QE : Sim Q' (Trace E))
       ‚Üí trace (sim-comp P'-P BP (sim-comp Q-Q' PQ QE)) ‚â° trace (sim-comp P'-P BP (sim-comp Q-Q' PQ' QE))
-}

module Commitment {Secret Guess : ‚òÖ} {R : ..(_ : Secret) ‚Üí Guess ‚Üí ‚òÖ} where
    Commit : Proto
    Commit = Œ£‚òê·¥æ Secret  Œª s ‚Üí
             Œ†·¥æ  Guess   Œª g ‚Üí
             Œ£·¥æ  S< s >  Œª _ ‚Üí
             end

    commit : (s : Secret)  ‚Üí ‚ü¶ Commit ‚üß
    commit s = [ s ] , Œª g ‚Üí S[ s ] , _

    decommit : (g : Guess) ‚Üí ‚ü¶ dual Commit ‚üß
    decommit g = Œª { [ m ] ‚Üí g , _ }

open import Relation.Nullary
open import Relation.Nullary.Decidable
{-
test-sim : Sim (ùüò √ó' end) end
test-sim = end
-}

-- Prove knowledge of a discrete log
-- Adapted here to have precise types
module Shnorr-protocol
    (G ‚Ñ§q : ‚òÖ)
    (g    : G) 
    (_^_  : G  ‚Üí ‚Ñ§q ‚Üí G)
    (_¬∑_  : G  ‚Üí G  ‚Üí G)
    (_+_  : ‚Ñ§q ‚Üí ‚Ñ§q ‚Üí ‚Ñ§q)
    (_*_  : ‚Ñ§q ‚Üí ‚Ñ§q ‚Üí ‚Ñ§q)
    (_‚âü_  : (x y : G) ‚Üí Dec (x ‚â° y))
    where
    module Real where
        Prover : Proto
        Prover = Œ£·¥æ  G  Œª g ≥ ‚Üí -- commitment
                 Œ†·¥æ  ‚Ñ§q Œª c  ‚Üí -- challenge
                 Œ£·¥æ  ‚Ñ§q Œª s  ‚Üí -- response
                 end

        Verifier : Proto
        Verifier = dual Prover

        -- he is honest but its type does not say it
        prover : (x r : ‚Ñ§q) ‚Üí ‚ü¶ Prover ‚üß
        prover x r = (g ^ r) , Œª c ‚Üí (r + (c * x)) , _

        Honest-Prover : ..(x : ‚Ñ§q) (y : S< g ^ x >) ‚Üí Proto
        Honest-Prover x y
          = Œ£‚òê·¥æ ‚Ñ§q                Œª r  ‚Üí -- ideal commitment
            Œ£·¥æ  S< g ^ r >        Œª g ≥ ‚Üí -- real  commitment
            Œ†·¥æ  ‚Ñ§q                Œª c  ‚Üí -- challenge
            Œ£·¥æ  S< r + (c * x) >  Œª s  ‚Üí -- response
            Œ†·¥æ  (Dec ((g ^ unS s) ‚â° (unS g ≥ ¬∑ (unS y ^ c)))) Œª _ ‚Üí
            end

        Honest-Prover' : ..(x : ‚Ñ§q) (y : S< g ^ x >) ‚Üí Proto
        Honest-Prover' x S[ y ‚à• _ ]
          = Œ£‚òê·¥æ ‚Ñ§q                Œª r  ‚Üí -- ideal commitment
            Œ£·¥æ  S< g ^ r >        Œª { S[ g ≥ ‚à• _ ] ‚Üí -- real  commitment
            Œ†·¥æ  ‚Ñ§q                Œª c  ‚Üí -- challenge
            Œ£·¥æ  S< r + (c * x) >  Œª { S[ s ‚à• _ ]  ‚Üí -- response
            Œ†·¥æ  (Dec ((g ^ s) ‚â° (g ≥ ¬∑ (y ^ c)))) Œª _ ‚Üí
            end } }

        Honest-Verifier : ..(x : ‚Ñ§q) (y : S< g ^ x >) ‚Üí Proto
        Honest-Verifier x y = dual (Honest-Prover x y)

        honest-prover : (x r : ‚Ñ§q) ‚Üí ‚ü¶ Honest-Prover x S[ g ^ x ] ‚üß
        honest-prover x r = [ r ] , S[ g ^ r ] , Œª c ‚Üí S[ r + (c * x) ] , _
        -- agsy can do it

        honest-verifier : ..(x : ‚Ñ§q) (y : S< g ^ x >) (c : ‚Ñ§q) ‚Üí ‚ü¶ Honest-Verifier x y ‚üß
        honest-verifier x y c = Œª { [ r ] ‚Üí Œª g ≥ ‚Üí c , Œª s ‚Üí (g ^ unS s) ‚âü (unS g ≥ ¬∑ (unS y ^ c)) , _ }

        honest-prover‚Üíprover : ..(x : ‚Ñ§q)(y : S< g ^ x >) ‚Üí ‚ü¶ Honest-Prover x y ‚üß ‚Üí ‚ü¶ Prover ‚üß
        honest-prover‚Üíprover x y ([ r ] , g ≥ , p) = unS g ≥ , Œª c ‚Üí case p c of Œª { (s , _) ‚Üí unS s , _ }

        {-
        sim-honest-prover : ..(x : ‚Ñ§q)(y : S< g ^ x >) ‚Üí Sim (dual (Honest-Prover x y)) Prover
        sim-honest-prover x y = recvL (Œª { [ r ] ‚Üí
                                recvL Œª g ≥ ‚Üí
                                sendR (unS g ≥) (
                                recvR Œª c ‚Üí
                                sendL c (recvL Œª s ‚Üí sendR (unS s) (sendL {!!} {!!}) )) })
                                -}

-- -}
-- -}
-- -}
-- -}
-- -}
-- -}
-- -}
-- -}
