
-- {-# OPTIONS --without-K #-}
open import Coinduction
open import Function.NP
open import Type
open import Level
open import Data.Product
open import Data.One

open import Relation.Binary.PropositionalEquality.NP

module Control.Protocol.Choreography where
open import Control.Strategy renaming (Strategy to Client) public

Œ†¬∑ : ‚àÄ {a b}(A : ‚òÖ_ a) ‚Üí (B : ..(_ : A) ‚Üí ‚òÖ_ b) ‚Üí ‚òÖ_ (a ‚äî b)
Œ†¬∑ A B = ..(x : A) ‚Üí B x

data Mod : ‚òÖ where S D : Mod

‚ÜíM : ‚àÄ {a b} ‚Üí Mod ‚Üí ‚òÖ_ a ‚Üí ‚òÖ_ b ‚Üí ‚òÖ_ (a ‚äî b)
‚ÜíM S A B = ..(_ : A) ‚Üí B
‚ÜíM D A B = A ‚Üí B

Œ†M : ‚àÄ {a b}(m : Mod) ‚Üí (A : ‚òÖ_ a) ‚Üí (B : ‚ÜíM m A (‚òÖ_ b)) ‚Üí ‚òÖ_ (a ‚äî b)
Œ†M S A B = Œ†¬∑ A B
Œ†M D A B = Œ† A B

-- appM : ‚àÄ {a b}(m : Mod){A : ‚òÖ_ a}{B : ‚ÜíM m A (‚òÖ_ b)}(P : Œ†M m A B)(x : A) ‚Üí B

data Proto : ‚òÖ‚ÇÅ where
  end : Proto
  Œ†' Œ£' : (f : Mod)(A : ‚òÖ)(B : ‚ÜíM f A Proto) ‚Üí Proto

{-
Tele : Proto ‚Üí ‚òÖ
Tele end = ùüô
Tele (Œ†' A B) = Œ£ A Œª x ‚Üí Tele (B x)
Tele (Œ£' A B) = Œ£ A Œª x ‚Üí Tele (B x)
Tele (later i P) = ?

_>>‚â°_ : (P : Proto) ‚Üí (Tele P ‚Üí Proto) ‚Üí Proto
end >>‚â° Q = Q _
Œ†' A B >>‚â° Q = Œ†' A (Œª x ‚Üí B x >>‚â° (Œª xs ‚Üí Q (x , xs)))
Œ£' A B >>‚â° Q = Œ£' A (Œª x ‚Üí B x >>‚â° (Œª xs ‚Üí Q (x , xs)))
later i P >>‚â° Q = ?

++Tele : ‚àÄ (P : Proto)(Q : Tele P ‚Üí Proto) ‚Üí (x : Tele P) ‚Üí Tele (Q x) ‚Üí Tele (P >>‚â° Q)
++Tele end Q x y = y
++Tele (Œ†' M C) Q (m , x) y = m , ++Tele (C m) (Œª x‚ÇÅ ‚Üí Q (m , x‚ÇÅ)) x y
++Tele (Œ£' M C) Q (m , x) y = m , ++Tele (C m) _ x y
++Tele (later i P) Q x y = ?

module _ (funExt : ‚àÄ {a}{b}{A : ‚òÖ_ a}{B : ‚òÖ_ b}{f g : A ‚Üí B} ‚Üí (‚àÄ x ‚Üí f x ‚â° g x) ‚Üí f ‚â° g) where
  right-unit : ‚àÄ (P : Proto) ‚Üí (P >>‚â° Œª x ‚Üí end) ‚â° P
  right-unit end = refl
  right-unit (Œ†' M C) = let p = funExt (Œª x ‚Üí right-unit (C x)) in cong (Œ†' M) p
  right-unit (Œ£' M C) = cong (Œ£' M) (funExt (Œª x ‚Üí right-unit (C x)))
  right-unit (later i P) = ?

  assoc : ‚àÄ (P : Proto)(Q : Tele P ‚Üí Proto)(R : Tele (P >>‚â° Q) ‚Üí Proto)
        ‚Üí P >>‚â° (Œª x ‚Üí Q x >>‚â° (Œª y ‚Üí R (++Tele P Q x y))) ‚â° ((P >>‚â° Q) >>‚â° R)
  assoc end Q R = refl
  assoc (Œ†' M C‚ÇÅ) Q R = cong (Œ†' M) (funExt (Œª x ‚Üí assoc (C‚ÇÅ x) (Œª xs ‚Üí Q (x , xs)) (Œª xs ‚Üí R (x , xs))))
  assoc (Œ£' M C‚ÇÅ) Q R = cong (Œ£' M) (funExt (Œª x ‚Üí assoc (C‚ÇÅ x) (Œª xs ‚Üí Q (x , xs)) (Œª xs ‚Üí R (x , xs))))
  assoc (later i P) Q R = ?

_>>_ : Proto ‚Üí Proto ‚Üí Proto
P >> Q = P >>‚â° Œª _ ‚Üí Q
-}

_√ó'_ : Set ‚Üí Proto ‚Üí Proto
A √ó' B = Œ£' D A Œª _ ‚Üí B

_‚Üí'_ : Set ‚Üí Proto ‚Üí Proto
A ‚Üí' B = Œ†' D A Œª _ ‚Üí B

dual : Proto ‚Üí Proto
dual end = end
dual (Œ†' S A B) = Œ£' S A (Œª x ‚Üí dual (B x))
dual (Œ†' D A B) = Œ£' D A (Œª x ‚Üí dual (B x))
dual (Œ£' S A B) = Œ†' S A (Œª x ‚Üí dual (B x))
dual (Œ£' D A B) = Œ†' D A (Œª x ‚Üí dual (B x))

data Dual : Proto ‚Üí Proto ‚Üí ‚òÖ‚ÇÅ where
  end : Dual end end
  Œ†Œ£'S : ‚àÄ {A B B'} ‚Üí (‚àÄ ..x ‚Üí Dual (B x) (B' x)) ‚Üí Dual (Œ†' S A B) (Œ£' S A B')
  Œ†Œ£'D : ‚àÄ {A B B'} ‚Üí (‚àÄ x ‚Üí Dual (B x) (B' x)) ‚Üí Dual (Œ†' D A B) (Œ£' D A B')
  Œ£Œ†'S : ‚àÄ {A B B'} ‚Üí (‚àÄ ..x ‚Üí Dual (B x) (B' x)) ‚Üí Dual (Œ£' S A B) (Œ†' S A B')
  Œ£Œ†'D : ‚àÄ {A B B'} ‚Üí (‚àÄ x ‚Üí Dual (B x) (B' x)) ‚Üí Dual (Œ£' D A B) (Œ†' D A B')

Dual-sym : ‚àÄ {P Q} ‚Üí Dual P Q ‚Üí Dual Q P
Dual-sym end = end
Dual-sym (Œ†Œ£'S f) = Œ£Œ†'S (Œª x ‚Üí Dual-sym (f x))
Dual-sym (Œ†Œ£'D f) = Œ£Œ†'D (Œª x ‚Üí Dual-sym (f x))
Dual-sym (Œ£Œ†'S f) = Œ†Œ£'S (Œª x ‚Üí Dual-sym (f x))
Dual-sym (Œ£Œ†'D f) = Œ†Œ£'D (Œª x ‚Üí Dual-sym (f x))

Dual-spec : ‚àÄ P ‚Üí Dual P (dual P)
Dual-spec end = end
Dual-spec (Œ†' S A B) = Œ†Œ£'S (Œª x ‚Üí Dual-spec (B x))
Dual-spec (Œ†' D A B) = Œ†Œ£'D (Œª x ‚Üí Dual-spec (B x))
Dual-spec (Œ£' S A B) = Œ£Œ†'S (Œª x ‚Üí Dual-spec (B x))
Dual-spec (Œ£' D A B) = Œ£Œ†'D (Œª x ‚Üí Dual-spec (B x))
{-
module _ (funExt : ‚àÄ {a b}{A : ‚òÖ_ a}{B : A ‚Üí ‚òÖ_ b}{f g : (x : A) ‚Üí B x} ‚Üí (‚àÄ x ‚Üí f x ‚â° g x) ‚Üí f ‚â° g)where
  dual-Tele : ‚àÄ P ‚Üí Tele P ‚â° Tele (dual P)
  dual-Tele end = refl
  dual-Tele (Œ†' A B) = cong (Œ£ A) (funExt (Œª x ‚Üí dual-Tele (B x)))
  dual-Tele (Œ£' A B) = cong (Œ£ A) (funExt (Œª x ‚Üí dual-Tele (B x)))
  dual-Tele (later i P) = ?
-}{-
module _ X where
  El : Proto ‚Üí ‚òÖ
  El end = X
  El (Œ†' A B) = Œ† A Œª x ‚Üí El (B x)
  El (Œ£' A B) = Œ£ A Œª x ‚Üí El (B x)
module _ where
  El : (P : Proto) ‚Üí (Tele P ‚Üí ‚òÖ) ‚Üí ‚òÖ
  El end X = X _
  El (Œ†' A B) X = Œ† A Œª x ‚Üí El (B x) (Œª y ‚Üí X (x , y))
  El (Œ£' A B) X = Œ£ A Œª x ‚Üí El (B x) (Œª y ‚Üí X (x , y))
  El (later i P) = ?

module ElBind (funExt : ‚àÄ {a b}{A : ‚òÖ_ a}{B : A ‚Üí ‚òÖ_ b}{f g : (x : A) ‚Üí B x} ‚Üí (‚àÄ x ‚Üí f x ‚â° g x) ‚Üí f ‚â° g)where

  bind-spec : (P : Proto)(Q : Tele P ‚Üí Proto)(X : Tele (P >>‚â° Q) ‚Üí ‚òÖ) ‚Üí El (P >>‚â° Q) X ‚â° El P (Œª x ‚Üí El (Q x) (Œª y ‚Üí X (++Tele P Q x y)))
  bind-spec end Q X = refl
  bind-spec (Œ†' A B) Q X = cong (Œ† A) (funExt (Œª x ‚Üí bind-spec (B x) (Œª xs ‚Üí Q (x , xs)) (Œª y ‚Üí X (x , y))))
  bind-spec (Œ£' A B) Q X = cong (Œ£ A) (funExt (Œª x ‚Üí bind-spec (B x) _ _))
  bind-spec (later i p) Q X = ?


module _ {A B} where
  com : (P : Proto) ‚Üí El P (const A) ‚Üí El (dual P) (const B) ‚Üí A √ó B
  com end a b = a , b
  com (Œ†' A B) f (x , y) = com (B x) (f x) y
  com (Œ£' A B) (x , y) f = com (B x) y (f x)
  com (later i P) x y = ?

module _ (funExt : ‚àÄ {a b}{A : ‚òÖ_ a}{B : A ‚Üí ‚òÖ_ b}{f g : (x : A) ‚Üí B x} ‚Üí (‚àÄ x ‚Üí f x ‚â° g x) ‚Üí f ‚â° g)where
  com-cont : (P : Proto){A : Tele P ‚Üí ‚òÖ}{B : Tele (dual P) ‚Üí ‚òÖ} ‚Üí El P A ‚Üí El (dual P) B ‚Üí Œ£ (Tele P) A √ó Œ£ (Tele (dual P)) B
  com-cont end p q = (_ , p)  , (_ , q)
  com-cont (Œ†' A B) p (m , q) with com-cont (B m) (p m) q
  ... | (X , a) , (Y , b) = ((m , X) , a) , (m , Y) , b
  com-cont (Œ£' A B) (m , p) q with com-cont (B m) p (q m)
  ... | (X , a) , (Y , b) = ((m , X) , a) , (m , Y) , b
  com-cont (later i P) p q = ?
-}

data ProcessF (this : Proto ‚Üí ‚òÖ‚ÇÅ): Proto ‚Üí ‚òÖ‚ÇÅ where
  recvD : ‚àÄ {M P} ‚Üí (Œ†M D M Œª m ‚Üí this (P m)) ‚Üí ProcessF this (Œ†' D M P)
  recvS : ‚àÄ {M P} ‚Üí (Œ†M S M Œª m ‚Üí this (P m)) ‚Üí ProcessF this (Œ†' S M P)
  sendD : ‚àÄ {M P} ‚Üí Œ†M D M (Œª m ‚Üí this (P m) ‚Üí ProcessF this (Œ£' D M P))
  sendS : ‚àÄ {M P} ‚Üí Œ†M S M (Œª m ‚Üí this (P m) ‚Üí ProcessF this (Œ£' S M P))

data Process (A : ‚òÖ) : Proto ‚Üí ‚òÖ‚ÇÅ where
  do  : ‚àÄ {P} ‚Üí ProcessF (Process A) P ‚Üí Process A P
  end : A ‚Üí Process A end

mutual
  SimL : Proto ‚Üí Proto ‚Üí ‚òÖ‚ÇÅ
  SimL P Q = ProcessF (flip Sim Q) P

  SimR : Proto ‚Üí Proto ‚Üí ‚òÖ‚ÇÅ
  SimR P Q = ProcessF (Sim P) Q

  data Sim : Proto ‚Üí Proto ‚Üí ‚òÖ‚ÇÅ where
    left  : ‚àÄ {P Q} ‚Üí SimL P Q ‚Üí Sim P Q
    right : ‚àÄ {P Q} ‚Üí SimR P Q ‚Üí Sim P Q
    end   : Sim end end

_‚üπ_ : Proto ‚Üí Proto ‚Üí ‚òÖ‚ÇÅ
P ‚üπ Q = Sim (dual P) Q

_‚üπ·¥æ_ : Proto ‚Üí Proto ‚Üí ‚òÖ‚ÇÅ
P ‚üπ·¥æ Q = ‚àÄ {A} ‚Üí Process A (dual P) ‚Üí Process A Q

sim-id : ‚àÄ P ‚Üí Sim (dual P) P
sim-id end = end
sim-id (Œ†' S A B) = right (recvS (Œª x ‚Üí left (sendS x (sim-id (B x)))))
sim-id (Œ†' D A B) = right (recvD (Œª x ‚Üí left (sendD x (sim-id (B x)))))
sim-id (Œ£' S A B) = left (recvS (Œª x ‚Üí right (sendS x (sim-id (B x)))))
sim-id (Œ£' D A B) = left (recvD (Œª x ‚Üí right (sendD x (sim-id (B x)))))

sim-comp : ‚àÄ {P Q Q' R} ‚Üí Dual Q Q' ‚Üí Sim P Q ‚Üí Sim Q' R ‚Üí Sim P R
sim-compRL : ‚àÄ {P Q Q' R} ‚Üí Dual Q Q' ‚Üí SimR P Q ‚Üí SimL Q' R ‚Üí Sim P R
sim-compL : ‚àÄ {P Q Q' R} ‚Üí Dual Q Q' ‚Üí SimL P Q ‚Üí Sim Q' R ‚Üí SimL P R
sim-compR : ‚àÄ {P Q Q' R} ‚Üí Dual Q Q' ‚Üí Sim P Q ‚Üí SimR Q' R ‚Üí SimR P R

sim-comp Q-Q' (left x) QR = left (sim-compL Q-Q' x QR)
sim-comp Q-Q' (right x) (left x‚ÇÅ) = sim-compRL Q-Q' x x‚ÇÅ
sim-comp Q-Q' (right x) (right x‚ÇÅ) = right (sim-compR Q-Q' (right x) x‚ÇÅ)
sim-comp end (right x) end = right x
sim-comp end end QR = QR

sim-compRL end () QR
sim-compRL (Œ†Œ£'S x‚ÇÅ) (recvS x) (sendS x‚ÇÇ x‚ÇÉ) = sim-comp (x‚ÇÅ x‚ÇÇ) (x x‚ÇÇ) x‚ÇÉ
sim-compRL (Œ†Œ£'D x‚ÇÅ) (recvD x) (sendD x‚ÇÇ x‚ÇÉ) = sim-comp (x‚ÇÅ x‚ÇÇ) (x x‚ÇÇ) x‚ÇÉ
sim-compRL (Œ£Œ†'S x) (sendS x‚ÇÅ x‚ÇÇ) (recvS x‚ÇÉ) = sim-comp (x x‚ÇÅ) x‚ÇÇ (x‚ÇÉ x‚ÇÅ)
sim-compRL (Œ£Œ†'D x) (sendD x‚ÇÅ x‚ÇÇ) (recvD x‚ÇÉ) = sim-comp (x x‚ÇÅ) x‚ÇÇ (x‚ÇÉ x‚ÇÅ)

sim-compL Q-Q' (recvD PQ) QR = recvD (Œª m ‚Üí sim-comp Q-Q' (PQ m) QR)
sim-compL Q-Q' (recvS PQ) QR = recvS (Œª m ‚Üí sim-comp Q-Q' (PQ m) QR)
sim-compL Q-Q' (sendD m PQ) QR = sendD m (sim-comp Q-Q' PQ QR)
sim-compL Q-Q' (sendS m PQ) QR = sendS m (sim-comp Q-Q' PQ QR)

sim-compR Q-Q' PQ (recvD QR)   = recvD (Œª m ‚Üí sim-comp Q-Q' PQ (QR m))
sim-compR Q-Q' PQ (recvS QR)   = recvS (Œª x ‚Üí sim-comp Q-Q' PQ (QR x))
sim-compR Q-Q' PQ (sendD m QR) = sendD m (sim-comp Q-Q' PQ QR)
sim-compR Q-Q' PQ (sendS m QR) = sendS m (sim-comp Q-Q' PQ QR)

{-
sim-comp : ‚àÄ {P Q Q' R} ‚Üí Dual Q Q' ‚Üí Sim P Q ‚Üí Sim Q' R ‚Üí Sim P R
sim-comp Q-Q' (left (recvD PQ)) QR = left (recvD (Œª m ‚Üí sim-comp Q-Q' (PQ m) QR))
sim-comp Q-Q' (left (recvS PQ)) QR = left (recvS (Œª m ‚Üí sim-comp Q-Q' (PQ m) QR))
sim-comp Q-Q' (left (sendD m PQ)) QR = left (sendD m (sim-comp Q-Q' PQ QR))
sim-comp Q-Q' (left (sendS m PQ)) QR = left (sendS m (sim-comp Q-Q' PQ QR))
sim-comp end (right ()) (left x‚ÇÅ)
sim-comp end end QR = QR
sim-comp end PQ end = PQ
sim-comp (Œ†Œ£'S Q-Q') (right (recvS PQ)) (left (sendS m QR)) = sim-comp (Q-Q' m) (PQ m) QR
sim-comp (Œ†Œ£'D Q-Q') (right (recvD PQ)) (left (sendD m QR)) = sim-comp (Q-Q' m) (PQ m) QR
sim-comp (Œ£Œ†'S Q-Q') (right (sendS m PQ)) (left (recvS QR)) = sim-comp (Q-Q' m) PQ (QR m)
sim-comp (Œ£Œ†'D Q-Q') (right (sendD m PQ)) (left (recvD QR)) = sim-comp (Q-Q' m) PQ (QR m)
sim-comp Q-Q' PQ (right (recvD QR)) = right (recvD (Œª m ‚Üí sim-comp Q-Q' PQ (QR m)))
sim-comp Q-Q' PQ (right (recvS QR)) = right (recvS (Œª x ‚Üí sim-comp Q-Q' PQ (QR x)))
sim-comp Q-Q' PQ (right (sendD m QR)) = right (sendD m (sim-comp Q-Q' PQ QR))
sim-comp Q-Q' PQ (right (sendS m QR)) = right (sendS m (sim-comp Q-Q' PQ QR))
-}

_‚ô¶_ : ‚àÄ {P Q R} ‚Üí Sim P Q ‚Üí Sim (dual Q) R ‚Üí Sim P R
_‚ô¶_ = sim-comp (Dual-spec _)

‚üπ-comp : ‚àÄ {P Q R} ‚Üí P ‚üπ Q ‚Üí Q ‚üπ R ‚Üí P ‚üπ R
‚üπ-comp = _‚ô¶_

!À¢ : ‚àÄ {P Q} ‚Üí Sim P Q ‚Üí Sim Q P
sim-symL : ‚àÄ {P Q} ‚Üí SimL P Q ‚Üí SimR Q P
sim-symR : ‚àÄ {P Q} ‚Üí SimR P Q ‚Üí SimL Q P

!À¢ (left x) = right (sim-symL x)
!À¢ (right x) = left (sim-symR x)
!À¢ end = end

sim-symL (recvD PQ)   = recvD (Œª m ‚Üí !À¢ (PQ m))
sim-symL (recvS PQ)   = recvS (Œª m ‚Üí !À¢ (PQ m))
sim-symL (sendD m PQ) = sendD m (!À¢ PQ)
sim-symL (sendS m PQ) = sendS m (!À¢ PQ)

sim-symR (recvD PQ)   = recvD (Œª m ‚Üí !À¢ (PQ m))
sim-symR (recvS PQ)   = recvS (Œª m ‚Üí !À¢ (PQ m))
sim-symR (sendD m PQ) = sendD m (!À¢ PQ)
sim-symR (sendS m PQ) = sendS m (!À¢ PQ)

sim-unit : ‚àÄ {P} ‚Üí Sim end P ‚Üí Process ùüô P
sim-unit (left ())
sim-unit (right (recvD P)) = do (recvD (Œª m ‚Üí sim-unit (P m)))
sim-unit (right (recvS P)) = do (recvS (Œª m ‚Üí sim-unit (P m)))
sim-unit (right (sendD m P)) = do (sendD m (sim-unit P))
sim-unit (right (sendS m P)) = do (sendS m (sim-unit P))
sim-unit end = end 0‚ÇÅ

module _ {P Q : Proto} where
  infix 2 _‚àº_
  _‚àº_ : (PQ PQ' : Sim P Q) ‚Üí ‚òÖ‚ÇÅ
  PQ ‚àº PQ' = ‚àÄ {P'} ‚Üí (P'-P : Dual P' P) ‚Üí (√∏P : Sim end P')
           ‚Üí sim-comp P'-P √∏P PQ ‚â° sim-comp P'-P √∏P PQ'

module _
  (funExtD : ‚àÄ {a}{b}{A : ‚òÖ_ a}{B : A ‚Üí ‚òÖ_ b}{f g : (x : A) ‚Üí B x} ‚Üí (‚àÄ x ‚Üí f x ‚â° g x) ‚Üí f ‚â° g)
  (funExtS : ‚àÄ {a}{b}{A : ‚òÖ_ a}{B : ..(_ : A) ‚Üí ‚òÖ_ b}{f g : ..(x : A) ‚Üí B x} ‚Üí (‚àÄ x ‚Üí f x ‚â° g x) ‚Üí f ‚â° g)
  where

  Dual-sym-sym : ‚àÄ {P Q} (P-Q : Dual P Q) ‚Üí P-Q ‚â° Dual-sym (Dual-sym P-Q)
  Dual-sym-sym end = refl
  Dual-sym-sym (Œ†Œ£'S x) = cong Œ†Œ£'S (funExtS (Œª y ‚Üí Dual-sym-sym (x y)))
  Dual-sym-sym (Œ†Œ£'D x) = cong Œ†Œ£'D (funExtD (Œª y ‚Üí Dual-sym-sym (x y)))
  Dual-sym-sym (Œ£Œ†'S x) = cong Œ£Œ†'S (funExtS (Œª y ‚Üí Dual-sym-sym (x y)))
  Dual-sym-sym (Œ£Œ†'D x) = cong Œ£Œ†'D (funExtD (Œª y ‚Üí Dual-sym-sym (x y)))

module _
  (funExtD : ‚àÄ {a}{b}{A : ‚òÖ_ a}{B : A ‚Üí ‚òÖ_ b}{f g : (x : A) ‚Üí B x} ‚Üí (‚àÄ x ‚Üí f x ‚â° g x) ‚Üí f ‚â° g)
  (funExtS : ‚àÄ {a}{b}{A : ‚òÖ_ a}{B : ..(_ : A) ‚Üí ‚òÖ_ b}{f g : ..(x : A) ‚Üí B x} ‚Üí (‚àÄ x ‚Üí f x ‚â° g x) ‚Üí f ‚â° g)
  where
  sim-comp-assoc-end : ‚àÄ {P P' Q Q' R}(P-P' : Dual P P')(Q-Q' : Dual Q Q')
    (√∏P : Sim end P)(PQ : Sim P' Q)(QR : Sim Q' R)
    ‚Üí sim-comp Q-Q' (sim-comp P-P' √∏P PQ) QR
    ‚â° sim-comp P-P' √∏P (sim-comp Q-Q' PQ QR)
  sim-comp-assoc-end P-P' Q-Q' (left ()) PQ QR
  sim-comp-assoc-end end Q-Q' (right ()) (left PQ) QR
  sim-comp-assoc-end (Œ†Œ£'S x‚ÇÅ) Q-Q' (right (recvS x)) (left (sendS x‚ÇÇ x‚ÇÉ)) QR
    = sim-comp-assoc-end (x‚ÇÅ x‚ÇÇ) Q-Q' (x x‚ÇÇ) x‚ÇÉ QR
  sim-comp-assoc-end (Œ†Œ£'D x‚ÇÅ) Q-Q' (right (recvD x)) (left (sendD x‚ÇÇ x‚ÇÉ)) QR
    = sim-comp-assoc-end (x‚ÇÅ x‚ÇÇ) Q-Q' (x x‚ÇÇ) x‚ÇÉ QR
  sim-comp-assoc-end (Œ£Œ†'S x) Q-Q' (right (sendS x‚ÇÅ x‚ÇÇ)) (left (recvS x‚ÇÉ)) QR
    = sim-comp-assoc-end (x x‚ÇÅ) Q-Q' x‚ÇÇ (x‚ÇÉ x‚ÇÅ) QR
  sim-comp-assoc-end (Œ£Œ†'D x) Q-Q' (right (sendD x‚ÇÅ x‚ÇÇ)) (left (recvD x‚ÇÉ)) QR
    = sim-comp-assoc-end (x x‚ÇÅ) Q-Q' x‚ÇÇ (x‚ÇÉ x‚ÇÅ) QR
  sim-comp-assoc-end P-P' end (right √∏P) (right ()) (left x‚ÇÅ)
  sim-comp-assoc-end P-P' (Œ†Œ£'S x‚ÇÅ) (right √∏P) (right (recvS x)) (left (sendS x‚ÇÇ x‚ÇÉ))
    = sim-comp-assoc-end P-P' (x‚ÇÅ x‚ÇÇ) (right √∏P) (x x‚ÇÇ) x‚ÇÉ
  sim-comp-assoc-end P-P' (Œ†Œ£'D x‚ÇÅ) (right √∏P) (right (recvD x)) (left (sendD x‚ÇÇ x‚ÇÉ))
    = sim-comp-assoc-end P-P' (x‚ÇÅ x‚ÇÇ) (right √∏P) (x x‚ÇÇ) x‚ÇÉ
  sim-comp-assoc-end P-P' (Œ£Œ†'S x) (right √∏P) (right (sendS x‚ÇÅ x‚ÇÇ)) (left (recvS x‚ÇÉ))
    = sim-comp-assoc-end P-P' (x x‚ÇÅ) (right √∏P) x‚ÇÇ (x‚ÇÉ x‚ÇÅ)
  sim-comp-assoc-end P-P' (Œ£Œ†'D x) (right √∏P) (right (sendD x‚ÇÅ x‚ÇÇ)) (left (recvD x‚ÇÉ))
    = sim-comp-assoc-end P-P' (x x‚ÇÅ) (right √∏P) x‚ÇÇ (x‚ÇÉ x‚ÇÅ)
  sim-comp-assoc-end P-P' Q-Q' (right √∏P) (right x) (right (recvD x‚ÇÅ))
    = cong (right ‚àò recvD) (funExtD (Œª m ‚Üí sim-comp-assoc-end P-P' Q-Q' (right √∏P) (right x) (x‚ÇÅ m)))
  sim-comp-assoc-end P-P' Q-Q' (right √∏P) (right x) (right (recvS x‚ÇÅ))
    = cong (right ‚àò recvS) (funExtS (Œª m ‚Üí sim-comp-assoc-end P-P' Q-Q' (right √∏P) (right x) (x‚ÇÅ m)))
  sim-comp-assoc-end P-P' Q-Q' (right √∏P) (right x) (right (sendD x‚ÇÅ x‚ÇÇ))
    = cong (right ‚àò sendD x‚ÇÅ) (sim-comp-assoc-end P-P' Q-Q' (right √∏P) (right x) x‚ÇÇ)
  sim-comp-assoc-end P-P' Q-Q' (right √∏P) (right x) (right (sendS x‚ÇÅ x‚ÇÇ))
    = cong (right ‚àò sendS x‚ÇÅ) (sim-comp-assoc-end P-P' Q-Q' (right √∏P) (right x) x‚ÇÇ)
  sim-comp-assoc-end P-P' end (right √∏P) (right ()) end
  sim-comp-assoc-end end end (right √∏P) end QR = refl
  sim-comp-assoc-end end Q-Q' end PQ QR = refl

  ‚ô¶-assoc-end : ‚àÄ {P Q R}(√∏P : Sim end P)(PQ : Sim (dual P) Q)(QR : Sim (dual Q) R)
    ‚Üí (√∏P ‚ô¶ PQ) ‚ô¶ QR ‚â° √∏P ‚ô¶ (PQ ‚ô¶ QR)
  ‚ô¶-assoc-end = sim-comp-assoc-end (Dual-spec _) (Dual-spec _)

  open ‚â°-Reasoning
  sim-comp-assoc : ‚àÄ {W P P' Q Q' R}(P-P' : Dual P P')(Q-Q' : Dual Q Q')
    (WP : Sim W P)(PQ : Sim P' Q)(QR : Sim Q' R)
    ‚Üí sim-comp Q-Q' (sim-comp P-P' WP PQ) QR
    ‚àº sim-comp P-P' WP (sim-comp Q-Q' PQ QR)
  sim-comp-assoc P-P' Q-Q' WP PQ QR {W'} W'-W √∏W'
    = sim-comp W'-W √∏W' (sim-comp Q-Q' (sim-comp P-P' WP PQ) QR)
    ‚â°‚ü® sym (sim-comp-assoc-end W'-W Q-Q' √∏W' (sim-comp P-P' WP PQ) QR) ‚ü©
      sim-comp Q-Q' (sim-comp W'-W √∏W' (sim-comp P-P' WP PQ)) QR
    ‚â°‚ü® cong (Œª X ‚Üí sim-comp Q-Q' X QR) (sym (sim-comp-assoc-end W'-W P-P' √∏W' WP PQ)) ‚ü©
      sim-comp Q-Q' (sim-comp P-P' (sim-comp W'-W √∏W' WP) PQ) QR
    ‚â°‚ü® sim-comp-assoc-end P-P' Q-Q' (sim-comp W'-W √∏W' WP) PQ QR ‚ü©
      sim-comp P-P' (sim-comp W'-W √∏W' WP) (sim-comp Q-Q' PQ QR)
    ‚â°‚ü® sim-comp-assoc-end W'-W P-P' √∏W' WP (sim-comp Q-Q' PQ QR) ‚ü©
      sim-comp W'-W √∏W' (sim-comp P-P' WP (sim-comp Q-Q' PQ QR))
    ‚àé

  ‚ô¶-assoc : ‚àÄ {W P Q R}(WP : Sim W P)(PQ : Sim (dual P) Q)(QR : Sim (dual Q) R)
    ‚Üí (WP ‚ô¶ PQ) ‚ô¶ QR ‚àº WP ‚ô¶ (PQ ‚ô¶ QR)
  ‚ô¶-assoc = sim-comp-assoc (Dual-spec _) (Dual-spec _)


‚àº-√∏ : ‚àÄ {P}{s s' : Sim end P} ‚Üí s ‚àº s' ‚Üí s ‚â° s'
‚àº-√∏ s‚àºs' = s‚àºs' end end

module _
  (funExtD : ‚àÄ {a}{b}{A : ‚òÖ_ a}{B : A ‚Üí ‚òÖ_ b}{f g : (x : A) ‚Üí B x} ‚Üí (‚àÄ x ‚Üí f x ‚â° g x) ‚Üí f ‚â° g)
  (funExtS : ‚àÄ {a}{b}{A : ‚òÖ_ a}{B : ..(_ : A) ‚Üí ‚òÖ_ b}{f g : ..(x : A) ‚Üí B x} ‚Üí (‚àÄ x ‚Üí f x ‚â° g x) ‚Üí f ‚â° g)
  where

  sim-!! : ‚àÄ {P Q}(PQ : Sim P Q) ‚Üí PQ ‚â° !À¢ (!À¢ PQ)
  sim-!! (left (recvD x))    = cong (left ‚àò recvD) (funExtD Œª m ‚Üí sim-!! (x m))
  sim-!! (left (recvS x))    = cong (left ‚àò recvS) (funExtS Œª m ‚Üí sim-!! (x m))
  sim-!! (left (sendD x x‚ÇÅ)) = cong (left ‚àò sendD x) (sim-!! x‚ÇÅ)
  sim-!! (left (sendS x x‚ÇÅ)) = cong (left ‚àò sendS x) (sim-!! x‚ÇÅ)
  sim-!! (right (recvD x))    = cong (right ‚àò recvD) (funExtD Œª m ‚Üí sim-!! (x m))
  sim-!! (right (recvS x))    = cong (right ‚àò recvS) (funExtS Œª m ‚Üí sim-!! (x m))
  sim-!! (right (sendD x x‚ÇÅ)) = cong (right ‚àò sendD x) (sim-!! x‚ÇÅ)
  sim-!! (right (sendS x x‚ÇÅ)) = cong (right ‚àò sendS x) (sim-!! x‚ÇÅ)
  sim-!! end = refl

  sim-comp-!-end : ‚àÄ {Q Q' R}(Q-Q' : Dual Q Q')(¬∑Q : Sim end Q)(Q'R : Sim Q' R)
    ‚Üí sim-comp (Dual-sym Q-Q') (!À¢ Q'R) (!À¢ ¬∑Q) ‚â° !À¢ (sim-comp Q-Q' ¬∑Q Q'R)
  sim-comp-!-end Q-Q' (left ()) QR
  sim-comp-!-end end (right ()) (left x‚ÇÅ)
  sim-comp-!-end (Œ†Œ£'S x‚ÇÅ) (right (recvS x)) (left (sendS x‚ÇÇ x‚ÇÉ)) = sim-comp-!-end (x‚ÇÅ x‚ÇÇ) (x x‚ÇÇ) x‚ÇÉ
  sim-comp-!-end (Œ†Œ£'D x‚ÇÅ) (right (recvD x)) (left (sendD x‚ÇÇ x‚ÇÉ)) = sim-comp-!-end (x‚ÇÅ x‚ÇÇ) (x x‚ÇÇ) x‚ÇÉ
  sim-comp-!-end (Œ£Œ†'S x) (right (sendS x‚ÇÅ x‚ÇÇ)) (left (recvS x‚ÇÉ)) = sim-comp-!-end (x x‚ÇÅ) x‚ÇÇ (x‚ÇÉ x‚ÇÅ)
  sim-comp-!-end (Œ£Œ†'D x) (right (sendD x‚ÇÅ x‚ÇÇ)) (left (recvD x‚ÇÉ)) = sim-comp-!-end (x x‚ÇÅ) x‚ÇÇ (x‚ÇÉ x‚ÇÅ)
  sim-comp-!-end Q-Q' (right x) (right (recvD x‚ÇÅ))
    = cong (left ‚àò recvD) (funExtD (Œª x‚ÇÇ ‚Üí sim-comp-!-end Q-Q' (right x) (x‚ÇÅ x‚ÇÇ)))
  sim-comp-!-end Q-Q' (right x) (right (recvS x‚ÇÅ))
    = cong (left ‚àò recvS) (funExtS (Œª x‚ÇÇ ‚Üí sim-comp-!-end Q-Q' (right x) (x‚ÇÅ x‚ÇÇ)))
  sim-comp-!-end Q-Q' (right x) (right (sendD x‚ÇÅ x‚ÇÇ))
    = cong (left ‚àò sendD x‚ÇÅ) (sim-comp-!-end Q-Q' (right x) x‚ÇÇ)
  sim-comp-!-end Q-Q' (right x) (right (sendS x‚ÇÅ x‚ÇÇ))
    = cong (left ‚àò sendS x‚ÇÅ) (sim-comp-!-end Q-Q' (right x) x‚ÇÇ)
  sim-comp-!-end end (right x) end = refl
  sim-comp-!-end end end QR = {!!}

  open ‚â°-Reasoning
  module _ {P Q}{s s' : Sim P Q} where
    !À¢-cong : s ‚àº s' ‚Üí !À¢ s ‚àº !À¢ s'
    !À¢-cong s‚àºs' Q'-Q √∏Q'
      = sim-comp Q'-Q √∏Q' (!À¢ s)
      ‚â°‚ü® {!!} ‚ü©
        sim-comp Q'-Q √∏Q' (!À¢ (sim-comp (Dual-spec Q) s (sim-id _)))
      ‚â°‚ü® {!!} ‚ü©
        sim-comp Q'-Q √∏Q' (!À¢ s')
      ‚àé

  postulate
    sim-comp-assoc-end' : ‚àÄ {P Q Q' R R'}(Q-Q' : Dual Q Q')(R-R' : Dual R R')
      (PQ : Sim P Q)(QR : Sim Q' R )(R√∏ : Sim R' end)
      ‚Üí sim-comp R-R' (sim-comp Q-Q' PQ QR) R√∏
      ‚â° sim-comp Q-Q' PQ (sim-comp R-R' QR R√∏)


  sim-comp-! : ‚àÄ {P Q Q' R}(Q-Q' : Dual Q Q')(PQ : Sim P Q)(Q'R : Sim Q' R)
    ‚Üí sim-comp (Dual-sym Q-Q') (!À¢ Q'R) (!À¢ PQ) ‚àº !À¢ (sim-comp Q-Q' PQ Q'R)
  sim-comp-! Q-Q' PQ Q'R {R'} R'-R √∏R'
    = sim-comp R'-R √∏R' (sim-comp (Dual-sym Q-Q') (!À¢ Q'R) (!À¢ PQ))
    ‚â°‚ü® sim-!! (sim-comp R'-R √∏R' (sim-comp (Dual-sym Q-Q') (!À¢ Q'R) (!À¢ PQ))) ‚ü©
      !À¢( !À¢ ((sim-comp R'-R √∏R' (sim-comp (Dual-sym Q-Q') (!À¢ Q'R) (!À¢ PQ)))))
    ‚â°‚ü® cong (!À¢ ‚àò !À¢) (sym (sim-comp-assoc-end funExtD funExtS R'-R (Dual-sym Q-Q') √∏R' (!À¢ Q'R) (!À¢ PQ))) ‚ü©
      !À¢
        (!À¢
         (sim-comp (Dual-sym Q-Q') (sim-comp R'-R √∏R' (!À¢ Q'R)) (!À¢ PQ)))
    ‚â°‚ü® cong !À¢ (sym (sim-comp-!-end (Dual-sym Q-Q') (sim-comp R'-R √∏R' (!À¢ Q'R)) (!À¢ PQ))) ‚ü©
      !À¢
        (sim-comp (Dual-sym (Dual-sym Q-Q')) (!À¢ (!À¢ PQ))
         (!À¢ (sim-comp R'-R √∏R' (!À¢ Q'R))))
    ‚â°‚ü® cong‚ÇÇ (Œª X Y ‚Üí !À¢ (sim-comp X Y (!À¢ (sim-comp R'-R √∏R' (!À¢ Q'R)))))
         (sym (Dual-sym-sym funExtD funExtS Q-Q')) (sym (sim-!! PQ)) ‚ü©
     !À¢ (sim-comp Q-Q' PQ (!À¢ (sim-comp R'-R √∏R' (!À¢ Q'R))))
    ‚â°‚ü® cong (!À¢ ‚àò sim-comp Q-Q' PQ) (sym (sim-comp-!-end R'-R √∏R' (!À¢ Q'R))) ‚ü©
      !À¢
        (sim-comp Q-Q' PQ
         (sim-comp (Dual-sym R'-R) (!À¢ (!À¢ Q'R)) (!À¢ √∏R')))
    ‚â°‚ü® cong
         (Œª X ‚Üí !À¢ (sim-comp Q-Q' PQ (sim-comp (Dual-sym R'-R) X (!À¢ √∏R'))))
         (sym (sim-!! Q'R)) ‚ü©
      !À¢ (sim-comp Q-Q' PQ (sim-comp (Dual-sym R'-R) Q'R (!À¢ √∏R')))
    -- ‚â°‚ü® cong !À¢ (sym (sim-comp-assoc-end' Q-Q' (Dual-sym R'-R) PQ Q'R (!À¢ √∏R'))) ‚ü©
    ‚â°‚ü® ‚àº-√∏ {!!}‚ü©
      !À¢ (sim-comp (Dual-sym R'-R) (sim-comp Q-Q' PQ Q'R) (!À¢ √∏R'))
    ‚â°‚ü® cong (Œª X ‚Üí !À¢ (sim-comp (Dual-sym R'-R) X (!À¢ √∏R'))) (sim-!! (sim-comp Q-Q' PQ Q'R)) ‚ü©
      !À¢ (sim-comp (Dual-sym R'-R) (!À¢ (!À¢ (sim-comp Q-Q' PQ Q'R)))
                                   (!À¢ √∏R'))
    ‚â°‚ü® cong !À¢ (sim-comp-!-end R'-R √∏R' (!À¢ (sim-comp Q-Q' PQ Q'R))) ‚ü©
      !À¢ (!À¢ (sim-comp R'-R √∏R' (!À¢ (sim-comp Q-Q' PQ Q'R))))
    ‚â°‚ü® sym (sim-!! (sim-comp R'-R √∏R' (!À¢ (sim-comp Q-Q' PQ Q'R)))) ‚ü©
      sim-comp R'-R √∏R' (!À¢ (sim-comp Q-Q' PQ Q'R))
    ‚àé

  ‚ô¶-! : ‚àÄ {P Q R}(PQ : Sim P Q)(QR : Sim (dual Q) R)
    ‚Üí !À¢ (PQ ‚ô¶ QR) ‚àº (!À¢ QR) ‚ô¶ (!À¢ {!PQ!})
  ‚ô¶-! = {!!}
{-

unit-sim : ‚àÄ {P} ‚Üí Process ùüô P ‚Üí Sim end P
unit-sim (do (send m x)) = right (send m (unit-sim x))
unit-sim (do (recv x)) = right (recv (Œª m ‚Üí unit-sim (x m)))
unit-sim (end x) = end

{-
toEl : ‚àÄ {P A} ‚Üí Process A P ‚Üí El P (const A)
toEl (end x) = x
toEl (do (recv f)) = Œª x ‚Üí toEl (f x)
toEl (do (send m x)) = m , toEl x
-}

idP : ‚àÄ {A} ‚Üí Process A (Œ†' A (const end))
idP = do (recv end)

dual¬≤ : ‚àÄ {P A} ‚Üí Process A P ‚Üí Process A (dual (dual P))
dual¬≤ (end x) = end x
dual¬≤ (do (recv x)) = do (recv (Œª m ‚Üí dual¬≤ (x m)))
dual¬≤ (do (send m x)) = do (send m (dual¬≤ x))

apply-sim : ‚àÄ {P Q} ‚Üí Sim P Q ‚Üí P ‚üπ·¥æ Q
apply-sim (left (send m x)) (do (recv x‚ÇÅ)) = apply-sim x (x‚ÇÅ m)
apply-sim (left (recv x)) (do (send m x‚ÇÅ)) = apply-sim (x m) x‚ÇÅ
apply-sim (right (send m x)) P‚ÇÇ = do (send m (apply-sim x P‚ÇÇ))
apply-sim (right (recv x)) P‚ÇÇ = do (recv (Œª m ‚Üí apply-sim (x m) P‚ÇÇ))
apply-sim end P = P

apply-sim' : ‚àÄ {P Q} ‚Üí Sim P Q ‚Üí Q ‚üπ·¥æ P -- ‚àÄ {A} ‚Üí Process A Q ‚Üí Process A (dual P)
apply-sim' PQ P = apply-sim (sim-sym PQ) P

apply : ‚àÄ {P Q A} ‚Üí P ‚üπ Q ‚Üí Process A P ‚Üí Process A Q
apply PQ P = apply-sim PQ (dual¬≤ P)

module _ (funExt : ‚àÄ {a}{b}{A : ‚òÖ_ a}{B : A ‚Üí ‚òÖ_ b}{f g : (x : A) ‚Üí B x} ‚Üí (‚àÄ x ‚Üí f x ‚â° g x) ‚Üí f ‚â° g) where
  apply-comp : ‚àÄ {P Q R A}(PQ : Sim P Q)(QR : Sim (dual Q) R)(p : Process A (dual P)) ‚Üí apply-sim (sim-comp PQ QR) p ‚â° apply QR (apply-sim PQ p)
  apply-comp (left (send m x)) QR (do (recv x‚ÇÅ)) = apply-comp x QR (x‚ÇÅ m)
  apply-comp (left (recv x)) QR (do (send m x‚ÇÅ)) = apply-comp (x m) QR x‚ÇÅ
  apply-comp (right (send m x)) (left (recv x‚ÇÅ)) p = apply-comp x (x‚ÇÅ m) p
  apply-comp (right (send m x)) (right (recv x‚ÇÅ)) p = cong (Œª X ‚Üí do (recv X))
    (funExt (Œª m' ‚Üí apply-comp (right (send m x)) (x‚ÇÅ m') p))
  apply-comp (right (send m x)) (right (send m‚ÇÅ x‚ÇÅ)) p
    rewrite apply-comp (right (send m x)) x‚ÇÅ p = refl
  apply-comp (right (recv x)) (left (send m x‚ÇÅ)) p = apply-comp (x m) x‚ÇÅ p
  apply-comp (right (recv x)) (right (send m x‚ÇÅ)) p
    rewrite apply-comp (right (recv x)) x‚ÇÅ p = refl
  apply-comp (right (recv x)) (right (recv x‚ÇÅ)) p = cong (Œª X ‚Üí do (recv X))
    (funExt (Œª m ‚Üí apply-comp (right (recv x)) (x‚ÇÅ m) p))
  apply-comp end QR (do ())
  apply-comp end QR (end x) = refl

{-
_>>=P_ : ‚àÄ {A B P}{Q : Tele P ‚Üí Proto} ‚Üí Process A P ‚Üí ((p : Tele P) ‚Üí A ‚Üí Process B (Q p)) ‚Üí Process B (P >>‚â° Q)
send m p >>=P k = send m (p >>=P (Œª p‚ÇÅ ‚Üí k (m , p‚ÇÅ)))
recv x >>=P k = recv (Œª m ‚Üí x m >>=P (Œª p ‚Üí k (m , p)))
end x >>=P k = k 0‚ÇÅ x


  {-
module _ where
  bind-com : (P : Proto)(Q : Tele P ‚Üí Proto)(R : Tele (dual P) ‚Üí Proto)
    (X : Tele (P >>‚â° Q) ‚Üí ‚òÖ)(Y : Tele (dual P >>‚â° R) ‚Üí ‚òÖ)
    ‚Üí El (P >>‚â° Q) X ‚Üí El (dual P >>‚â° R) Y ‚Üí ? √ó ?
-- -}
-- -}
-- -}
-- -}
-- -}
