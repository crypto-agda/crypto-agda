{-# OPTIONS --copatterns #-}
open import Algebra

open import Function

open import Data.Nat.NP
open import Data.Nat.Distance
open import Data.Nat.Properties
open import Data.Two
open import Data.Zero
open import Data.Product

open import Relation.Binary
open import Relation.Binary.PropositionalEquality.NP

open import HoTT
open Equivalences

open import Explore.Core
open import Explore.Universe.Type {ùüò}
open import Explore.Universe.Base

module Neglible where

module prop = CommutativeSemiring commutativeSemiring
module OR = Poset (DecTotalOrder.poset decTotalOrder)

‚â§-*-cancel : ‚àÄ {x m n} ‚Üí 1 ‚â§ x ‚Üí  x * m ‚â§ x * n ‚Üí m ‚â§ n
‚â§-*-cancel {suc x} {m} {n} (s‚â§s le) mn
  rewrite prop.*-comm (suc x) m | prop.*-comm (suc x) n = cancel-*-right-‚â§ _ _ _ mn

record ‚Ñï‚Üí‚Ñö : Set where
  constructor _/_[_]
  field
    ŒµN : (n : ‚Ñï) ‚Üí ‚Ñï
    ŒµD : (n : ‚Ñï) ‚Üí ‚Ñï
    ŒµD-pos : ‚àÄ n ‚Üí ŒµD n > 0

record Is-Neg (Œµ : ‚Ñï‚Üí‚Ñö) : Set where
  constructor mk
  open ‚Ñï‚Üí‚Ñö Œµ
  field
    c‚Çô : (c : ‚Ñï) ‚Üí ‚Ñï
    prf : ‚àÄ(c n : ‚Ñï) ‚Üí n > c‚Çô n ‚Üí n ^ c * ŒµN n ‚â§ ŒµD n
open Is-Neg

0‚Ñï‚Ñö : ‚Ñï‚Üí‚Ñö
‚Ñï‚Üí‚Ñö.ŒµN 0‚Ñï‚Ñö _ = 0
‚Ñï‚Üí‚Ñö.ŒµD 0‚Ñï‚Ñö _ = 1
‚Ñï‚Üí‚Ñö.ŒµD-pos 0‚Ñï‚Ñö _ = s‚â§s z‚â§n

0‚Ñï‚Ñö-neg : Is-Neg 0‚Ñï‚Ñö
c‚Çô 0‚Ñï‚Ñö-neg _ = 0
prf 0‚Ñï‚Ñö-neg c n x = OR.trans (OR.reflexive (proj‚ÇÇ prop.zero (n ^ c))) z‚â§n

_+‚Ñï‚Ñö_ : ‚Ñï‚Üí‚Ñö ‚Üí ‚Ñï‚Üí‚Ñö ‚Üí ‚Ñï‚Üí‚Ñö
‚Ñï‚Üí‚Ñö.ŒµN ((ŒµN / ŒµD [ _ ]) +‚Ñï‚Ñö (ŒºN / ŒºD [ _ ])) n = ŒµN n * ŒºD n + ŒºN n * ŒµD n
‚Ñï‚Üí‚Ñö.ŒµD ((ŒµN / ŒµD [ _ ]) +‚Ñï‚Ñö (ŒºN / ŒºD [ _ ])) n = ŒµD n * ŒºD n
‚Ñï‚Üí‚Ñö.ŒµD-pos ((ŒµN / ŒµD [ ŒµD+ ]) +‚Ñï‚Ñö (ŒºN / ŒºD [ ŒºD+ ])) n = ŒµD+ n *-mono ŒºD+ n


+‚Ñï‚Ñö-neg : {Œµ Œº : ‚Ñï‚Üí‚Ñö} ‚Üí Is-Neg Œµ ‚Üí Is-Neg Œº ‚Üí Is-Neg (Œµ +‚Ñï‚Ñö Œº)
c‚Çô (+‚Ñï‚Ñö-neg Œµ Œº) n = 1 + c‚Çô Œµ n + c‚Çô Œº n
prf (+‚Ñï‚Ñö-neg {ŒµM} {ŒºM} Œµ Œº) c n n>nc = ‚â§-*-cancel {x = n} (OR.trans (s‚â§s z‚â§n) n>nc) lemma
  where

  open ‚â§-Reasoning
  open ‚Ñï‚Üí‚Ñö ŒµM
  open ‚Ñï‚Üí‚Ñö ŒºM renaming (ŒµN to ŒºN; ŒµD to ŒºD; ŒµD-pos to ŒºD-pos)

  lemma =  n * (n ^ c * (ŒµN n * ŒºD n + ŒºN n * ŒµD n))
        ‚â°‚ü® ! prop.*-assoc n (n ^ c) _
         ‚àô proj‚ÇÅ prop.distrib (n ^ (1 + c)) (ŒµN n * ŒºD n) (ŒºN n * ŒµD n)
         ‚àô ap‚ÇÇ _+_ (! prop.*-assoc (n ^ (1 + c)) (ŒµN n) (ŒºD n))
                   (! (prop.*-assoc (n ^ (1 + c)) (ŒºN n) (ŒµD n))) ‚ü©
           n ^ (1 + c) * ŒµN n * ŒºD n + n ^ (1 + c) * ŒºN n * ŒµD n
        ‚â§‚ü®     (prf Œµ (1 + c) n (OR.trans (s‚â§s (‚â§-step (m‚â§m+n (c‚Çô Œµ n) (c‚Çô Œº n)))) n>nc) *-mono (ŒºD n ‚àé))
        +-mono (prf Œº (1 + c) n (OR.trans (s‚â§s (‚â§-step (n‚â§m+n (c‚Çô Œµ n) (c‚Çô Œº n)))) n>nc) *-mono (ŒµD n ‚àé)) ‚ü©
           ŒµD n * ŒºD n + ŒºD n * ŒµD n
        ‚â°‚ü® ap‚ÇÇ _+_ (refl {x = ŒµD n * ŒºD n}) (prop.*-comm (ŒºD n) (ŒµD n) ‚àô ! proj‚ÇÇ prop.+-identity (ŒµD n * ŒºD n)) ‚ü©
           2 * (ŒµD n * ŒºD n)
        ‚â§‚ü® OR.trans (s‚â§s (s‚â§s z‚â§n)) n>nc *-mono (ŒµD n * ŒºD n ‚àé) ‚ü©
           n * (ŒµD n * ŒºD n)
        ‚àé


module _ (R·µÅ : ‚Ñï ‚Üí U)(let R = Œª n ‚Üí El (R·µÅ n)) where

  # : ‚àÄ {n} ‚Üí Count (R n)
  # {n} = count (R·µÅ n)

  record _~_ (f g : (x : ‚Ñï) ‚Üí R x ‚Üí ùüö) : Set where
    constructor mk
    field
      Œµ : ‚Ñï‚Üí‚Ñö
    open ‚Ñï‚Üí‚Ñö Œµ
    field
      Œµ-neg : Is-Neg Œµ
      bounded : ‚àÄ k ‚Üí ŒµD k * dist (# (f k)) (# (g k)) ‚â§ Card (R·µÅ k) * ŒµN k


  ~-trans : Transitive _~_
  _~_.Œµ (~-trans x x‚ÇÅ) = _
  _~_.Œµ-neg (~-trans x x‚ÇÅ) = +‚Ñï‚Ñö-neg (_~_.Œµ-neg x) (_~_.Œµ-neg x‚ÇÅ)
  _~_.bounded (~-trans {f}{g}{h}(mk Œµ‚ÇÄ Œµ‚ÇÄ-neg fg) (mk Œµ‚ÇÅ Œµ‚ÇÅ-neg gh)) k
      = (b * d) * dist #f #h
      ‚â§‚ü® (b * d ‚àé) *-mono dist-sum #f #g #h ‚ü©
        (b * d) * (dist #f #g + dist #g #h)
      ‚â°‚ü® proj‚ÇÅ prop.distrib (b * d) (dist #f #g) (dist #g #h)
         ‚àô ap‚ÇÇ _+_ (ap‚ÇÇ _*_ (prop.*-comm b d) refl
         ‚àô prop.*-assoc d b (dist #f #g)) (prop.*-assoc b d (dist #g #h))
       ‚ü©
        d * (b * dist #f #g) + b * (d * dist #g #h)
      ‚â§‚ü® ((d ‚àé) *-mono fg k) +-mono ((b ‚àé) *-mono gh k) ‚ü©
        d * (|R| * a) + b * (|R| * c)
      ‚â°‚ü® ap‚ÇÇ _+_ (rot d |R| a) (rot b |R| c) ‚àô ! proj‚ÇÅ prop.distrib |R| (a * d) (c * b) ‚ü©
        |R| * ‚Ñï‚Üí‚Ñö.ŒµN (Œµ‚ÇÄ +‚Ñï‚Ñö Œµ‚ÇÅ) k
      ‚àé
   where
     open ‚â§-Reasoning
     rot : ‚àÄ x y z ‚Üí x * (y * z) ‚â° y * (z * x)
     rot x y z = prop.*-comm x (y * z) ‚àô prop.*-assoc y z x
     |R| = Card (R·µÅ k)
     #f = # (f k)
     #g = # (g k)
     #h = # (h k)
     a = ‚Ñï‚Üí‚Ñö.ŒµN Œµ‚ÇÄ k
     b = ‚Ñï‚Üí‚Ñö.ŒµD Œµ‚ÇÄ k
     c = ‚Ñï‚Üí‚Ñö.ŒµN Œµ‚ÇÅ k
     d = ‚Ñï‚Üí‚Ñö.ŒµD Œµ‚ÇÅ k
-- -}
-- -}
-- -}
-- -}
-- -}
-- -}
